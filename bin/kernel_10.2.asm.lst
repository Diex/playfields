------- FILE kernel_10.2.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_10.2.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						;-------------------------------------------------------------------------------
    164  0000 ????						; shortcut
    165  0000 ????
    166  0000 ????				      MAC	_nextline
    167  0000 ????				      dec	scanline
    168  0000 ????				      sta	WSYNC
    169  0000 ????				      ENDM
    170  0000 ????
    171  0000 ????				      MAC	_get_color
    172  0000 ????
    173  0000 ????				      lda	{1}
    174  0000 ????				      adc	{2}
    175  0000 ????				      and	#$0F	; limit the value to 0-15
    176  0000 ????				      tax
    177  0000 ????				      lda	{3},x
    178  0000 ????				      ENDM
    179  0000 ????
    180  0000 ????				      MAC	_get_color_random15
    181  0000 ????						; Galois 8-bit Linear Feedback Shift Registers
    182  0000 ????						; https://samiam.org/blog/20130617.html
    183  0000 ????						; galois_lfsr_random
    184  0000 ????				      lda	r_seed	; keep calling funtion to for better entropy
    185  0000 ????				      lsr		; shift right
    186  0000 ????				      bcc	.noeor0	; if carry 1, then exclusive OR the bits
    187  0000 ????				      eor	#$D4	; d4 tap (11010100)
    188  0000 ????			   .noeor0    sta	r_seed
    189  0000 ????				      and	#$0F	; limit the value to 0-15
    190  0000 ????				      tax
    191  0000 ????				      lda	colors2,x
    192  0000 ????				      ENDM
    193  0000 ????
    194  0000 ????
    195  0000 ????
    196  0000 ????						; ldx channel
    197  0000 ????						; {1}	   = type
    198  0000 ????						; {2}	   = pitch
    199  0000 ????				      MAC	_snd_play
    200  0000 ????						; lda sndbank_type,y
    201  0000 ????				      ldx	#0
    202  0000 ????				      lda	{1}
    203  0000 ????				      sta	AUDC0,x	; audio control
    204  0000 ????				      lda	#3
    205  0000 ????				      sta	AUDV0,x	; audio volume (0 a 15)
    206  0000 ????
    207  0000 ????				      lda	{2}
    208  0000 ????				      sta	AUDF0,x	; audio frequence (0 a 31 - divisiones del clock)
    209  0000 ????
    210  0000 ????				      lda	#20
    211  0000 ????				      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    212  0000 ????				      ENDM
    213  0000 ????
    214  0000 ????						; EOF
------- FILE kernel_10.2.asm
------- FILE macros2.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macros2.h"
      1  0000 ????				      MAC	_clr16
      2  0000 ????				      LDA	#0
      3  0000 ????				      STA	{1}+0
      4  0000 ????				      STA	{1}+1
      5  0000 ????				      ENDM
      6  0000 ????
      7  0000 ????
      8  0000 ????						;------------------------------------------------
      9  0000 ????						; Arithmetic Operations
     10  0000 ????						;------------------------------------------------
     11  0000 ????
     12  0000 ????						; Increment the 16 bit value at location MEM
     13  0000 ????						; by one.
     14  0000 ????						;
     15  0000 ????						; On exit: A, X & Y are unchanged.
     16  0000 ????
     17  0000 ????				      MAC	_inc16
     18  0000 ????				      INC	{1}+0
     19  0000 ????				      BNE	_DONE
     20  0000 ????				      INC	{1}+1
     21  0000 ????			   _DONE      EQU	*
     22  0000 ????				      ENDM		;MACRO MEM
     23  0000 ????
     24  0000 ????						; Add two 16 bit numbers together and store the
     25  0000 ????						; result in another memory location. RES may be
     26  0000 ????						; the same as either VLA or VLB.
     27  0000 ????						;
     28  0000 ????						; On exit: A = ??, X & Y are unchanged.
     29  0000 ????
     30  0000 ????				      MAC	_add16
     31  0000 ????				      IF	{1} != {2}
     32  0000 ????				      CLC
     33  0000 ????				      LDA	{1}+0
     34  0000 ????				      ADC	{2}+0
     35  0000 ????				      STA	{3}+0
     36  0000 ????				      LDA	{1}+1
     37  0000 ????				      ADC	{2}+1
     38  0000 ????				      STA	{3}+1
     39  0000 ????				      ELSE
     40  0000 ????				      _ASL16	{1},{3}
     41  0000 ????				      ENDIF
     42  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     43  0000 ????
     44  0000 ????
     45  0000 ????
     46  0000 ????
     47  0000 ????						; Calculate the 16 bit product of two 16 bit
     48  0000 ????						; unsigned numbers. Any overflow during the
     49  0000 ????						; calculation is lost. The number at location
     50  0000 ????						; VLA is destroyed.
     51  0000 ????						;
     52  0000 ????						; On exit: A = ??, X = $FF, Y is unchanged.
     53  0000 ????
     54  0000 ????				      MAC	_mul16
     55  0000 ????				      _CLR16	{3}
     56  0000 ????				      LDX	#16
     57  0000 ????			   ._LOOP
     58  0000 ????				      _ASL16	{3},{3}
     59  0000 ????				      _ASL16	{1},{1}
     60  0000 ????				      BCC	._NEXT
     61  0000 ????				      _ADD16	{2},{3},{3}
     62  0000 ????			   ._NEXT
     63  0000 ????				      DEX
     64  0000 ????				      BPL	._LOOP
     65  0000 ????						; Count cycles for macro calls
     66  0000 ????						; _CLR16: 6 cycles
     67  0000 ????						; _ASL16: 6 cycles
     68  0000 ????						; _ASL16: 6 cycles
     69  0000 ????						; _ADD16: 12 cycles
     70  0000 ????						; Total cycles: 30 cycles
     71  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     72  0000 ????
     73  0000 ????
     74  0000 ????						;------------------------------------------------
     75  0000 ????						; Shift Operations
     76  0000 ????						;------------------------------------------------
     77  0000 ????
     78  0000 ????						; Perform an arithmetic shift left on the 16 bit
     79  0000 ????						; number at location VLA and store the result at
     80  0000 ????						; location RES. If VLA and RES are the same then
     81  0000 ????						; the operation is applied directly to the memory
     82  0000 ????						; otherwise it is done in the accumulator.
     83  0000 ????						;
     84  0000 ????						; On exit: A = ??, X & Y are unchanged.
     85  0000 ????
     86  0000 ????				      MAC	_asl16
     87  0000 ????				      IF	{1} != {2}
     88  0000 ????				      LDA	{1}+0
     89  0000 ????				      ASL
     90  0000 ????				      STA	{2}+0
     91  0000 ????				      LDA	{1}+1
     92  0000 ????				      ROL
     93  0000 ????				      STA	{2}+1
     94  0000 ????				      ELSE
     95  0000 ????				      ASL	{1}+0
     96  0000 ????				      ROL	{1}+1
     97  0000 ????				      ENDIF
     98  0000 ????				      ENDM		;MACRO VLA,RES
     99  0000 ????
    100  0000 ????						; Perform a right rotation on the 16 bit number
    101  0000 ????						; at location VLA and store the result at
    102  0000 ????						; location RES. If VLA and RES are the same then
    103  0000 ????						; the operation is applied directly to the memory
    104  0000 ????						; otherwise it is done in the accumulator.
    105  0000 ????						;
    106  0000 ????						; On exit: A = ??, X & Y are unchanged.
    107  0000 ????
    108  0000 ????				      MAC	_ror16
    109  0000 ????				      IF	{1} != {2}
    110  0000 ????				      LDA	{1}+1
    111  0000 ????				      ROR
    112  0000 ????				      STA	{2}+1
    113  0000 ????				      LDA	{1}+0
    114  0000 ????				      ROR
    115  0000 ????				      STA	{2}+0
    116  0000 ????				      ELSE
    117  0000 ????				      ROR	{1}+1
    118  0000 ????				      ROR	{1}+0
    119  0000 ????				      ENDIF
    120  0000 ????				      ENDM
    121  0000 ????
    122  0000 ????						; Perform a left rotation on the 16 bit number at
    123  0000 ????						; location VLA and store the result at location
    124  0000 ????						; RES. If VLA and RES are the same then the
    125  0000 ????						; operation is applied directly to the memory,
    126  0000 ????						; otherwise it is done in the accumulator.
    127  0000 ????						;
    128  0000 ????						; On exit: A = ??, X & Y are unchanged.
    129  0000 ????
    130  0000 ????				      MAC	_rol16
    131  0000 ????				      IF	{1} != {2}
    132  0000 ????				      LDA	{1}+0
    133  0000 ????				      ROL
    134  0000 ????				      STA	{2}+0
    135  0000 ????				      LDA	{1}+1
    136  0000 ????				      ROL
    137  0000 ????				      STA	{2}+1
    138  0000 ????				      ELSE
    139  0000 ????				      ROL	{1}+0
    140  0000 ????				      ROL	{1}+1
    141  0000 ????				      ENDIF
    142  0000 ????				      ENDM		;MACRO VLA,RES
    143  0000 ????
    144  0000 ????						; Calculate the logical OR of the two 16 bit
    145  0000 ????						; values at locations VLA and VLB. The result is
    146  0000 ????						; stored in location RES. If VLA and VLB are the
    147  0000 ????						; same the macro expands to a _XFR16.
    148  0000 ????						;
    149  0000 ????						; On exit: A = ??, X & Y are unchanged.
    150  0000 ????
    151  0000 ????				      MAC	_ora16
    152  0000 ????				      IF	{1} != {2}
    153  0000 ????				      LDA	{1}+0
    154  0000 ????				      ORA	{2}+0
    155  0000 ????				      STA	{3}+0
    156  0000 ????				      LDA	{1}+1
    157  0000 ????				      ORA	{2}+1
    158  0000 ????				      STA	{3}+1
    159  0000 ????				      ELSE
    160  0000 ????				      _XFR16	{1},{3}
    161  0000 ????				      ENDIF
    162  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    163  0000 ????
    164  0000 ????
    165  0000 ????
    166  0000 ????				      MAC	_rev8
    167  0000 ????				      ldx	{1}+0
    168  0000 ????				      lda	{2},x	; Load the value to be reversed from memory
    169  0000 ????				      ENDM		;reverseBits:
    170  0000 ????
    171  0000 ????						; Transfer 2 bytes of memory from one location to
    172  0000 ????						; another using the accumulator. The order in
    173  0000 ????						; which the bytes are moved depends on the
    174  0000 ????						; relative positions of SRC and DST. If SRC and
    175  0000 ????						; DST are the same then no code is generated.
    176  0000 ????						;
    177  0000 ????						; On exit: A = ??, X & Y are unchanged.
    178  0000 ????
    179  0000 ????				      MAC	_xfr16
    180  0000 ????				      IF	{1} != {2}
    181  0000 ????				      IF	{1} > {2}
    182  0000 ????				      LDA	{1}+0
    183  0000 ????				      STA	{2}+0
    184  0000 ????				      LDA	{1}+1
    185  0000 ????				      STA	{2}+1
    186  0000 ????				      ELSE
    187  0000 ????				      LDA	{1}+1
    188  0000 ????				      STA	{2}+1
    189  0000 ????				      LDA	{1}+0
    190  0000 ????				      STA	{2}+0
    191  0000 ????				      ENDIF
    192  0000 ????				      ENDIF
    193  0000 ????				      ENDM		;MACRO SRC,DST
    194  0000 ????
    195  0000 ????
    196  0000 ????						; Calculate the exclusive OR of a 16 value at
    197  0000 ????						; location VLA with a constant value and
    198  0000 ????						; store the result at location RES.
    199  0000 ????						;
    200  0000 ????						; On exit: A = ??, X & Y are unchanged.
    201  0000 ????
    202  0000 ????				      MAC	_eor16i
    203  0000 ????				      LDA	{1}+0
    204  0000 ????				      EOR	<{2}
    205  0000 ????				      STA	{3}+0
    206  0000 ????				      LDA	{1}+1
    207  0000 ????				      EOR	>{2}
    208  0000 ????				      STA	{3}+1
    209  0000 ????				      ENDM		;MACRO VLA,NUM,RES
    210  0000 ????
    211  0000 ????				      MAC	_revbits
    212  0000 ????				      ldx	{1}+0
    213  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    214  0000 ????				      sta	{1}+0
    215  0000 ????				      ldx	{1}+1
    216  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    217  0000 ????				      sta	{1}+1
    218  0000 ????				      ENDM
    219  0000 ????
    220  0000 ????
    221  0000 ????						; Calculate the exclusive OR of the two 16 bit
    222  0000 ????						; values at locations VLA and VLB. The result is
    223  0000 ????						; stored in location RES. If VLA and VLB are the
    224  0000 ????						; same the macro expands to a _CLR16.
    225  0000 ????						;
    226  0000 ????						; On exit: A = ??, X & Y are unchanged.
    227  0000 ????
    228  0000 ????				      MAC	_eor16
    229  0000 ????				      IF	{1} != {2}
    230  0000 ????				      LDA	{1}+0
    231  0000 ????				      EOR	{2}+0
    232  0000 ????				      STA	{3}+0
    233  0000 ????				      LDA	{1}+1
    234  0000 ????				      EOR	{2}+1
    235  0000 ????				      STA	{3}+1
    236  0000 ????				      ELSE
    237  0000 ????				      _CLR16	{3}
    238  0000 ????				      ENDIF
    239  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    240  0000 ????
    241  0000 ????
    242  0000 ????
    243  0000 ????
    244  0000 ????						; Calculate the logical AND of the two 16 bit
    245  0000 ????						; values at locations VLA and VLB. The result is
    246  0000 ????						; stored in location RES. If VLA and VLB are the
    247  0000 ????						; same the macro expands to a _XFR16.
    248  0000 ????						;
    249  0000 ????						; On exit: A = ??, X & Y are unchanged.
    250  0000 ????
    251  0000 ????				      MAC	_and16
    252  0000 ????				      IF	{1} != {2}
    253  0000 ????				      LDA	{1}+0
    254  0000 ????				      AND	{2}+0
    255  0000 ????				      STA	{3}+0
    256  0000 ????				      LDA	{1}+1
    257  0000 ????				      AND	{2}+1
    258  0000 ????				      STA	{3}+1
    259  0000 ????				      ELSE
    260  0000 ????				      _XFR16	{1},{3}
    261  0000 ????				      ENDIF
    262  0000 ????				      ENDM		;MACRO VLA,VLB,RES
------- FILE kernel_10.2.asm
      5  0000 ????						;
      6  0000 ????						; Email - 8blit0@gmail.com
      7  0000 ????
      8  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
      9  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     10  0000 ????	       00 08	   MIN_SPEED  equ	8	; minimum speed
     11  0000 ????	       00 08	   MAX_COLORS equ	8	; minimum speed
     12  0000 ????
     13  0000 ????
     14 U0099 ????				      seg.u	temp	; uninitialized segment
     15 U0080					      org	$80	; origin set at base of ram
     16 U0080							; up to 9F
     17 U0080		       00 00	   c16_1      ds	2
     18 U0082		       00	   var1       ds	1
     19 U0083		       00 00	   temp       ds	2
     20 U0085		       00 00	   temp2      ds	2
     21 U0087
     22 U0087		       00	   fcount     ds	1	; 1 byte - frame counter				     ; up to AF
     23 U0088		       00 00	   revbits    ds	2
     24 U008a		       00	   speed      ds	1	; 1 byte - speed
     25 U008b		       00 00	   scanline   ds	2	; 1 byte - current scanline
     26 U008d
     27 U008d		       00	   mod_1      ds	1	; 1 byte - modulo 1
     28 U008e
     29 U008e		       00	   selDebounceTm ds	1	; 1 byte - select debounce timer
     30 U008f		       00	   selDebounceOn ds	1	; 1 byte - select debounce on
     31 U0090		       00	   selectMode ds	1	; 1 byte - select mode
     32 U0091
     33 U0091		       00	   p0_x       ds	1	; 1 byte - player 0 x position
     34 U0092		       00	   p0_y       ds	1	; 1 byte - player 0 y position
     35 U0093
     36 U0093		       00	   triggerSound ds	1	; 1 byte - trigger sound
     37 U0094		       00	   pitch      ds	1	; 1 byte - pitch
     38 U0095
     39 U0095		       00 00	   snd_on     ds	2	; 1 byte per audio channel - greater than 0 if sound is playing
     40 U0097		       00	   r_seed     ds	1	; random seed
     41 U0098		       00	   invertColors ds	1	; random seed
     42 U0099
     43 U0099
     44  10000 ????				       seg	main	; start of main segment
     45  f000					      org	$F000
     46  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     48  f00b
     49  f00b		       a9 01		      lda	#1
     50  f00d		       85 0a		      sta	CTRLPF
     51  f00f
     52  f00f		       a9 01		      lda	#1
     53  f011		       85 8a		      sta	speed
     54  f013
     55  f013		       a9 80		      lda	#$80
     56  f015		       85 91		      sta	p0_x
     57  f017		       a9 80		      lda	#$80
     58  f019		       85 92		      sta	p0_y
     59  f01b
     60  f01b							; lda #$80
     61  f01b							; sta c16_1+1
     62  f01b
     63  f01b							; generate a random see from the interval timer
     64  f01b		       ad 84 02 	      lda	INTIM	; unknown value to use as an initial random seed
     65  f01e		       85 97		      sta	r_seed	; random seed
     66  f020
      0  f020				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f020		       a9 0e		      lda	#%1110
      2  f022		       85 02	   .VSLP1     sta	WSYNC
      3  f024		       85 00		      sta	VSYNC
      4  f026		       4a		      lsr
      5  f027		       d0 f9		      bne	.VSLP1
     68  f029							; -------- set timer -------------------------------
     69  f029							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     70  f029							; 2812 machine cycles / 64 clocks = 43.9375
     71  f029		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     72  f02b		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     73  f02e							; -------- do stuff  -------------------------------
     74  f02e
     75  f02e		       c6 8d		      dec	mod_1
     76  f030		       d0 0a		      bne	.cont
     77  f032		       a5 8a		      lda	speed
     78  f034		       85 8d		      sta	mod_1
      0  f036					      _INC16	c16_1
      1  f036		       e6 80		      INC	c16_1+0
      2  f038		       d0 02		      BNE	_DONE
      3  f03a		       e6 81		      INC	c16_1+1
      4  f03a		       f0 3c	   _DONE      EQU	*
     80  f03c
     81  f03c				   .cont
     82  f03c
     83  f03c							; 'randomly' select an initial bearing (direction)
     84  f03c							; sta random1
     85  f03c
     86  f03c		       20 02 f2    .sndproc   jsr	snd_process
     87  f03f
     88  f03f
     89  f03f
     90  f03f
     91  f03f							; -------- wait ------------------------------------
     92  f03f		       ad 84 02 	      lda	INTIM	; check the timer
     93  f042		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     94  f044							; -------- done ------------------------------------
     95  f044
     96  f044		       a9 00		      lda	#0
     97  f046		       85 01		      sta	VBLANK
     98  f048		       a9 c0		      lda	#PF_H
     99  f04a		       85 8b		      sta	scanline
    100  f04c
    101  f04c		       a9 00		      lda	#0
    102  f04e		       85 09		      sta	COLUBK
    103  f050
    104  f050		       a5 98		      lda	invertColors
    105  f052		       f0 10		      beq	render
    106  f054		       a2 00		      ldx	#0
    107  f056		       86 98		      stx	invertColors
      0  f058					      _GET_COLOR	fcount, 0, colors2
      1  f058
      2  f058		       a5 87		      lda	fcount
      3  f05a		       65 00		      adc	0
      4  f05c		       29 0f		      and	#$0F
      5  f05e		       aa		      tax
      6  f05f		       bd 44 f2 	      lda	colors2,x
    109  f062		       85 09		      sta	COLUBK
    110  f064
    111  f064							; -------- ; primera linea visible  ------------------------------------
    112  f064
    113  f064
    114  f064		       85 02	   render     sta	WSYNC
    115  f066
    116  f066		       a5 8b		      lda	scanline
    117  f068		       85 08		      sta	COLUPF
    118  f06a
    119  f06a
    120  f06a
    121  f06a							; lda c16_1
    122  f06a							; adc scanline
      0  f06a					      _ADD16	c16_1, scanline, temp
      1  f06a					      IF	c16_1 != scanline
      2  f06a		       18		      CLC
      3  f06b		       a5 80		      LDA	c16_1+0
      4  f06d		       65 8b		      ADC	scanline+0
      5  f06f		       85 83		      STA	temp+0
      6  f071		       a5 81		      LDA	c16_1+1
      7  f073		       65 8c		      ADC	scanline+1
      8  f075		       85 84		      STA	temp+1
      9  f077				  -	      ELSE
     10  f077				  -	      _ASL16	c16_1,temp
     11  f077					      ENDIF
    124  f077
    125  f077							; rol
      0  f077					      _EOR16	temp, p0_x, temp
      1  f077					      IF	temp != p0_x
      2  f077		       a5 83		      LDA	temp+0
      3  f079		       45 91		      EOR	p0_x+0
      4  f07b		       85 83		      STA	temp+0
      5  f07d		       a5 84		      LDA	temp+1
      6  f07f		       45 92		      EOR	p0_x+1
      7  f081		       85 84		      STA	temp+1
      8  f083				  -	      ELSE
      9  f083				  -	      _CLR16	temp
     10  f083					      ENDIF
      0  f083					      _EOR16	temp, scanline, temp
      1  f083					      IF	temp != scanline
      2  f083		       a5 83		      LDA	temp+0
      3  f085		       45 8b		      EOR	scanline+0
      4  f087		       85 83		      STA	temp+0
      5  f089		       a5 84		      LDA	temp+1
      6  f08b		       45 8c		      EOR	scanline+1
      7  f08d		       85 84		      STA	temp+1
      8  f08f				  -	      ELSE
      9  f08f				  -	      _CLR16	temp
     10  f08f					      ENDIF
    128  f08f							; _ROL16 temp, temp
    129  f08f
    130  f08f							; sta temp
    131  f08f							; lda c16_1
    132  f08f							; rol
    133  f08f
    134  f08f							; _ROL16 temp, temp
    135  f08f
    136  f08f
    137  f08f							; eor temp
    138  f08f							; sta temp
    139  f08f
    140  f08f
    141  f08f
      0  f08f					      _NEXTLINE
      1  f08f		       c6 8b		      dec	scanline
      2  f091		       85 02		      sta	WSYNC
    143  f093
    144  f093		       a5 83		      lda	temp
    145  f095		       85 0f		      sta	PF2
    146  f097
      0  f097					      _NEXTLINE
      1  f097		       c6 8b		      dec	scanline
      2  f099		       85 02		      sta	WSYNC
    148  f09b
    149  f09b
    150  f09b							; lda c16_1
    151  f09b							; ror
    152  f09b							; ror
    153  f09b							; ror
    154  f09b							; ror
    155  f09b							; ror
    156  f09b							; adc temp
    157  f09b
    158  f09b		       a5 8b		      lda	scanline
    159  f09d		       6a		      ror
    160  f09e		       85 08		      sta	COLUPF
    161  f0a0
    162  f0a0							; jsr kernel2
      0  f0a0					      _ADD16	c16_1, scanline, temp
      1  f0a0					      IF	c16_1 != scanline
      2  f0a0		       18		      CLC
      3  f0a1		       a5 80		      LDA	c16_1+0
      4  f0a3		       65 8b		      ADC	scanline+0
      5  f0a5		       85 83		      STA	temp+0
      6  f0a7		       a5 81		      LDA	c16_1+1
      7  f0a9		       65 8c		      ADC	scanline+1
      8  f0ab		       85 84		      STA	temp+1
      9  f0ad				  -	      ELSE
     10  f0ad				  -	      _ASL16	c16_1,temp
     11  f0ad					      ENDIF
      0  f0ad					      _EOR16	temp, scanline, temp
      1  f0ad					      IF	temp != scanline
      2  f0ad		       a5 83		      LDA	temp+0
      3  f0af		       45 8b		      EOR	scanline+0
      4  f0b1		       85 83		      STA	temp+0
      5  f0b3		       a5 84		      LDA	temp+1
      6  f0b5		       45 8c		      EOR	scanline+1
      7  f0b7		       85 84		      STA	temp+1
      8  f0b9				  -	      ELSE
      9  f0b9				  -	      _CLR16	temp
     10  f0b9					      ENDIF
      0  f0b9					      _EOR16	temp, p0_y, temp
      1  f0b9					      IF	temp != p0_y
      2  f0b9		       a5 83		      LDA	temp+0
      3  f0bb		       45 92		      EOR	p0_y+0
      4  f0bd		       85 83		      STA	temp+0
      5  f0bf		       a5 84		      LDA	temp+1
      6  f0c1		       45 93		      EOR	p0_y+1
      7  f0c3		       85 84		      STA	temp+1
      8  f0c5				  -	      ELSE
      9  f0c5				  -	      _CLR16	temp
     10  f0c5					      ENDIF
    166  f0c5
    167  f0c5
      0  f0c5					      _NEXTLINE
      1  f0c5		       c6 8b		      dec	scanline
      2  f0c7		       85 02		      sta	WSYNC
    169  f0c9
    170  f0c9		       a5 83		      lda	temp
    171  f0cb		       85 0e		      sta	PF1
    172  f0cd
    173  f0cd		       c6 8b		      dec	scanline
    174  f0cf
    175  f0cf		       d0 03		      bne	gotorender	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    176  f0d1		       4c d7 f0 	      jmp	DoneWithFrame	; (3) 2 bytes del opcode (jmp) + 1 byte operando + byte del salto
    177  f0d4		       4c 64 f0    gotorender jmp	render
    178  f0d7
    179  f0d7							; --------------- DoneWithFrame	---------------
    180  f0d7				   DoneWithFrame
    181  f0d7
    182  f0d7							; ---- Overscan (30 scanlines)
    183  f0d7							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    184  f0d7							; 2280 machine cycles / 64 clocks = 35.625
    185  f0d7		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    186  f0d9		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    187  f0dc
    188  f0dc
    189  f0dc
    190  f0dc
    191  f0dc		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    192  f0de		       85 01		      sta	VBLANK	; turn off the beam
    193  f0e0
    194  f0e0							; -------- wait ------------------------------------
    195  f0e0		       ad 84 02 	      lda	INTIM	; check the timer
    196  f0e3		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    197  f0e5							; -------- done ------------------------------------
    198  f0e5
    199  f0e5
    200  f0e5
    201  f0e5							; -------- INPUT ------------------------------------
    202  f0e5							; Reset
    203  f0e5		       a9 01	   input      lda	#%00000001	; (2) read reset input
    204  f0e7		       2c 82 02 	      bit	SWCHB
    205  f0ea		       d0 03		      bne	switch_noreset
    206  f0ec		       4c 00 f0 	      jmp	reset
    207  f0ef				   switch_noreset
    208  f0ef
    209  f0ef
    210  f0ef
    211  f0ef
    212  f0ef							; B/W input
    213  f0ef		       a2 00		      ldx	#0
    214  f0f1		       a9 08		      lda	#%00001000
    215  f0f3		       2c 82 02 	      bit	SWCHB
    216  f0f6		       d0 02		      bne	switch_color
    217  f0f8		       a2 01		      ldx	#1
    218  f0fa				   switch_color
    219  f0fa							; stx invertColors
    220  f0fa							;TODO switch color
    221  f0fa
    222  f0fa							; Player 0 Difficulty
    223  f0fa		       a2 00		      ldx	#0
    224  f0fc		       a9 40		      lda	#%01000000
    225  f0fe		       2c 82 02 	      bit	SWCHB
    226  f101		       d0 00		      bne	switch_P0Diff1
    227  f103				   switch_P0Diff2
    228  f103							; TODO Difficulty 2
    229  f103				   switch_P0Diff1
    230  f103							; TODO Difficulty 1
    231  f103
    232  f103							; Player 1 Difficulty
    233  f103		       a2 00		      ldx	#0
    234  f105		       a9 80		      lda	#%10000000
    235  f107		       2c 82 02 	      bit	SWCHB
    236  f10a		       d0 00		      bne	switch_P1Diff1
    237  f10c				   switch_P1Diff2		; Difficulty 2
    238  f10c				   switch_P1Diff1		; Difficulty 1
    239  f10c
    240  f10c							; ------- joystick:
    241  f10c
    242  f10c							; Read button input
    243  f10c		       a0 08		      ldy	#MIN_SPEED	; P0 Fire switch
    244  f10e		       24 0c		      bit	INPT4
    245  f110		       30 1c		      bmi	pos_nofire
    246  f112		       a0 01		      ldy	#1
    247  f114
    248  f114		       a5 83		      lda	temp
    249  f116		       85 94		      sta	pitch
      0  f118					      _SND_PLAY	#4, pitch
      1  f118
      2  f118		       a2 00		      ldx	#0
      3  f11a		       a9 04		      lda	#4
      4  f11c		       95 15		      sta	AUDC0,x
      5  f11e		       a9 03		      lda	#3
      6  f120		       95 19		      sta	AUDV0,x
      7  f122
      8  f122		       a5 94		      lda	pitch
      9  f124		       95 17		      sta	AUDF0,x
     10  f126
     11  f126		       a9 14		      lda	#20
     12  f128		       95 95		      sta	snd_on,x
    251  f12a		       a2 01		      ldx	#1
    252  f12c		       86 98		      stx	invertColors
    253  f12e				   pos_nofire
    254  f12e		       84 8a		      sty	speed
    255  f130
    256  f130							; ------------------
    257  f130							; lda #%00
    258  f130							; sta triggerSound
    259  f130
    260  f130							; read direction input
    261  f130		       a6 91		      ldx	p0_x	; p0_x es la posición del jugador 0 en x
    262  f132		       a9 80		      lda	#%10000000	; P0 Right switch
    263  f134		       2c 80 02 	      bit	SWCHA
    264  f137		       d0 1d		      bne	pos_noright	; z es el estado del boton: branch if no se movió.
    265  f139		       e0 ff		      cpx	#$FF	; max right position
    266  f13b		       b0 19		      bcs	pos_noright
    267  f13d		       e8		      inx
    268  f13e							; stx var1
    269  f13e		       86 91		      stx	p0_x
    270  f140
    271  f140		       a5 83		      lda	temp
    272  f142		       85 94		      sta	pitch
      0  f144					      _SND_PLAY	#6, pitch
      1  f144
      2  f144		       a2 00		      ldx	#0
      3  f146		       a9 06		      lda	#6
      4  f148		       95 15		      sta	AUDC0,x
      5  f14a		       a9 03		      lda	#3
      6  f14c		       95 19		      sta	AUDV0,x
      7  f14e
      8  f14e		       a5 94		      lda	pitch
      9  f150		       95 17		      sta	AUDF0,x
     10  f152
     11  f152		       a9 14		      lda	#20
     12  f154		       95 95		      sta	snd_on,x
    274  f156
    275  f156				   pos_noright
    276  f156		       a9 40		      lda	#%01000000	; check left movement
    277  f158		       2c 80 02 	      bit	SWCHA
    278  f15b		       d0 1d		      bne	pos_noleft
    279  f15d		       e0 00		      cpx	#0
    280  f15f		       90 19		      bcc	pos_noleft
    281  f161		       ca		      dex
    282  f162							; stx var1
    283  f162		       86 91		      stx	p0_x
    284  f164
    285  f164		       a5 83		      lda	temp
    286  f166		       85 94		      sta	pitch
      0  f168					      _SND_PLAY	#3, pitch
      1  f168
      2  f168		       a2 00		      ldx	#0
      3  f16a		       a9 03		      lda	#3
      4  f16c		       95 15		      sta	AUDC0,x
      5  f16e		       a9 03		      lda	#3
      6  f170		       95 19		      sta	AUDV0,x
      7  f172
      8  f172		       a5 94		      lda	pitch
      9  f174		       95 17		      sta	AUDF0,x
     10  f176
     11  f176		       a9 14		      lda	#20
     12  f178		       95 95		      sta	snd_on,x
    288  f17a
    289  f17a				   pos_noleft
    290  f17a							; ldx var1
    291  f17a							; stx p0_x
    292  f17a
    293  f17a		       a6 92		      ldx	p0_y
    294  f17c		       a9 20		      lda	#%00100000
    295  f17e		       2c 80 02 	      bit	SWCHA
    296  f181		       d0 1d		      bne	pos_nodown
    297  f183		       e0 00		      cpx	#$00
    298  f185		       90 19		      bcc	pos_nodown
    299  f187		       ca		      dex
    300  f188		       86 92		      stx	p0_y
    301  f18a
    302  f18a
    303  f18a		       a5 80		      lda	c16_1
    304  f18c		       85 94		      sta	pitch
      0  f18e					      _SND_PLAY	#1, pitch
      1  f18e
      2  f18e		       a2 00		      ldx	#0
      3  f190		       a9 01		      lda	#1
      4  f192		       95 15		      sta	AUDC0,x
      5  f194		       a9 03		      lda	#3
      6  f196		       95 19		      sta	AUDV0,x
      7  f198
      8  f198		       a5 94		      lda	pitch
      9  f19a		       95 17		      sta	AUDF0,x
     10  f19c
     11  f19c		       a9 14		      lda	#20
     12  f19e		       95 95		      sta	snd_on,x
    306  f1a0
    307  f1a0				   pos_nodown
    308  f1a0		       a9 10		      lda	#%00010000
    309  f1a2		       2c 80 02 	      bit	SWCHA
    310  f1a5		       d0 1d		      bne	pos_noup
    311  f1a7		       e0 ff		      cpx	#255
    312  f1a9		       b0 19		      bcs	pos_noup
    313  f1ab		       e8		      inx
    314  f1ac		       86 92		      stx	p0_y
    315  f1ae
    316  f1ae		       a5 80		      lda	c16_1
    317  f1b0		       85 94		      sta	pitch
      0  f1b2					      _SND_PLAY	#5, pitch
      1  f1b2
      2  f1b2		       a2 00		      ldx	#0
      3  f1b4		       a9 05		      lda	#5
      4  f1b6		       95 15		      sta	AUDC0,x
      5  f1b8		       a9 03		      lda	#3
      6  f1ba		       95 19		      sta	AUDV0,x
      7  f1bc
      8  f1bc		       a5 94		      lda	pitch
      9  f1be		       95 17		      sta	AUDF0,x
     10  f1c0
     11  f1c0		       a9 14		      lda	#20
     12  f1c2		       95 95		      sta	snd_on,x
    319  f1c4				   pos_noup
    320  f1c4							; stx p0_y
    321  f1c4
    322  f1c4
    323  f1c4
    324  f1c4							; -------- done ------------------------------------
    325  f1c4		       e6 87		      inc	fcount
    326  f1c6		       4c 20 f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    327  f1c9
    328  f1c9							; -------- done ------------------------------------
    329  f1c9
    330  f1c9
    331  f1c9
    332  f1c9							; Game Select
    333  f1c9				   check_switch_select
    334  f1c9				   switch_select_chkbounced
    335  f1c9		       a5 8f		      lda	selDebounceOn	; (2)
    336  f1cb		       d0 18		      bne	switch_select_decrease	; if debounce already on then branch out
    337  f1cd
    338  f1cd		       a9 02		      lda	#%00000010
    339  f1cf		       2c 82 02 	      bit	SWCHB
    340  f1d2		       d0 19		      bne	switch_select_end
    341  f1d4
    342  f1d4		       a9 01		      lda	#1
    343  f1d6		       85 8f		      sta	selDebounceOn
    344  f1d8		       a9 28		      lda	#40
    345  f1da		       85 8e		      sta	selDebounceTm
    346  f1dc
    347  f1dc		       06 90		      asl	selectMode
    348  f1de		       90 05		      bcc	switch_select_solid
    349  f1e0		       e6 90		      inc	selectMode
    350  f1e2
    351  f1e2				   switch_select_stripped
    352  f1e2
    353  f1e2		       4c ed f1 	      jmp	switch_select_end
    354  f1e5
    355  f1e5				   switch_select_solid
    356  f1e5
    357  f1e5
    358  f1e5				   switch_select_decrease
    359  f1e5		       c6 8e		      dec	selDebounceTm
    360  f1e7		       d0 04		      bne	switch_select_end
    361  f1e9		       a9 00		      lda	#0
    362  f1eb		       85 8f		      sta	selDebounceOn
    363  f1ed				   switch_select_end
    364  f1ed		       60		      rts
    365  f1ee
    366  f1ee
    367  f1ee							; cues a sound to play. sets audio registers based on table lookup sndbank.
    368  f1ee							; parameters: x = channel (0|1), y = sound to play
    369  f1ee				   snd_play
    370  f1ee							; lda sndbank_type,y
    371  f1ee		       a9 0c		      lda	#$0C
    372  f1f0		       95 15		      sta	AUDC0,x	; audio control
    373  f1f2		       a9 04		      lda	#4
    374  f1f4		       95 19		      sta	AUDV0,x	; audio volume (0 a 15)
    375  f1f6
    376  f1f6		       a5 80		      lda	c16_1
    377  f1f8		       6a		      ror
    378  f1f9		       6a		      ror
    379  f1fa		       6a		      ror
    380  f1fb		       95 17		      sta	AUDF0,x	; audio frequence (0 a 31 - divisiones del clock)
    381  f1fd
    382  f1fd		       a9 0c		      lda	#12
    383  f1ff		       95 95		      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    384  f201		       60		      rts
    385  f202
    386  f202							; process sound channels to turn off volume when sound length counter runs out
    387  f202				   snd_process
    388  f202		       a2 01		      ldx	#1	; channel to process, start with channel 1
    389  f204				   snd_ch
    390  f204		       b5 95		      lda	snd_on,x	; get sound length counter for this channel
    391  f206		       f0 08		      beq	snd_done	; are we playing a sound? a>1
    392  f208		       d6 95		      dec	snd_on,x	; yes, decrese the sound length counter for this channel
    393  f20a		       d0 04		      bne	snd_cont	; did we reach the end of the sound length?
    394  f20c		       a9 00		      lda	#0	; yes
    395  f20e		       95 19		      sta	AUDV0,x	; turn off the volume for this channel
    396  f210				   snd_done
    397  f210
    398  f210				   snd_cont
    399  f210		       ca		      dex		; do it again for channel 0
    400  f211		       f0 f1		      beq	snd_ch
    401  f213		       60		      rts
    402  f214
    403  f214
    404  f214
    405  f214							; -------------------------------------------------------------------
    406  f214							;	 CODE
    407  f214							;	 FOR MY
    408  f214							;  TIA  MUSIC
    409  f214							;  CODE DRIVER NAME	DESCRIPTION
    410  f214							;   1	 110	Saw	sounds similar to a saw waveform
    411  f214							;   3	 111	Engine	many 2600 games use this for an engine sound
    412  f214							;   4	 000	Square	a high pitched square waveform
    413  f214							;   6	 001	Bass	fat bass sound
    414  f214							;   7	 010	Pitfall log sound in pitfall, low and buzzy
    415  f214							;   8	 011	Noise	white noise
    416  f214							;  12	 101	Lead	lower pitch square wave sound
    417  f214							;  15	 100	Buzz	atonal buzz, good for percussion
    418  f214							; -------------------------------------------------------------------
    419  f214							; define sounds, bounce, reset, backward, forward
    420  f214				   sndbank_type
    421  f214		       06 07 00 01*	      .byte.b	$06, $07, $00, $01, $02, $03, $05, $04, $0C, $02, $06, $06
    422  f220				   sndbank_vol
    423  f220		       02 06 04 04*	      .byte.b	$02, $06, $04, $04, $02, $06, $04, $04, $02, $06, $04, $04
    424  f22c				   sndbank_pitch
    425  f22c		       1a 0e 1f 09*	      .byte.b	$1A, $0E, $1F, $09, $12, $07, $1C, $0B, $14, $03, $19, $0D
    426  f238				   sndbank_len
    427  f238		       01 08 03 03*	      .byte.b	$01, $08, $03, $03, $0C, $02, $06, $06, $0C, $02, $06, $06
    428  f244
    429  f244
    430  f244				   colors2
    431  f244		       30 32 34 36*	      .byte.b	$30, $32, $34, $36, $38, $3a, $3c, $3e
    432  f24c		       5a 6a 7a 8a*	      .byte.b	$5a, $6a, $7a, $8a, $9a, $aa, $5c, $6c,
    433  f255		       7c 8c 9c ac*	      .byte.b	$7c, $8c, $9c, $ac, $5d, $6d, $7d, $8d
    434  f25d				   colors
    435  f25d		       30 32 34 36*	      .byte.b	$30, $32, $34, $36, $38, $3a, $3c, $3e
    436  f265
    437  f265
    438  f265
    439  f265				   reverseBits
    440  f265		       aa		      tax
    441  f266		       bd 6a f2 	      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    442  f269		       60		      rts
    443  f26a
    444  f26a				   reversedOrderBits
    445  f26a		       00 00 80 00*	      .word.w	$00, $80, $40, $c0, $20, $a0, $60, $e0
    446  f27a		       10 00 90 00*	      .word.w	$10, $90, $50, $d0, $30, $b0, $70, $f0
    447  f28a		       08 00 88 00*	      .word.w	$08, $88, $48, $c8, $28, $a8, $68, $e8
    448  f29a		       18 00 98 00*	      .word.w	$18, $98, $58, $d8, $38, $b8, $78, $f8
    449  f2aa		       04 00 84 00*	      .word.w	$04, $84, $44, $c4, $24, $a4, $64, $e4
    450  f2ba		       14 00 94 00*	      .word.w	$14, $94, $54, $d4, $34, $b4, $74, $f4
    451  f2ca		       0c 00 8c 00*	      .word.w	$0c, $8c, $4c, $cc, $2c, $ac, $6c, $ec
    452  f2da		       1c 00 9c 00*	      .word.w	$1c, $9c, $5c, $dc, $3c, $bc, $7c, $fc
    453  f2ea		       02 00 82 00*	      .word.w	$02, $82, $42, $c2, $22, $a2, $62, $e2
    454  f2fa		       12 00 92 00*	      .word.w	$12, $92, $52, $d2, $32, $b2, $72, $f2
    455  f30a		       0a 00 8a 00*	      .word.w	$0a, $8a, $4a, $ca, $2a, $aa, $6a, $ea
    456  f31a		       1a 00 9a 00*	      .word.w	$1a, $9a, $5a, $da, $3a, $ba, $7a, $fa
    457  f32a		       06 00 86 00*	      .word.w	$06, $86, $46, $c6, $26, $a6, $66, $e6
    458  f33a		       16 00 96 00*	      .word.w	$16, $96, $56, $d6, $36, $b6, $76, $f6
    459  f34a		       0e 00 8e 00*	      .word.w	$0e, $8e, $4e, $ce, $2e, $ae, $6e, $ee
    460  f35a		       1e 00 9e 00*	      .word.w	$1e, $9e, $5e, $de, $3e, $be, $7e, $fe
    461  f36a		       01 00 81 00*	      .word.w	$01, $81, $41, $c1, $21, $a1, $61, $e1
    462  f37a		       11 00 91 00*	      .word.w	$11, $91, $51, $d1, $31, $b1, $71, $f1
    463  f38a		       09 00 89 00*	      .word.w	$09, $89, $49, $c9, $29, $a9, $69, $e9
    464  f39a		       19 00 99 00*	      .word.w	$19, $99, $59, $d9, $39, $b9, $79, $f9
    465  f3aa		       05 00 85 00*	      .word.w	$05, $85, $45, $c5, $25, $a5, $65, $e5
    466  f3ba		       15 00 95 00*	      .word.w	$15, $95, $55, $d5, $35, $b5, $75, $f5
    467  f3ca		       0d 00 8d 00*	      .word.w	$0d, $8d, $4d, $cd, $2d, $ad, $6d, $ed
    468  f3da		       1d 00 9d 00*	      .word.w	$1d, $9d, $5d, $dd, $3d, $bd, $7d, $fd
    469  f3ea		       03 00 83 00*	      .word.w	$03, $83, $43, $c3, $23, $a3, $63, $e3
    470  f3fa		       13 00 93 00*	      .word.w	$13, $93, $53, $d3, $33, $b3, $73, $f3
    471  f40a		       0b 00 8b 00*	      .word.w	$0b, $8b, $4b, $cb, $2b, $ab, $6b, $eb
    472  f41a		       1b 00 9b 00*	      .word.w	$1b, $9b, $5b, $db, $3b, $bb, $7b, $fb
    473  f42a		       07 00 87 00*	      .word.w	$07, $87, $47, $c7, $27, $a7, $67, $e7
    474  f43a		       17 00 97 00*	      .word.w	$17, $97, $57, $d7, $37, $b7, $77, $f7
    475  f44a		       0f 00 8f 00*	      .word.w	$0f, $8f, $4f, $cf, $2f, $af, $6f, $ef
    476  f45a		       1f 00 9f 00*	      .word.w	$1f, $9f, $5f, $df, $3f, $bf, $7f, $ff
    477  f46a
    478  f46a
    479  fffa					      org	$FFFA
    480  fffa
    481  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    482  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    483  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    484  10000
    485  10000
    486  10000
    487  10000
