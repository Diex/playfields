------- FILE kernel_06.2.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_06.2.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE kernel_06.2.asm
------- FILE macros2.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macros2.h"
      1  0000 ????				      MAC	_clr16
      2  0000 ????				      LDA	#0
      3  0000 ????				      STA	{1}+0
      4  0000 ????				      STA	{1}+1
      5  0000 ????				      ENDM
      6  0000 ????
      7  0000 ????
      8  0000 ????						;------------------------------------------------
      9  0000 ????						; Arithmetic Operations
     10  0000 ????						;------------------------------------------------
     11  0000 ????
     12  0000 ????						; Increment the 16 bit value at location MEM
     13  0000 ????						; by one.
     14  0000 ????						;
     15  0000 ????						; On exit: A, X & Y are unchanged.
     16  0000 ????
     17  0000 ????				      MAC	_inc16
     18  0000 ????				      INC	{1}+0
     19  0000 ????				      BNE	_DONE
     20  0000 ????				      INC	{1}+1
     21  0000 ????			   _DONE      EQU	*
     22  0000 ????				      ENDM		;MACRO MEM
     23  0000 ????
     24  0000 ????						; Add two 16 bit numbers together and store the
     25  0000 ????						; result in another memory location. RES may be
     26  0000 ????						; the same as either VLA or VLB.
     27  0000 ????						;
     28  0000 ????						; On exit: A = ??, X & Y are unchanged.
     29  0000 ????
     30  0000 ????				      MAC	_add16
     31  0000 ????				      IF	{1} != {2}
     32  0000 ????				      CLC
     33  0000 ????				      LDA	{1}+0
     34  0000 ????				      ADC	{2}+0
     35  0000 ????				      STA	{3}+0
     36  0000 ????				      LDA	{1}+1
     37  0000 ????				      ADC	{2}+1
     38  0000 ????				      STA	{3}+1
     39  0000 ????				      ELSE
     40  0000 ????				      _ASL16	{1},{3}
     41  0000 ????				      ENDIF
     42  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     43  0000 ????
     44  0000 ????
     45  0000 ????
     46  0000 ????
     47  0000 ????						; Calculate the 16 bit product of two 16 bit
     48  0000 ????						; unsigned numbers. Any overflow during the
     49  0000 ????						; calculation is lost. The number at location
     50  0000 ????						; VLA is destroyed.
     51  0000 ????						;
     52  0000 ????						; On exit: A = ??, X = $FF, Y is unchanged.
     53  0000 ????
     54  0000 ????				      MAC	_mul16
     55  0000 ????				      _CLR16	{3}
     56  0000 ????				      LDX	#16
     57  0000 ????			   ._LOOP
     58  0000 ????				      _ASL16	{3},{3}
     59  0000 ????				      _ASL16	{1},{1}
     60  0000 ????				      BCC	._NEXT
     61  0000 ????				      _ADD16	{2},{3},{3}
     62  0000 ????			   ._NEXT
     63  0000 ????				      DEX
     64  0000 ????				      BPL	._LOOP
     65  0000 ????						; Count cycles for macro calls
     66  0000 ????						; _CLR16: 6 cycles
     67  0000 ????						; _ASL16: 6 cycles
     68  0000 ????						; _ASL16: 6 cycles
     69  0000 ????						; _ADD16: 12 cycles
     70  0000 ????						; Total cycles: 30 cycles
     71  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     72  0000 ????
     73  0000 ????
     74  0000 ????						;------------------------------------------------
     75  0000 ????						; Shift Operations
     76  0000 ????						;------------------------------------------------
     77  0000 ????
     78  0000 ????						; Perform an arithmetic shift left on the 16 bit
     79  0000 ????						; number at location VLA and store the result at
     80  0000 ????						; location RES. If VLA and RES are the same then
     81  0000 ????						; the operation is applied directly to the memory
     82  0000 ????						; otherwise it is done in the accumulator.
     83  0000 ????						;
     84  0000 ????						; On exit: A = ??, X & Y are unchanged.
     85  0000 ????
     86  0000 ????				      MAC	_asl16
     87  0000 ????				      IF	{1} != {2}
     88  0000 ????				      LDA	{1}+0
     89  0000 ????				      ASL
     90  0000 ????				      STA	{2}+0
     91  0000 ????				      LDA	{1}+1
     92  0000 ????				      ROL
     93  0000 ????				      STA	{2}+1
     94  0000 ????				      ELSE
     95  0000 ????				      ASL	{1}+0
     96  0000 ????				      ROL	{1}+1
     97  0000 ????				      ENDIF
     98  0000 ????				      ENDM		;MACRO VLA,RES
     99  0000 ????
    100  0000 ????						; Perform a right rotation on the 16 bit number
    101  0000 ????						; at location VLA and store the result at
    102  0000 ????						; location RES. If VLA and RES are the same then
    103  0000 ????						; the operation is applied directly to the memory
    104  0000 ????						; otherwise it is done in the accumulator.
    105  0000 ????						;
    106  0000 ????						; On exit: A = ??, X & Y are unchanged.
    107  0000 ????
    108  0000 ????				      MAC	_ror16
    109  0000 ????				      IF	{1} != {2}
    110  0000 ????				      LDA	{1}+1
    111  0000 ????				      ROR
    112  0000 ????				      STA	{2}+1
    113  0000 ????				      LDA	{1}+0
    114  0000 ????				      ROR
    115  0000 ????				      STA	{2}+0
    116  0000 ????				      ELSE
    117  0000 ????				      ROR	{1}+1
    118  0000 ????				      ROR	{1}+0
    119  0000 ????				      ENDIF
    120  0000 ????				      ENDM
    121  0000 ????
    122  0000 ????						; Perform a left rotation on the 16 bit number at
    123  0000 ????						; location VLA and store the result at location
    124  0000 ????						; RES. If VLA and RES are the same then the
    125  0000 ????						; operation is applied directly to the memory,
    126  0000 ????						; otherwise it is done in the accumulator.
    127  0000 ????						;
    128  0000 ????						; On exit: A = ??, X & Y are unchanged.
    129  0000 ????
    130  0000 ????				      MAC	_rol16
    131  0000 ????				      IF	{1} != {2}
    132  0000 ????				      LDA	{1}+0
    133  0000 ????				      ROL
    134  0000 ????				      STA	{2}+0
    135  0000 ????				      LDA	{1}+1
    136  0000 ????				      ROL
    137  0000 ????				      STA	{2}+1
    138  0000 ????				      ELSE
    139  0000 ????				      ROL	{1}+0
    140  0000 ????				      ROL	{1}+1
    141  0000 ????				      ENDIF
    142  0000 ????				      ENDM		;MACRO VLA,RES
    143  0000 ????
    144  0000 ????						; Calculate the logical OR of the two 16 bit
    145  0000 ????						; values at locations VLA and VLB. The result is
    146  0000 ????						; stored in location RES. If VLA and VLB are the
    147  0000 ????						; same the macro expands to a _XFR16.
    148  0000 ????						;
    149  0000 ????						; On exit: A = ??, X & Y are unchanged.
    150  0000 ????
    151  0000 ????				      MAC	_ora16
    152  0000 ????				      IF	{1} != {2}
    153  0000 ????				      LDA	{1}+0
    154  0000 ????				      ORA	{2}+0
    155  0000 ????				      STA	{3}+0
    156  0000 ????				      LDA	{1}+1
    157  0000 ????				      ORA	{2}+1
    158  0000 ????				      STA	{3}+1
    159  0000 ????				      ELSE
    160  0000 ????				      _XFR16	{1},{3}
    161  0000 ????				      ENDIF
    162  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    163  0000 ????
    164  0000 ????
    165  0000 ????
    166  0000 ????						; Transfer 2 bytes of memory from one location to
    167  0000 ????						; another using the accumulator. The order in
    168  0000 ????						; which the bytes are moved depends on the
    169  0000 ????						; relative positions of SRC and DST. If SRC and
    170  0000 ????						; DST are the same then no code is generated.
    171  0000 ????						;
    172  0000 ????						; On exit: A = ??, X & Y are unchanged.
    173  0000 ????
    174  0000 ????				      MAC	_xfr16
    175  0000 ????				      IF	{1} != {2}
    176  0000 ????				      IF	{1} > {2}
    177  0000 ????				      LDA	{1}+0
    178  0000 ????				      STA	{2}+0
    179  0000 ????				      LDA	{1}+1
    180  0000 ????				      STA	{2}+1
    181  0000 ????				      ELSE
    182  0000 ????				      LDA	{1}+1
    183  0000 ????				      STA	{2}+1
    184  0000 ????				      LDA	{1}+0
    185  0000 ????				      STA	{2}+0
    186  0000 ????				      ENDIF
    187  0000 ????				      ENDIF
    188  0000 ????				      ENDM		;MACRO SRC,DST
    189  0000 ????
    190  0000 ????
    191  0000 ????						; Calculate the exclusive OR of a 16 value at
    192  0000 ????						; location VLA with a constant value and
    193  0000 ????						; store the result at location RES.
    194  0000 ????						;
    195  0000 ????						; On exit: A = ??, X & Y are unchanged.
    196  0000 ????
    197  0000 ????				      MAC	_eor16i
    198  0000 ????				      LDA	{1}+0
    199  0000 ????				      EOR	<{2}
    200  0000 ????				      STA	{3}+0
    201  0000 ????				      LDA	{1}+1
    202  0000 ????				      EOR	>{2}
    203  0000 ????				      STA	{3}+1
    204  0000 ????				      ENDM		;MACRO VLA,NUM,RES
    205  0000 ????
    206  0000 ????				      MAC	_revbits
    207  0000 ????				      ldx	{1}+0
    208  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    209  0000 ????				      sta	{1}+0
    210  0000 ????				      ldx	{1}+1
    211  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    212  0000 ????				      sta	{1}+1
    213  0000 ????				      ENDM
    214  0000 ????
    215  0000 ????
    216  0000 ????						; Calculate the exclusive OR of the two 16 bit
    217  0000 ????						; values at locations VLA and VLB. The result is
    218  0000 ????						; stored in location RES. If VLA and VLB are the
    219  0000 ????						; same the macro expands to a _CLR16.
    220  0000 ????						;
    221  0000 ????						; On exit: A = ??, X & Y are unchanged.
    222  0000 ????
    223  0000 ????				      MAC	_eor16
    224  0000 ????				      IF	{1} != {2}
    225  0000 ????				      LDA	{1}+0
    226  0000 ????				      EOR	{2}+0
    227  0000 ????				      STA	{3}+0
    228  0000 ????				      LDA	{1}+1
    229  0000 ????				      EOR	{2}+1
    230  0000 ????				      STA	{3}+1
    231  0000 ????				      ELSE
    232  0000 ????				      _CLR16	{3}
    233  0000 ????				      ENDIF
    234  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    235  0000 ????
    236  0000 ????
    237  0000 ????
    238  0000 ????
    239  0000 ????						; Calculate the logical AND of the two 16 bit
    240  0000 ????						; values at locations VLA and VLB. The result is
    241  0000 ????						; stored in location RES. If VLA and VLB are the
    242  0000 ????						; same the macro expands to a _XFR16.
    243  0000 ????						;
    244  0000 ????						; On exit: A = ??, X & Y are unchanged.
    245  0000 ????
    246  0000 ????				      MAC	_and16
    247  0000 ????				      IF	{1} != {2}
    248  0000 ????				      LDA	{1}+0
    249  0000 ????				      AND	{2}+0
    250  0000 ????				      STA	{3}+0
    251  0000 ????				      LDA	{1}+1
    252  0000 ????				      AND	{2}+1
    253  0000 ????				      STA	{3}+1
    254  0000 ????				      ELSE
    255  0000 ????				      _XFR16	{1},{3}
    256  0000 ????				      ENDIF
    257  0000 ????				      ENDM		;MACRO VLA,VLB,RES
------- FILE kernel_06.2.asm
      5  0000 ????						;
      6  0000 ????						; Email - 8blit0@gmail.com
      7  0000 ????
      8  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
      9  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     10  0000 ????
     11 U0090 ????				      seg.u	temp	; uninitialized segment
     12 U0080					      org	$80	; origin set at base of ram
     13 U0080							; up to 9F
     14 U0080		       00 00	   c16_1      ds	2
     15 U0082		       00 00	   revbits    ds	2
     16 U0084		       00	   speed      ds	1	; 1 byte - speed
     17 U0085		       00 00	   scanline   ds	2	; 1 byte - current scanline
     18 U0087		       00	   fcount     ds	1	; 1 byte - frame counter
     19 U0088		       00	   mod_1      ds	1	; 1 byte - modulo 1
     20 U0089
     21 U0089		       00	   selDebounceTm ds	1	; 1 byte - select debounce timer
     22 U008a		       00	   selDebounceOn ds	1	; 1 byte - select debounce on
     23 U008b		       00	   selectMode ds	1	; 1 byte - select mode
     24 U008c
     25 U008c		       00	   p0_x       ds	1	; 1 byte - player 0 x position
     26 U008d		       00	   p0_y       ds	1	; 1 byte - player 0 y position
     27 U008e
     28 U008e		       00 00	   snd_on     ds	2	; 1 byte per audio channel - greater than 0 if sound is playing
     29 U0090
     30  10000 ????				       seg	main	; start of main segment
     31  f000					      org	$F000
     32  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     34  f00b
     35  f00b		       a9 01		      lda	#1
     36  f00d		       85 0a		      sta	CTRLPF
     37  f00f
     38  f00f		       a9 01		      lda	#1
     39  f011		       85 84		      sta	speed
     40  f013
     41  f013		       a9 80		      lda	#$80
     42  f015		       85 8c		      sta	p0_x
     43  f017		       85 8d		      sta	p0_y
     44  f019
      0  f019				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f019		       a9 0e		      lda	#%1110
      2  f01b		       85 02	   .VSLP1     sta	WSYNC
      3  f01d		       85 00		      sta	VSYNC
      4  f01f		       4a		      lsr
      5  f020		       d0 f9		      bne	.VSLP1
     46  f022							; -------- set timer -------------------------------
     47  f022							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     48  f022							; 2812 machine cycles / 64 clocks = 43.9375
     49  f022		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     50  f024		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     51  f027							; -------- do stuff  -------------------------------
     52  f027
     53  f027		       c6 88		      dec	mod_1
     54  f029		       d0 0a		      bne	cont
     55  f02b		       a5 84		      lda	speed
     56  f02d		       85 88		      sta	mod_1
      0  f02f					      _INC16	c16_1
      1  f02f		       e6 80		      INC	c16_1+0
      2  f031		       d0 02		      BNE	_DONE
      3  f033		       e6 81		      INC	c16_1+1
      4  f033		       f0 35	   _DONE      EQU	*
     58  f035
     59  f035
     60  f035
     61  f035							; jsr snd_play 	   ; call the subroutine to load the audio registers
     62  f035
     63  f035
     64  f035				   cont
     65  f035		       20 22 f1 	      jsr	snd_process
     66  f038
     67  f038		       a6 8c		      ldx	p0_x
     68  f03a		       86 08		      stx	COLUPF
     69  f03c		       a6 8d		      ldx	p0_y
     70  f03e		       86 09		      stx	COLUBK
     71  f040
     72  f040
     73  f040
     74  f040							; -------- wait ------------------------------------
     75  f040		       ad 84 02 	      lda	INTIM	; check the timer
     76  f043		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     77  f045							; -------- done ------------------------------------
     78  f045
     79  f045		       a9 00		      lda	#0
     80  f047		       85 01		      sta	VBLANK
     81  f049
     82  f049		       a9 c0		      lda	#PF_H
     83  f04b		       85 85		      sta	scanline
     84  f04d
     85  f04d
     86  f04d							; -------- ; primera linea visible  ------------------------------------
     87  f04d
     88  f04d		       85 02		      sta	WSYNC
     89  f04f
     90  f04f
     91  f04f
     92  f04f
     93  f04f
     94  f04f		       85 02	   kernel     sta	WSYNC
     95  f051		       c6 85		      dec	scanline
     96  f053
     97  f053		       85 02		      sta	WSYNC
     98  f055							; PF0
     99  f055
    100  f055		       a5 81		      lda	c16_1+1
    101  f057							; jsr reverseBits
    102  f057		       2a		      rol
    103  f058		       2a		      rol
    104  f059		       2a		      rol
    105  f05a		       45 80		      eor	c16_1
    106  f05c		       45 85		      eor	scanline
    107  f05e		       85 0f		      sta	PF2
    108  f060
    109  f060
    110  f060							; PF1
    111  f060		       a5 80		      lda	c16_1+0
    112  f062		       2a		      rol
    113  f063		       49 0f		      eor	#15
    114  f065		       45 85		      eor	scanline
    115  f067		       85 0e		      sta	PF1
    116  f069
    117  f069							; PF2
    118  f069							; lda c24_1
    119  f069							; ror
    120  f069							; eor #7
    121  f069							; jsr reverseBits
    122  f069							; eor scanline
    123  f069							; sta PF0
    124  f069
    125  f069							; ldy #0
    126  f069							; lda plfys,y
    127  f069							; sta PF0
    128  f069
    129  f069							; iny
    130  f069							; lda plfys,y
    131  f069							; sta PF1
    132  f069
    133  f069							; iny
    134  f069							; lda plfys,y
    135  f069							; sta PF2
    136  f069
    137  f069
    138  f069		       c6 85		      dec	scanline	; (2)
    139  f06b		       d0 e2		      bne	kernel	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    140  f06d
    141  f06d							; --------------- DoneWithFrame	---------------
    142  f06d
    143  f06d							; ---- Overscan (30 scanlines)
    144  f06d							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    145  f06d							; 2280 machine cycles / 64 clocks = 35.625
    146  f06d		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    147  f06f		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    148  f072
    149  f072
    150  f072
    151  f072
    152  f072		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    153  f074		       85 01		      sta	VBLANK	; turn off the beam
    154  f076
    155  f076							; -------- wait ------------------------------------
    156  f076		       ad 84 02 	      lda	INTIM	; check the timer
    157  f079		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    158  f07b							; -------- done ------------------------------------
    159  f07b
    160  f07b
    161  f07b							; -------- INPUT ------------------------------------
    162  f07b							; Reset
    163  f07b		       a9 01	   input      lda	#%00000001	; (2) read reset input
    164  f07d		       2c 82 02 	      bit	SWCHB
    165  f080		       d0 03		      bne	switch_noreset
    166  f082		       4c 00 f0 	      jmp	reset
    167  f085				   switch_noreset
    168  f085
    169  f085							; Game Select
    170  f085				   switch_select_chkbounced
    171  f085		       a5 8a		      lda	selDebounceOn	; (2)
    172  f087		       d0 18		      bne	switch_select_decrease	; if debounce already on then branch out
    173  f089
    174  f089		       a9 02		      lda	#%00000010
    175  f08b		       2c 82 02 	      bit	SWCHB
    176  f08e		       d0 19		      bne	switch_select_end
    177  f090
    178  f090		       a9 01		      lda	#1
    179  f092		       85 8a		      sta	selDebounceOn
    180  f094		       a9 28		      lda	#40
    181  f096		       85 89		      sta	selDebounceTm
    182  f098
    183  f098		       06 8b		      asl	selectMode
    184  f09a		       90 05		      bcc	switch_select_solid
    185  f09c		       e6 8b		      inc	selectMode
    186  f09e
    187  f09e				   switch_select_stripped
    188  f09e							; lda #%10101010
    189  f09e							; sta PF0
    190  f09e							; sta PF2
    191  f09e							; lda #%01010101
    192  f09e							; sta PF1
    193  f09e		       4c a9 f0 	      jmp	switch_select_end
    194  f0a1
    195  f0a1				   switch_select_solid
    196  f0a1							; lda #0
    197  f0a1							; sta PF0
    198  f0a1							; sta PF1
    199  f0a1							; sta PF2
    200  f0a1
    201  f0a1				   switch_select_decrease
    202  f0a1		       c6 89		      dec	selDebounceTm
    203  f0a3		       d0 04		      bne	switch_select_end
    204  f0a5		       a9 00		      lda	#0
    205  f0a7		       85 8a		      sta	selDebounceOn
    206  f0a9				   switch_select_end
    207  f0a9
    208  f0a9
    209  f0a9							; B/W input
    210  f0a9		       a2 00		      ldx	#0
    211  f0ab		       a9 08		      lda	#%00001000
    212  f0ad		       2c 82 02 	      bit	SWCHB
    213  f0b0		       d0 02		      bne	switch_color
    214  f0b2		       a2 01		      ldx	#1
    215  f0b4				   switch_color
    216  f0b4							;TODO switch color
    217  f0b4
    218  f0b4							; Player 0 Difficulty
    219  f0b4		       a2 00		      ldx	#0
    220  f0b6		       a9 40		      lda	#%01000000
    221  f0b8		       2c 82 02 	      bit	SWCHB
    222  f0bb		       d0 00		      bne	switch_P0Diff1
    223  f0bd				   switch_P0Diff2
    224  f0bd							; TODO Difficulty 2
    225  f0bd				   switch_P0Diff1
    226  f0bd							; TODO Difficulty 1
    227  f0bd
    228  f0bd							; Player 1 Difficulty
    229  f0bd		       a2 00		      ldx	#0
    230  f0bf		       a9 80		      lda	#%10000000
    231  f0c1		       2c 82 02 	      bit	SWCHB
    232  f0c4		       d0 00		      bne	switch_P1Diff1
    233  f0c6				   switch_P1Diff2		; Difficulty 2
    234  f0c6				   switch_P1Diff1		; Difficulty 1
    235  f0c6
    236  f0c6							; ------- joystick:
    237  f0c6
    238  f0c6							; Read button input
    239  f0c6		       a0 20		      ldy	#32	; P0 Fire switch
    240  f0c8		       24 0c		      bit	INPT4
    241  f0ca		       30 05		      bmi	pos_nofire
    242  f0cc		       a0 01		      ldy	#1
    243  f0ce		       20 0e f1 	      jsr	snd_play
    244  f0d1				   pos_nofire
    245  f0d1		       84 84		      sty	speed
    246  f0d3
    247  f0d3							; ------------------
    248  f0d3							; read direction input
    249  f0d3		       a6 8c		      ldx	p0_x	; p0_x es la posición del jugador 0 en x
    250  f0d5
    251  f0d5		       a9 80		      lda	#%10000000	; P0 Right switch
    252  f0d7		       2c 80 02 	      bit	SWCHA
    253  f0da		       d0 05		      bne	pos_noright	; z es el estado del boton: branch if no se movió.
    254  f0dc
    255  f0dc
    256  f0dc		       e0 ff		      cpx	#$FF	; max right position
    257  f0de		       b0 01		      bcs	pos_noright
    258  f0e0		       e8		      inx
    259  f0e1
    260  f0e1							; lda #%00001000    ; invertir el playfield
    261  f0e1							; sta REFP0
    262  f0e1				   pos_noright
    263  f0e1		       a9 40		      lda	#%01000000	; check left movement
    264  f0e3		       2c 80 02 	      bit	SWCHA
    265  f0e6		       d0 05		      bne	pos_noleft
    266  f0e8		       e0 01		      cpx	#1
    267  f0ea		       90 01		      bcc	pos_noleft
    268  f0ec		       ca		      dex
    269  f0ed							; lda #0
    270  f0ed							; sta REFP0
    271  f0ed				   pos_noleft
    272  f0ed		       86 8c		      stx	p0_x
    273  f0ef
    274  f0ef		       a6 8d		      ldx	p0_y
    275  f0f1		       a9 20		      lda	#%00100000
    276  f0f3		       2c 80 02 	      bit	SWCHA
    277  f0f6		       d0 05		      bne	pos_nodown
    278  f0f8		       e0 00		      cpx	#$00
    279  f0fa		       90 01		      bcc	pos_nodown
    280  f0fc		       ca		      dex
    281  f0fd				   pos_nodown
    282  f0fd		       a9 10		      lda	#%00010000
    283  f0ff		       2c 80 02 	      bit	SWCHA
    284  f102		       d0 05		      bne	pos_noup
    285  f104		       e0 ff		      cpx	#255
    286  f106		       b0 01		      bcs	pos_noup
    287  f108		       e8		      inx
    288  f109				   pos_noup
    289  f109		       86 8d		      stx	p0_y
    290  f10b
    291  f10b
    292  f10b							; -------- done ------------------------------------
    293  f10b
    294  f10b		       4c 19 f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    295  f10e
    296  f10e							; -------- done ------------------------------------
    297  f10e
    298  f10e
    299  f10e							; cues a sound to play. sets audio registers based on table lookup sndbank.
    300  f10e							; parameters: x = channel (0|1), y = sound to play
    301  f10e				   snd_play
    302  f10e							; lda sndbank_type,y
    303  f10e		       a9 0c		      lda	#$0C
    304  f110		       95 15		      sta	AUDC0,x	; audio control
    305  f112
    306  f112		       a9 04		      lda	#4
    307  f114		       95 19		      sta	AUDV0,x	; audio volume (0 a 15)
    308  f116
    309  f116		       a5 80		      lda	c16_1
    310  f118		       6a		      ror
    311  f119		       6a		      ror
    312  f11a		       6a		      ror
    313  f11b		       95 17		      sta	AUDF0,x	; audio frequence (0 a 31 - divisiones del clock)
    314  f11d
    315  f11d		       a9 0c		      lda	#12
    316  f11f		       95 8e		      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    317  f121		       60		      rts
    318  f122
    319  f122							; process sound channels to turn off volume when sound length counter runs out
    320  f122				   snd_process
    321  f122		       a2 01		      ldx	#1	; channel to process, start with channel 1
    322  f124				   snd_ch
    323  f124		       b5 8e		      lda	snd_on,x	; get sound length counter for this channel
    324  f126		       f0 08		      beq	snd_done	; are we playing a sound? a>1
    325  f128		       d6 8e		      dec	snd_on,x	; yes, decrese the sound length counter for this channel
    326  f12a		       d0 04		      bne	snd_cont	; did we reach the end of the sound length?
    327  f12c		       a9 00		      lda	#0	; yes
    328  f12e		       95 19		      sta	AUDV0,x	; turn off the volume for this channel
    329  f130				   snd_done
    330  f130
    331  f130				   snd_cont
    332  f130		       ca		      dex		; do it again for channel 0
    333  f131		       f0 f1		      beq	snd_ch
    334  f133		       60		      rts
    335  f134
    336  f134
    337  f134
    338  f134
    339  f134							; define sounds, bounce, reset, backward, forward
    340  f134				   sndbank_type
    341  f134		       0c 02 06 06*	      .byte.b	$0C, $02, $06, $06, $0C, $02, $06, $06, $0C, $02, $06, $06
    342  f140				   sndbank_vol
    343  f140		       02 06 04 04*	      .byte.b	$02, $06, $04, $04, $02, $06, $04, $04, $02, $06, $04, $04
    344  f14c				   sndbank_pitch
    345  f14c		       1a 0e 1f 09*	      .byte.b	$1A, $0E, $1F, $09, $12, $07, $1C, $0B, $14, $03, $19, $0D
    346  f158				   sndbank_len
    347  f158		       01 08 03 03*	      .byte.b	$01, $08, $03, $03, $0C, $02, $06, $06, $0C, $02, $06, $06
    348  f164
    349  f164
    350  f164				   colors
    351  f164		       36 48 76 b4*	      .byte.b	$36, $48, $76, $b4, $ea, $4c, $8a, $a4	; Player 0-7 colors
    352  f16c
    353  f16c
    354  f16c
    355  f16c				   reverseBits
    356  f16c		       aa		      tax
    357  f16d		       bd 71 f1 	      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    358  f170		       60		      rts
    359  f171
    360  f171				   reversedOrderBits
    361  f171		       00 00 80 00*	      .word.w	$00, $80, $40, $c0, $20, $a0, $60, $e0
    362  f181		       10 00 90 00*	      .word.w	$10, $90, $50, $d0, $30, $b0, $70, $f0
    363  f191		       08 00 88 00*	      .word.w	$08, $88, $48, $c8, $28, $a8, $68, $e8
    364  f1a1		       18 00 98 00*	      .word.w	$18, $98, $58, $d8, $38, $b8, $78, $f8
    365  f1b1		       04 00 84 00*	      .word.w	$04, $84, $44, $c4, $24, $a4, $64, $e4
    366  f1c1		       14 00 94 00*	      .word.w	$14, $94, $54, $d4, $34, $b4, $74, $f4
    367  f1d1		       0c 00 8c 00*	      .word.w	$0c, $8c, $4c, $cc, $2c, $ac, $6c, $ec
    368  f1e1		       1c 00 9c 00*	      .word.w	$1c, $9c, $5c, $dc, $3c, $bc, $7c, $fc
    369  f1f1		       02 00 82 00*	      .word.w	$02, $82, $42, $c2, $22, $a2, $62, $e2
    370  f201		       12 00 92 00*	      .word.w	$12, $92, $52, $d2, $32, $b2, $72, $f2
    371  f211		       0a 00 8a 00*	      .word.w	$0a, $8a, $4a, $ca, $2a, $aa, $6a, $ea
    372  f221		       1a 00 9a 00*	      .word.w	$1a, $9a, $5a, $da, $3a, $ba, $7a, $fa
    373  f231		       06 00 86 00*	      .word.w	$06, $86, $46, $c6, $26, $a6, $66, $e6
    374  f241		       16 00 96 00*	      .word.w	$16, $96, $56, $d6, $36, $b6, $76, $f6
    375  f251		       0e 00 8e 00*	      .word.w	$0e, $8e, $4e, $ce, $2e, $ae, $6e, $ee
    376  f261		       1e 00 9e 00*	      .word.w	$1e, $9e, $5e, $de, $3e, $be, $7e, $fe
    377  f271		       01 00 81 00*	      .word.w	$01, $81, $41, $c1, $21, $a1, $61, $e1
    378  f281		       11 00 91 00*	      .word.w	$11, $91, $51, $d1, $31, $b1, $71, $f1
    379  f291		       09 00 89 00*	      .word.w	$09, $89, $49, $c9, $29, $a9, $69, $e9
    380  f2a1		       19 00 99 00*	      .word.w	$19, $99, $59, $d9, $39, $b9, $79, $f9
    381  f2b1		       05 00 85 00*	      .word.w	$05, $85, $45, $c5, $25, $a5, $65, $e5
    382  f2c1		       15 00 95 00*	      .word.w	$15, $95, $55, $d5, $35, $b5, $75, $f5
    383  f2d1		       0d 00 8d 00*	      .word.w	$0d, $8d, $4d, $cd, $2d, $ad, $6d, $ed
    384  f2e1		       1d 00 9d 00*	      .word.w	$1d, $9d, $5d, $dd, $3d, $bd, $7d, $fd
    385  f2f1		       03 00 83 00*	      .word.w	$03, $83, $43, $c3, $23, $a3, $63, $e3
    386  f301		       13 00 93 00*	      .word.w	$13, $93, $53, $d3, $33, $b3, $73, $f3
    387  f311		       0b 00 8b 00*	      .word.w	$0b, $8b, $4b, $cb, $2b, $ab, $6b, $eb
    388  f321		       1b 00 9b 00*	      .word.w	$1b, $9b, $5b, $db, $3b, $bb, $7b, $fb
    389  f331		       07 00 87 00*	      .word.w	$07, $87, $47, $c7, $27, $a7, $67, $e7
    390  f341		       17 00 97 00*	      .word.w	$17, $97, $57, $d7, $37, $b7, $77, $f7
    391  f351		       0f 00 8f 00*	      .word.w	$0f, $8f, $4f, $cf, $2f, $af, $6f, $ef
    392  f361		       1f 00 9f 00*	      .word.w	$1f, $9f, $5f, $df, $3f, $bf, $7f, $ff
    393  f371
    394  f371
    395  fffa					      org	$FFFA
    396  fffa
    397  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    398  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    399  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    400  10000
    401  10000
    402  10000
    403  10000
