------- FILE kernel_06.5.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_06.5.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						;-------------------------------------------------------------------------------
    164  0000 ????						; shortcut
    165  0000 ????
    166  0000 ????				      MAC	_nextline
    167  0000 ????				      dec	scanline
    168  0000 ????				      sta	WSYNC
    169  0000 ????				      ENDM
    170  0000 ????
    171  0000 ????				      MAC	_get_color
    172  0000 ????
    173  0000 ????				      lda	{1}
    174  0000 ????				      adc	{2}
    175  0000 ????				      lsr
    176  0000 ????				      lsr
    177  0000 ????				      lsr
    178  0000 ????				      lsr
    179  0000 ????				      tax
    180  0000 ????				      lda	{3},x
    181  0000 ????				      ENDM
    182  0000 ????
    183  0000 ????						; ldx channel
    184  0000 ????						; {1}	   = type
    185  0000 ????						; {2}	   = pitch
    186  0000 ????				      MAC	_snd_play
    187  0000 ????						; lda sndbank_type,y
    188  0000 ????				      ldx	#0
    189  0000 ????				      lda	{1}
    190  0000 ????				      sta	AUDC0,x	; audio control
    191  0000 ????				      lda	#3
    192  0000 ????				      sta	AUDV0,x	; audio volume (0 a 15)
    193  0000 ????
    194  0000 ????				      lda	{2}
    195  0000 ????				      sta	AUDF0,x	; audio frequence (0 a 31 - divisiones del clock)
    196  0000 ????
    197  0000 ????				      lda	#20
    198  0000 ????				      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    199  0000 ????				      ENDM
    200  0000 ????
    201  0000 ????						; EOF
------- FILE kernel_06.5.asm
------- FILE macros2.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macros2.h"
      1  0000 ????				      MAC	_clr16
      2  0000 ????				      LDA	#0
      3  0000 ????				      STA	{1}+0
      4  0000 ????				      STA	{1}+1
      5  0000 ????				      ENDM
      6  0000 ????
      7  0000 ????
      8  0000 ????						;------------------------------------------------
      9  0000 ????						; Arithmetic Operations
     10  0000 ????						;------------------------------------------------
     11  0000 ????
     12  0000 ????						; Increment the 16 bit value at location MEM
     13  0000 ????						; by one.
     14  0000 ????						;
     15  0000 ????						; On exit: A, X & Y are unchanged.
     16  0000 ????
     17  0000 ????				      MAC	_inc16
     18  0000 ????				      INC	{1}+0
     19  0000 ????				      BNE	_DONE
     20  0000 ????				      INC	{1}+1
     21  0000 ????			   _DONE      EQU	*
     22  0000 ????				      ENDM		;MACRO MEM
     23  0000 ????
     24  0000 ????						; Add two 16 bit numbers together and store the
     25  0000 ????						; result in another memory location. RES may be
     26  0000 ????						; the same as either VLA or VLB.
     27  0000 ????						;
     28  0000 ????						; On exit: A = ??, X & Y are unchanged.
     29  0000 ????
     30  0000 ????				      MAC	_add16
     31  0000 ????				      IF	{1} != {2}
     32  0000 ????				      CLC
     33  0000 ????				      LDA	{1}+0
     34  0000 ????				      ADC	{2}+0
     35  0000 ????				      STA	{3}+0
     36  0000 ????				      LDA	{1}+1
     37  0000 ????				      ADC	{2}+1
     38  0000 ????				      STA	{3}+1
     39  0000 ????				      ELSE
     40  0000 ????				      _ASL16	{1},{3}
     41  0000 ????				      ENDIF
     42  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     43  0000 ????
     44  0000 ????
     45  0000 ????
     46  0000 ????
     47  0000 ????						; Calculate the 16 bit product of two 16 bit
     48  0000 ????						; unsigned numbers. Any overflow during the
     49  0000 ????						; calculation is lost. The number at location
     50  0000 ????						; VLA is destroyed.
     51  0000 ????						;
     52  0000 ????						; On exit: A = ??, X = $FF, Y is unchanged.
     53  0000 ????
     54  0000 ????				      MAC	_mul16
     55  0000 ????				      _CLR16	{3}
     56  0000 ????				      LDX	#16
     57  0000 ????			   ._LOOP
     58  0000 ????				      _ASL16	{3},{3}
     59  0000 ????				      _ASL16	{1},{1}
     60  0000 ????				      BCC	._NEXT
     61  0000 ????				      _ADD16	{2},{3},{3}
     62  0000 ????			   ._NEXT
     63  0000 ????				      DEX
     64  0000 ????				      BPL	._LOOP
     65  0000 ????						; Count cycles for macro calls
     66  0000 ????						; _CLR16: 6 cycles
     67  0000 ????						; _ASL16: 6 cycles
     68  0000 ????						; _ASL16: 6 cycles
     69  0000 ????						; _ADD16: 12 cycles
     70  0000 ????						; Total cycles: 30 cycles
     71  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     72  0000 ????
     73  0000 ????
     74  0000 ????						;------------------------------------------------
     75  0000 ????						; Shift Operations
     76  0000 ????						;------------------------------------------------
     77  0000 ????
     78  0000 ????						; Perform an arithmetic shift left on the 16 bit
     79  0000 ????						; number at location VLA and store the result at
     80  0000 ????						; location RES. If VLA and RES are the same then
     81  0000 ????						; the operation is applied directly to the memory
     82  0000 ????						; otherwise it is done in the accumulator.
     83  0000 ????						;
     84  0000 ????						; On exit: A = ??, X & Y are unchanged.
     85  0000 ????
     86  0000 ????				      MAC	_asl16
     87  0000 ????				      IF	{1} != {2}
     88  0000 ????				      LDA	{1}+0
     89  0000 ????				      ASL
     90  0000 ????				      STA	{2}+0
     91  0000 ????				      LDA	{1}+1
     92  0000 ????				      ROL
     93  0000 ????				      STA	{2}+1
     94  0000 ????				      ELSE
     95  0000 ????				      ASL	{1}+0
     96  0000 ????				      ROL	{1}+1
     97  0000 ????				      ENDIF
     98  0000 ????				      ENDM		;MACRO VLA,RES
     99  0000 ????
    100  0000 ????						; Perform a right rotation on the 16 bit number
    101  0000 ????						; at location VLA and store the result at
    102  0000 ????						; location RES. If VLA and RES are the same then
    103  0000 ????						; the operation is applied directly to the memory
    104  0000 ????						; otherwise it is done in the accumulator.
    105  0000 ????						;
    106  0000 ????						; On exit: A = ??, X & Y are unchanged.
    107  0000 ????
    108  0000 ????				      MAC	_ror16
    109  0000 ????				      IF	{1} != {2}
    110  0000 ????				      LDA	{1}+1
    111  0000 ????				      ROR
    112  0000 ????				      STA	{2}+1
    113  0000 ????				      LDA	{1}+0
    114  0000 ????				      ROR
    115  0000 ????				      STA	{2}+0
    116  0000 ????				      ELSE
    117  0000 ????				      ROR	{1}+1
    118  0000 ????				      ROR	{1}+0
    119  0000 ????				      ENDIF
    120  0000 ????				      ENDM
    121  0000 ????
    122  0000 ????						; Perform a left rotation on the 16 bit number at
    123  0000 ????						; location VLA and store the result at location
    124  0000 ????						; RES. If VLA and RES are the same then the
    125  0000 ????						; operation is applied directly to the memory,
    126  0000 ????						; otherwise it is done in the accumulator.
    127  0000 ????						;
    128  0000 ????						; On exit: A = ??, X & Y are unchanged.
    129  0000 ????
    130  0000 ????				      MAC	_rol16
    131  0000 ????				      IF	{1} != {2}
    132  0000 ????				      LDA	{1}+0
    133  0000 ????				      ROL
    134  0000 ????				      STA	{2}+0
    135  0000 ????				      LDA	{1}+1
    136  0000 ????				      ROL
    137  0000 ????				      STA	{2}+1
    138  0000 ????				      ELSE
    139  0000 ????				      ROL	{1}+0
    140  0000 ????				      ROL	{1}+1
    141  0000 ????				      ENDIF
    142  0000 ????				      ENDM		;MACRO VLA,RES
    143  0000 ????
    144  0000 ????						; Calculate the logical OR of the two 16 bit
    145  0000 ????						; values at locations VLA and VLB. The result is
    146  0000 ????						; stored in location RES. If VLA and VLB are the
    147  0000 ????						; same the macro expands to a _XFR16.
    148  0000 ????						;
    149  0000 ????						; On exit: A = ??, X & Y are unchanged.
    150  0000 ????
    151  0000 ????				      MAC	_ora16
    152  0000 ????				      IF	{1} != {2}
    153  0000 ????				      LDA	{1}+0
    154  0000 ????				      ORA	{2}+0
    155  0000 ????				      STA	{3}+0
    156  0000 ????				      LDA	{1}+1
    157  0000 ????				      ORA	{2}+1
    158  0000 ????				      STA	{3}+1
    159  0000 ????				      ELSE
    160  0000 ????				      _XFR16	{1},{3}
    161  0000 ????				      ENDIF
    162  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    163  0000 ????
    164  0000 ????
    165  0000 ????
    166  0000 ????				      MAC	_rev8
    167  0000 ????				      ldx	{1}+0
    168  0000 ????				      lda	{2},x	; Load the value to be reversed from memory
    169  0000 ????				      ENDM		;reverseBits:
    170  0000 ????
    171  0000 ????						; Transfer 2 bytes of memory from one location to
    172  0000 ????						; another using the accumulator. The order in
    173  0000 ????						; which the bytes are moved depends on the
    174  0000 ????						; relative positions of SRC and DST. If SRC and
    175  0000 ????						; DST are the same then no code is generated.
    176  0000 ????						;
    177  0000 ????						; On exit: A = ??, X & Y are unchanged.
    178  0000 ????
    179  0000 ????				      MAC	_xfr16
    180  0000 ????				      IF	{1} != {2}
    181  0000 ????				      IF	{1} > {2}
    182  0000 ????				      LDA	{1}+0
    183  0000 ????				      STA	{2}+0
    184  0000 ????				      LDA	{1}+1
    185  0000 ????				      STA	{2}+1
    186  0000 ????				      ELSE
    187  0000 ????				      LDA	{1}+1
    188  0000 ????				      STA	{2}+1
    189  0000 ????				      LDA	{1}+0
    190  0000 ????				      STA	{2}+0
    191  0000 ????				      ENDIF
    192  0000 ????				      ENDIF
    193  0000 ????				      ENDM		;MACRO SRC,DST
    194  0000 ????
    195  0000 ????
    196  0000 ????						; Calculate the exclusive OR of a 16 value at
    197  0000 ????						; location VLA with a constant value and
    198  0000 ????						; store the result at location RES.
    199  0000 ????						;
    200  0000 ????						; On exit: A = ??, X & Y are unchanged.
    201  0000 ????
    202  0000 ????				      MAC	_eor16i
    203  0000 ????				      LDA	{1}+0
    204  0000 ????				      EOR	<{2}
    205  0000 ????				      STA	{3}+0
    206  0000 ????				      LDA	{1}+1
    207  0000 ????				      EOR	>{2}
    208  0000 ????				      STA	{3}+1
    209  0000 ????				      ENDM		;MACRO VLA,NUM,RES
    210  0000 ????
    211  0000 ????				      MAC	_revbits
    212  0000 ????				      ldx	{1}+0
    213  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    214  0000 ????				      sta	{1}+0
    215  0000 ????				      ldx	{1}+1
    216  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    217  0000 ????				      sta	{1}+1
    218  0000 ????				      ENDM
    219  0000 ????
    220  0000 ????
    221  0000 ????						; Calculate the exclusive OR of the two 16 bit
    222  0000 ????						; values at locations VLA and VLB. The result is
    223  0000 ????						; stored in location RES. If VLA and VLB are the
    224  0000 ????						; same the macro expands to a _CLR16.
    225  0000 ????						;
    226  0000 ????						; On exit: A = ??, X & Y are unchanged.
    227  0000 ????
    228  0000 ????				      MAC	_eor16
    229  0000 ????				      IF	{1} != {2}
    230  0000 ????				      LDA	{1}+0
    231  0000 ????				      EOR	{2}+0
    232  0000 ????				      STA	{3}+0
    233  0000 ????				      LDA	{1}+1
    234  0000 ????				      EOR	{2}+1
    235  0000 ????				      STA	{3}+1
    236  0000 ????				      ELSE
    237  0000 ????				      _CLR16	{3}
    238  0000 ????				      ENDIF
    239  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    240  0000 ????
    241  0000 ????
    242  0000 ????
    243  0000 ????
    244  0000 ????						; Calculate the logical AND of the two 16 bit
    245  0000 ????						; values at locations VLA and VLB. The result is
    246  0000 ????						; stored in location RES. If VLA and VLB are the
    247  0000 ????						; same the macro expands to a _XFR16.
    248  0000 ????						;
    249  0000 ????						; On exit: A = ??, X & Y are unchanged.
    250  0000 ????
    251  0000 ????				      MAC	_and16
    252  0000 ????				      IF	{1} != {2}
    253  0000 ????				      LDA	{1}+0
    254  0000 ????				      AND	{2}+0
    255  0000 ????				      STA	{3}+0
    256  0000 ????				      LDA	{1}+1
    257  0000 ????				      AND	{2}+1
    258  0000 ????				      STA	{3}+1
    259  0000 ????				      ELSE
    260  0000 ????				      _XFR16	{1},{3}
    261  0000 ????				      ENDIF
    262  0000 ????				      ENDM		;MACRO VLA,VLB,RES
------- FILE kernel_06.5.asm
      5  0000 ????						;
      6  0000 ????						; Email - 8blit0@gmail.com
      7  0000 ????
      8  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
      9  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     10  0000 ????	       00 08	   MIN_SPEED  equ	8	; minimum speed
     11  0000 ????	       00 08	   MAX_COLORS equ	8	; minimum speed
     12  0000 ????
     13  0000 ????
     14 U0097 ????				      seg.u	temp	; uninitialized segment
     15 U0080					      org	$80	; origin set at base of ram
     16 U0080							; up to 9F
     17 U0080		       00 00	   c16_1      ds	2
     18 U0082		       00	   var1       ds	1
     19 U0083		       00 00	   temp       ds	2
     20 U0085		       00 00	   temp2      ds	2
     21 U0087
     22 U0087		       00	   fcount     ds	1	; 1 byte - frame counter				     ; up to AF
     23 U0088		       00 00	   revbits    ds	2
     24 U008a		       00	   speed      ds	1	; 1 byte - speed
     25 U008b		       00 00	   scanline   ds	2	; 1 byte - current scanline
     26 U008d
     27 U008d		       00	   mod_1      ds	1	; 1 byte - modulo 1
     28 U008e
     29 U008e		       00	   selDebounceTm ds	1	; 1 byte - select debounce timer
     30 U008f		       00	   selDebounceOn ds	1	; 1 byte - select debounce on
     31 U0090		       00	   selectMode ds	1	; 1 byte - select mode
     32 U0091
     33 U0091		       00	   p0_x       ds	1	; 1 byte - player 0 x position
     34 U0092		       00	   p0_y       ds	1	; 1 byte - player 0 y position
     35 U0093
     36 U0093		       00	   triggerSound ds	1	; 1 byte - trigger sound
     37 U0094		       00	   pitch      ds	1	; 1 byte - pitch
     38 U0095
     39 U0095		       00 00	   snd_on     ds	2	; 1 byte per audio channel - greater than 0 if sound is playing
     40 U0097
     41  10000 ????				       seg	main	; start of main segment
     42  f000					      org	$F000
     43  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     45  f00b
     46  f00b		       a9 01		      lda	#1
     47  f00d		       85 0a		      sta	CTRLPF
     48  f00f
     49  f00f		       a9 01		      lda	#1
     50  f011		       85 8a		      sta	speed
     51  f013
     52  f013		       a9 80		      lda	#$80
     53  f015		       85 91		      sta	p0_x
     54  f017		       a9 80		      lda	#$80
     55  f019		       85 92		      sta	p0_y
     56  f01b
     57  f01b		       a9 80		      lda	#$80
     58  f01d		       85 81		      sta	c16_1+1
     59  f01f
      0  f01f				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f01f		       a9 0e		      lda	#%1110
      2  f021		       85 02	   .VSLP1     sta	WSYNC
      3  f023		       85 00		      sta	VSYNC
      4  f025		       4a		      lsr
      5  f026		       d0 f9		      bne	.VSLP1
     61  f028							; -------- set timer -------------------------------
     62  f028							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     63  f028							; 2812 machine cycles / 64 clocks = 43.9375
     64  f028		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     65  f02a		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     66  f02d							; -------- do stuff  -------------------------------
     67  f02d
     68  f02d		       c6 8d		      dec	mod_1
     69  f02f		       d0 0a		      bne	.cont
     70  f031		       a5 8a		      lda	speed
     71  f033		       85 8d		      sta	mod_1
      0  f035					      _INC16	c16_1
      1  f035		       e6 80		      INC	c16_1+0
      2  f037		       d0 02		      BNE	_DONE
      3  f039		       e6 81		      INC	c16_1+1
      4  f039		       f0 3b	   _DONE      EQU	*
     73  f03b
     74  f03b				   .cont
     75  f03b							; lda triggerSound
     76  f03b							; cpx #%10000000
     77  f03b							; bne .sndproc
     78  f03b							; ldx #0
     79  f03b							; jsr snd_play 	   ; call the subroutine to load the audio registers
     80  f03b
     81  f03b		       20 28 f2    .sndproc   jsr	snd_process
     82  f03e
     83  f03e
     84  f03e
     85  f03e
     86  f03e							; -------- wait ------------------------------------
     87  f03e		       ad 84 02 	      lda	INTIM	; check the timer
     88  f041		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     89  f043							; -------- done ------------------------------------
     90  f043
     91  f043		       a9 00		      lda	#0
     92  f045		       85 01		      sta	VBLANK
     93  f047		       a9 c0		      lda	#PF_H
     94  f049		       85 8b		      sta	scanline
     95  f04b
     96  f04b
     97  f04b							; -------- ; primera linea visible  ------------------------------------
     98  f04b
     99  f04b							; lda temp
    100  f04b							; _GET_COLOR temp, #0, colors
    101  f04b		       a5 83		      lda	temp
    102  f04d		       85 09		      sta	COLUBK
    103  f04f
    104  f04f				   render		;
    105  f04f		       85 02		      sta	WSYNC
    106  f051
      0  f051					      _GET_COLOR	p0_x, scanline, colors
      1  f051
      2  f051		       a5 91		      lda	p0_x
      3  f053		       65 8b		      adc	scanline
      4  f055		       4a		      lsr
      5  f056		       4a		      lsr
      6  f057		       4a		      lsr
      7  f058		       4a		      lsr
      8  f059		       aa		      tax
      9  f05a		       bd 6a f2 	      lda	colors,x
    108  f05d		       85 08		      sta	COLUPF
    109  f05f
      0  f05f					      _ADD16	c16_1, scanline, temp
      1  f05f					      IF	c16_1 != scanline
      2  f05f		       18		      CLC
      3  f060		       a5 80		      LDA	c16_1+0
      4  f062		       65 8b		      ADC	scanline+0
      5  f064		       85 83		      STA	temp+0
      6  f066		       a5 81		      LDA	c16_1+1
      7  f068		       65 8c		      ADC	scanline+1
      8  f06a		       85 84		      STA	temp+1
      9  f06c				  -	      ELSE
     10  f06c				  -	      _ASL16	c16_1,temp
     11  f06c					      ENDIF
      0  f06c					      _EOR16	scanline, temp, temp
      1  f06c					      IF	scanline != temp
      2  f06c		       a5 8b		      LDA	scanline+0
      3  f06e		       45 83		      EOR	temp+0
      4  f070		       85 83		      STA	temp+0
      5  f072		       a5 8c		      LDA	scanline+1
      6  f074		       45 84		      EOR	temp+1
      7  f076		       85 84		      STA	temp+1
      8  f078				  -	      ELSE
      9  f078				  -	      _CLR16	temp
     10  f078					      ENDIF
    112  f078
      0  f078					      _NEXTLINE
      1  f078		       c6 8b		      dec	scanline
      2  f07a		       85 02		      sta	WSYNC
    114  f07c
      0  f07c					      _ADD16	c16_1, scanline, temp2
      1  f07c					      IF	c16_1 != scanline
      2  f07c		       18		      CLC
      3  f07d		       a5 80		      LDA	c16_1+0
      4  f07f		       65 8b		      ADC	scanline+0
      5  f081		       85 85		      STA	temp2+0
      6  f083		       a5 81		      LDA	c16_1+1
      7  f085		       65 8c		      ADC	scanline+1
      8  f087		       85 86		      STA	temp2+1
      9  f089				  -	      ELSE
     10  f089				  -	      _ASL16	c16_1,temp2
     11  f089					      ENDIF
      0  f089					      _ROL16	temp2, temp2
      1  f089				  -	      IF	temp2 != temp2
      2  f089				  -	      LDA	temp2+0
      3  f089				  -	      ROL
      4  f089				  -	      STA	temp2+0
      5  f089				  -	      LDA	temp2+1
      6  f089				  -	      ROL
      7  f089				  -	      STA	temp2+1
      8  f089					      ELSE
      9  f089		       26 85		      ROL	temp2+0
     10  f08b		       26 86		      ROL	temp2+1
     11  f08d					      ENDIF
      0  f08d					      _EOR16	temp, p0_x, temp2
      1  f08d					      IF	temp != p0_x
      2  f08d		       a5 83		      LDA	temp+0
      3  f08f		       45 91		      EOR	p0_x+0
      4  f091		       85 85		      STA	temp2+0
      5  f093		       a5 84		      LDA	temp+1
      6  f095		       45 92		      EOR	p0_x+1
      7  f097		       85 86		      STA	temp2+1
      8  f099				  -	      ELSE
      9  f099				  -	      _CLR16	temp2
     10  f099					      ENDIF
    118  f099
    119  f099		       a5 85		      lda	temp2
    120  f09b		       85 0e		      sta	PF1
    121  f09d
      0  f09d					      _NEXTLINE
      1  f09d		       c6 8b		      dec	scanline
      2  f09f		       85 02		      sta	WSYNC
    123  f0a1
    124  f0a1							;-------------
    125  f0a1
      0  f0a1					      _GET_COLOR	p0_x, scanline, colors
      1  f0a1
      2  f0a1		       a5 91		      lda	p0_x
      3  f0a3		       65 8b		      adc	scanline
      4  f0a5		       4a		      lsr
      5  f0a6		       4a		      lsr
      6  f0a7		       4a		      lsr
      7  f0a8		       4a		      lsr
      8  f0a9		       aa		      tax
      9  f0aa		       bd 6a f2 	      lda	colors,x
    127  f0ad		       85 08		      sta	COLUPF
    128  f0af
      0  f0af					      _ADD16	c16_1, scanline, temp2
      1  f0af					      IF	c16_1 != scanline
      2  f0af		       18		      CLC
      3  f0b0		       a5 80		      LDA	c16_1+0
      4  f0b2		       65 8b		      ADC	scanline+0
      5  f0b4		       85 85		      STA	temp2+0
      6  f0b6		       a5 81		      LDA	c16_1+1
      7  f0b8		       65 8c		      ADC	scanline+1
      8  f0ba		       85 86		      STA	temp2+1
      9  f0bc				  -	      ELSE
     10  f0bc				  -	      _ASL16	c16_1,temp2
     11  f0bc					      ENDIF
      0  f0bc					      _ROL16	temp, temp
      1  f0bc				  -	      IF	temp != temp
      2  f0bc				  -	      LDA	temp+0
      3  f0bc				  -	      ROL
      4  f0bc				  -	      STA	temp+0
      5  f0bc				  -	      LDA	temp+1
      6  f0bc				  -	      ROL
      7  f0bc				  -	      STA	temp+1
      8  f0bc					      ELSE
      9  f0bc		       26 83		      ROL	temp+0
     10  f0be		       26 84		      ROL	temp+1
     11  f0c0					      ENDIF
    131  f0c0
      0  f0c0					      _NEXTLINE
      1  f0c0		       c6 8b		      dec	scanline
      2  f0c2		       85 02		      sta	WSYNC
      0  f0c4					      _ROR16	temp2, temp2
      1  f0c4				  -	      IF	temp2 != temp2
      2  f0c4				  -	      LDA	temp2+1
      3  f0c4				  -	      ROR
      4  f0c4				  -	      STA	temp2+1
      5  f0c4				  -	      LDA	temp2+0
      6  f0c4				  -	      ROR
      7  f0c4				  -	      STA	temp2+0
      8  f0c4					      ELSE
      9  f0c4		       66 86		      ROR	temp2+1
     10  f0c6		       66 85		      ROR	temp2+0
     11  f0c8					      ENDIF
      0  f0c8					      _EOR16	temp, temp2, temp
      1  f0c8					      IF	temp != temp2
      2  f0c8		       a5 83		      LDA	temp+0
      3  f0ca		       45 85		      EOR	temp2+0
      4  f0cc		       85 83		      STA	temp+0
      5  f0ce		       a5 84		      LDA	temp+1
      6  f0d0		       45 86		      EOR	temp2+1
      7  f0d2		       85 84		      STA	temp+1
      8  f0d4				  -	      ELSE
      9  f0d4				  -	      _CLR16	temp
     10  f0d4					      ENDIF
    135  f0d4
      0  f0d4					      _ADD16	c16_1, scanline, temp
      1  f0d4					      IF	c16_1 != scanline
      2  f0d4		       18		      CLC
      3  f0d5		       a5 80		      LDA	c16_1+0
      4  f0d7		       65 8b		      ADC	scanline+0
      5  f0d9		       85 83		      STA	temp+0
      6  f0db		       a5 81		      LDA	c16_1+1
      7  f0dd		       65 8c		      ADC	scanline+1
      8  f0df		       85 84		      STA	temp+1
      9  f0e1				  -	      ELSE
     10  f0e1				  -	      _ASL16	c16_1,temp
     11  f0e1					      ENDIF
      0  f0e1					      _EOR16	temp, p0_y, temp2
      1  f0e1					      IF	temp != p0_y
      2  f0e1		       a5 83		      LDA	temp+0
      3  f0e3		       45 92		      EOR	p0_y+0
      4  f0e5		       85 85		      STA	temp2+0
      5  f0e7		       a5 84		      LDA	temp+1
      6  f0e9		       45 93		      EOR	p0_y+1
      7  f0eb		       85 86		      STA	temp2+1
      8  f0ed				  -	      ELSE
      9  f0ed				  -	      _CLR16	temp2
     10  f0ed					      ENDIF
    138  f0ed
    139  f0ed
    140  f0ed
      0  f0ed					      _NEXTLINE
      1  f0ed		       c6 8b		      dec	scanline
      2  f0ef		       85 02		      sta	WSYNC
    142  f0f1		       a5 85		      lda	temp2+0
    143  f0f3		       85 0f		      sta	PF2
    144  f0f5
    145  f0f5							; _EOR16 scanline, p0_x, temp2
    146  f0f5
    147  f0f5							; lda temp2
    148  f0f5							; sta PF1
    149  f0f5							; _ROL16 temp2, temp2
    150  f0f5							; _ROL16 temp2, temp2
    151  f0f5							; _EOR16 temp, temp2, temp
    152  f0f5							; _AND16 temp, temp, temp
    153  f0f5
    154  f0f5							; _ORA16 temp, p0_y, temp2
    155  f0f5
    156  f0f5
      0  f0f5					      _NEXTLINE
      1  f0f5		       c6 8b		      dec	scanline
      2  f0f7		       85 02		      sta	WSYNC
    158  f0f9
    159  f0f9
    160  f0f9							; lda temp2+0
    161  f0f9							; sta PF1
    162  f0f9
    163  f0f9		       c6 8b		      dec	scanline
    164  f0fb
    165  f0fb
    166  f0fb		       d0 03		      bne	gotorender	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    167  f0fd		       4c 03 f1 	      jmp	DoneWithFrame	; (3) 2 bytes del opcode (jmp) + 1 byte operando + byte del salto
    168  f100		       4c 4f f0    gotorender jmp	render
    169  f103
    170  f103							; --------------- DoneWithFrame	---------------
    171  f103				   DoneWithFrame
    172  f103
    173  f103							; ---- Overscan (30 scanlines)
    174  f103							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    175  f103							; 2280 machine cycles / 64 clocks = 35.625
    176  f103		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    177  f105		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    178  f108
    179  f108
    180  f108
    181  f108
    182  f108		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    183  f10a		       85 01		      sta	VBLANK	; turn off the beam
    184  f10c
    185  f10c							; -------- wait ------------------------------------
    186  f10c		       ad 84 02 	      lda	INTIM	; check the timer
    187  f10f		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    188  f111							; -------- done ------------------------------------
    189  f111
    190  f111
    191  f111
    192  f111							; -------- INPUT ------------------------------------
    193  f111							; Reset
    194  f111		       a9 01	   input      lda	#%00000001	; (2) read reset input
    195  f113		       2c 82 02 	      bit	SWCHB
    196  f116		       d0 03		      bne	switch_noreset
    197  f118		       4c 00 f0 	      jmp	reset
    198  f11b				   switch_noreset
    199  f11b
    200  f11b
    201  f11b
    202  f11b
    203  f11b							; B/W input
    204  f11b		       a2 00		      ldx	#0
    205  f11d		       a9 08		      lda	#%00001000
    206  f11f		       2c 82 02 	      bit	SWCHB
    207  f122		       d0 02		      bne	switch_color
    208  f124		       a2 01		      ldx	#1
    209  f126				   switch_color
    210  f126							;TODO switch color
    211  f126
    212  f126							; Player 0 Difficulty
    213  f126		       a2 00		      ldx	#0
    214  f128		       a9 40		      lda	#%01000000
    215  f12a		       2c 82 02 	      bit	SWCHB
    216  f12d		       d0 00		      bne	switch_P0Diff1
    217  f12f				   switch_P0Diff2
    218  f12f							; TODO Difficulty 2
    219  f12f				   switch_P0Diff1
    220  f12f							; TODO Difficulty 1
    221  f12f
    222  f12f							; Player 1 Difficulty
    223  f12f		       a2 00		      ldx	#0
    224  f131		       a9 80		      lda	#%10000000
    225  f133		       2c 82 02 	      bit	SWCHB
    226  f136		       d0 00		      bne	switch_P1Diff1
    227  f138				   switch_P1Diff2		; Difficulty 2
    228  f138				   switch_P1Diff1		; Difficulty 1
    229  f138
    230  f138							; ------- joystick:
    231  f138
    232  f138							; Read button input
    233  f138		       a0 08		      ldy	#MIN_SPEED	; P0 Fire switch
    234  f13a		       24 0c		      bit	INPT4
    235  f13c		       30 18		      bmi	pos_nofire
    236  f13e		       a0 01		      ldy	#1
    237  f140
    238  f140		       a5 83		      lda	temp
    239  f142		       85 94		      sta	pitch
      0  f144					      _SND_PLAY	#4, pitch
      1  f144
      2  f144		       a2 00		      ldx	#0
      3  f146		       a9 04		      lda	#4
      4  f148		       95 15		      sta	AUDC0,x
      5  f14a		       a9 03		      lda	#3
      6  f14c		       95 19		      sta	AUDV0,x
      7  f14e
      8  f14e		       a5 94		      lda	pitch
      9  f150		       95 17		      sta	AUDF0,x
     10  f152
     11  f152		       a9 14		      lda	#20
     12  f154		       95 95		      sta	snd_on,x
    241  f156				   pos_nofire
    242  f156		       84 8a		      sty	speed
    243  f158
    244  f158							; ------------------
    245  f158							; lda #%00
    246  f158							; sta triggerSound
    247  f158
    248  f158							; read direction input
    249  f158		       a6 91		      ldx	p0_x	; p0_x es la posición del jugador 0 en x
    250  f15a		       a9 80		      lda	#%10000000	; P0 Right switch
    251  f15c		       2c 80 02 	      bit	SWCHA
    252  f15f		       d0 1d		      bne	pos_noright	; z es el estado del boton: branch if no se movió.
    253  f161		       e0 ff		      cpx	#$FF	; max right position
    254  f163		       b0 19		      bcs	pos_noright
    255  f165		       e8		      inx
    256  f166							; stx var1
    257  f166		       86 91		      stx	p0_x
    258  f168
    259  f168		       a5 85		      lda	temp2
    260  f16a		       85 94		      sta	pitch
      0  f16c					      _SND_PLAY	#3, pitch
      1  f16c
      2  f16c		       a2 00		      ldx	#0
      3  f16e		       a9 03		      lda	#3
      4  f170		       95 15		      sta	AUDC0,x
      5  f172		       a9 03		      lda	#3
      6  f174		       95 19		      sta	AUDV0,x
      7  f176
      8  f176		       a5 94		      lda	pitch
      9  f178		       95 17		      sta	AUDF0,x
     10  f17a
     11  f17a		       a9 14		      lda	#20
     12  f17c		       95 95		      sta	snd_on,x
    262  f17e
    263  f17e				   pos_noright
    264  f17e		       a9 40		      lda	#%01000000	; check left movement
    265  f180		       2c 80 02 	      bit	SWCHA
    266  f183		       d0 1d		      bne	pos_noleft
    267  f185		       e0 00		      cpx	#0
    268  f187		       90 19		      bcc	pos_noleft
    269  f189		       ca		      dex
    270  f18a							; stx var1
    271  f18a		       86 91		      stx	p0_x
    272  f18c
    273  f18c		       a5 85		      lda	temp2
    274  f18e		       85 94		      sta	pitch
      0  f190					      _SND_PLAY	#3, pitch
      1  f190
      2  f190		       a2 00		      ldx	#0
      3  f192		       a9 03		      lda	#3
      4  f194		       95 15		      sta	AUDC0,x
      5  f196		       a9 03		      lda	#3
      6  f198		       95 19		      sta	AUDV0,x
      7  f19a
      8  f19a		       a5 94		      lda	pitch
      9  f19c		       95 17		      sta	AUDF0,x
     10  f19e
     11  f19e		       a9 14		      lda	#20
     12  f1a0		       95 95		      sta	snd_on,x
    276  f1a2
    277  f1a2				   pos_noleft
    278  f1a2							; ldx var1
    279  f1a2							; stx p0_x
    280  f1a2
    281  f1a2		       a6 92		      ldx	p0_y
    282  f1a4		       a9 20		      lda	#%00100000
    283  f1a6		       2c 80 02 	      bit	SWCHA
    284  f1a9		       d0 1d		      bne	pos_nodown
    285  f1ab		       e0 00		      cpx	#$00
    286  f1ad		       90 19		      bcc	pos_nodown
    287  f1af		       ca		      dex
    288  f1b0		       86 92		      stx	p0_y
    289  f1b2
    290  f1b2
    291  f1b2		       a5 80		      lda	c16_1
    292  f1b4		       85 94		      sta	pitch
      0  f1b6					      _SND_PLAY	#1, pitch
      1  f1b6
      2  f1b6		       a2 00		      ldx	#0
      3  f1b8		       a9 01		      lda	#1
      4  f1ba		       95 15		      sta	AUDC0,x
      5  f1bc		       a9 03		      lda	#3
      6  f1be		       95 19		      sta	AUDV0,x
      7  f1c0
      8  f1c0		       a5 94		      lda	pitch
      9  f1c2		       95 17		      sta	AUDF0,x
     10  f1c4
     11  f1c4		       a9 14		      lda	#20
     12  f1c6		       95 95		      sta	snd_on,x
    294  f1c8
    295  f1c8				   pos_nodown
    296  f1c8		       a9 10		      lda	#%00010000
    297  f1ca		       2c 80 02 	      bit	SWCHA
    298  f1cd		       d0 1d		      bne	pos_noup
    299  f1cf		       e0 ff		      cpx	#255
    300  f1d1		       b0 19		      bcs	pos_noup
    301  f1d3		       e8		      inx
    302  f1d4		       86 92		      stx	p0_y
    303  f1d6
    304  f1d6		       a5 80		      lda	c16_1
    305  f1d8		       85 94		      sta	pitch
      0  f1da					      _SND_PLAY	#5, pitch
      1  f1da
      2  f1da		       a2 00		      ldx	#0
      3  f1dc		       a9 05		      lda	#5
      4  f1de		       95 15		      sta	AUDC0,x
      5  f1e0		       a9 03		      lda	#3
      6  f1e2		       95 19		      sta	AUDV0,x
      7  f1e4
      8  f1e4		       a5 94		      lda	pitch
      9  f1e6		       95 17		      sta	AUDF0,x
     10  f1e8
     11  f1e8		       a9 14		      lda	#20
     12  f1ea		       95 95		      sta	snd_on,x
    307  f1ec				   pos_noup
    308  f1ec							; stx p0_y
    309  f1ec
    310  f1ec
    311  f1ec
    312  f1ec							; -------- done ------------------------------------
    313  f1ec
    314  f1ec		       4c 1f f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    315  f1ef
    316  f1ef							; -------- done ------------------------------------
    317  f1ef
    318  f1ef
    319  f1ef
    320  f1ef							; Game Select
    321  f1ef				   check_switch_select
    322  f1ef				   switch_select_chkbounced
    323  f1ef		       a5 8f		      lda	selDebounceOn	; (2)
    324  f1f1		       d0 18		      bne	switch_select_decrease	; if debounce already on then branch out
    325  f1f3
    326  f1f3		       a9 02		      lda	#%00000010
    327  f1f5		       2c 82 02 	      bit	SWCHB
    328  f1f8		       d0 19		      bne	switch_select_end
    329  f1fa
    330  f1fa		       a9 01		      lda	#1
    331  f1fc		       85 8f		      sta	selDebounceOn
    332  f1fe		       a9 28		      lda	#40
    333  f200		       85 8e		      sta	selDebounceTm
    334  f202
    335  f202		       06 90		      asl	selectMode
    336  f204		       90 05		      bcc	switch_select_solid
    337  f206		       e6 90		      inc	selectMode
    338  f208
    339  f208				   switch_select_stripped
    340  f208
    341  f208		       4c 13 f2 	      jmp	switch_select_end
    342  f20b
    343  f20b				   switch_select_solid
    344  f20b
    345  f20b
    346  f20b				   switch_select_decrease
    347  f20b		       c6 8e		      dec	selDebounceTm
    348  f20d		       d0 04		      bne	switch_select_end
    349  f20f		       a9 00		      lda	#0
    350  f211		       85 8f		      sta	selDebounceOn
    351  f213				   switch_select_end
    352  f213		       60		      rts
    353  f214
    354  f214
    355  f214							; cues a sound to play. sets audio registers based on table lookup sndbank.
    356  f214							; parameters: x = channel (0|1), y = sound to play
    357  f214				   snd_play
    358  f214							; lda sndbank_type,y
    359  f214		       a9 0c		      lda	#$0C
    360  f216		       95 15		      sta	AUDC0,x	; audio control
    361  f218		       a9 04		      lda	#4
    362  f21a		       95 19		      sta	AUDV0,x	; audio volume (0 a 15)
    363  f21c
    364  f21c		       a5 80		      lda	c16_1
    365  f21e		       6a		      ror
    366  f21f		       6a		      ror
    367  f220		       6a		      ror
    368  f221		       95 17		      sta	AUDF0,x	; audio frequence (0 a 31 - divisiones del clock)
    369  f223
    370  f223		       a9 0c		      lda	#12
    371  f225		       95 95		      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    372  f227		       60		      rts
    373  f228
    374  f228							; process sound channels to turn off volume when sound length counter runs out
    375  f228				   snd_process
    376  f228		       a2 01		      ldx	#1	; channel to process, start with channel 1
    377  f22a				   snd_ch
    378  f22a		       b5 95		      lda	snd_on,x	; get sound length counter for this channel
    379  f22c		       f0 08		      beq	snd_done	; are we playing a sound? a>1
    380  f22e		       d6 95		      dec	snd_on,x	; yes, decrese the sound length counter for this channel
    381  f230		       d0 04		      bne	snd_cont	; did we reach the end of the sound length?
    382  f232		       a9 00		      lda	#0	; yes
    383  f234		       95 19		      sta	AUDV0,x	; turn off the volume for this channel
    384  f236				   snd_done
    385  f236
    386  f236				   snd_cont
    387  f236		       ca		      dex		; do it again for channel 0
    388  f237		       f0 f1		      beq	snd_ch
    389  f239		       60		      rts
    390  f23a
    391  f23a
    392  f23a
    393  f23a							; -------------------------------------------------------------------
    394  f23a							;	 CODE
    395  f23a							;	 FOR MY
    396  f23a							;  TIA  MUSIC
    397  f23a							;  CODE DRIVER NAME	DESCRIPTION
    398  f23a							;   1	 110	Saw	sounds similar to a saw waveform
    399  f23a							;   3	 111	Engine	many 2600 games use this for an engine sound
    400  f23a							;   4	 000	Square	a high pitched square waveform
    401  f23a							;   6	 001	Bass	fat bass sound
    402  f23a							;   7	 010	Pitfall log sound in pitfall, low and buzzy
    403  f23a							;   8	 011	Noise	white noise
    404  f23a							;  12	 101	Lead	lower pitch square wave sound
    405  f23a							;  15	 100	Buzz	atonal buzz, good for percussion
    406  f23a							; -------------------------------------------------------------------
    407  f23a							; define sounds, bounce, reset, backward, forward
    408  f23a				   sndbank_type
    409  f23a		       06 07 00 01*	      .byte.b	$06, $07, $00, $01, $02, $03, $05, $04, $0C, $02, $06, $06
    410  f246				   sndbank_vol
    411  f246		       02 06 04 04*	      .byte.b	$02, $06, $04, $04, $02, $06, $04, $04, $02, $06, $04, $04
    412  f252				   sndbank_pitch
    413  f252		       1a 0e 1f 09*	      .byte.b	$1A, $0E, $1F, $09, $12, $07, $1C, $0B, $14, $03, $19, $0D
    414  f25e				   sndbank_len
    415  f25e		       01 08 03 03*	      .byte.b	$01, $08, $03, $03, $0C, $02, $06, $06, $0C, $02, $06, $06
    416  f26a
    417  f26a
    418  f26a				   colors
    419  f26a		       b4 d2 d8 da*	      .byte.b	$B4, $D2, $D8, $DA, $DB, $DC, $CE, $CB
    420  f272
    421  f272
    422  f272
    423  f272
    424  f272				   reverseBits
    425  f272		       aa		      tax
    426  f273		       bd 77 f2 	      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    427  f276		       60		      rts
    428  f277
    429  f277				   reversedOrderBits
    430  f277		       00 00 80 00*	      .word.w	$00, $80, $40, $c0, $20, $a0, $60, $e0
    431  f287		       10 00 90 00*	      .word.w	$10, $90, $50, $d0, $30, $b0, $70, $f0
    432  f297		       08 00 88 00*	      .word.w	$08, $88, $48, $c8, $28, $a8, $68, $e8
    433  f2a7		       18 00 98 00*	      .word.w	$18, $98, $58, $d8, $38, $b8, $78, $f8
    434  f2b7		       04 00 84 00*	      .word.w	$04, $84, $44, $c4, $24, $a4, $64, $e4
    435  f2c7		       14 00 94 00*	      .word.w	$14, $94, $54, $d4, $34, $b4, $74, $f4
    436  f2d7		       0c 00 8c 00*	      .word.w	$0c, $8c, $4c, $cc, $2c, $ac, $6c, $ec
    437  f2e7		       1c 00 9c 00*	      .word.w	$1c, $9c, $5c, $dc, $3c, $bc, $7c, $fc
    438  f2f7		       02 00 82 00*	      .word.w	$02, $82, $42, $c2, $22, $a2, $62, $e2
    439  f307		       12 00 92 00*	      .word.w	$12, $92, $52, $d2, $32, $b2, $72, $f2
    440  f317		       0a 00 8a 00*	      .word.w	$0a, $8a, $4a, $ca, $2a, $aa, $6a, $ea
    441  f327		       1a 00 9a 00*	      .word.w	$1a, $9a, $5a, $da, $3a, $ba, $7a, $fa
    442  f337		       06 00 86 00*	      .word.w	$06, $86, $46, $c6, $26, $a6, $66, $e6
    443  f347		       16 00 96 00*	      .word.w	$16, $96, $56, $d6, $36, $b6, $76, $f6
    444  f357		       0e 00 8e 00*	      .word.w	$0e, $8e, $4e, $ce, $2e, $ae, $6e, $ee
    445  f367		       1e 00 9e 00*	      .word.w	$1e, $9e, $5e, $de, $3e, $be, $7e, $fe
    446  f377		       01 00 81 00*	      .word.w	$01, $81, $41, $c1, $21, $a1, $61, $e1
    447  f387		       11 00 91 00*	      .word.w	$11, $91, $51, $d1, $31, $b1, $71, $f1
    448  f397		       09 00 89 00*	      .word.w	$09, $89, $49, $c9, $29, $a9, $69, $e9
    449  f3a7		       19 00 99 00*	      .word.w	$19, $99, $59, $d9, $39, $b9, $79, $f9
    450  f3b7		       05 00 85 00*	      .word.w	$05, $85, $45, $c5, $25, $a5, $65, $e5
    451  f3c7		       15 00 95 00*	      .word.w	$15, $95, $55, $d5, $35, $b5, $75, $f5
    452  f3d7		       0d 00 8d 00*	      .word.w	$0d, $8d, $4d, $cd, $2d, $ad, $6d, $ed
    453  f3e7		       1d 00 9d 00*	      .word.w	$1d, $9d, $5d, $dd, $3d, $bd, $7d, $fd
    454  f3f7		       03 00 83 00*	      .word.w	$03, $83, $43, $c3, $23, $a3, $63, $e3
    455  f407		       13 00 93 00*	      .word.w	$13, $93, $53, $d3, $33, $b3, $73, $f3
    456  f417		       0b 00 8b 00*	      .word.w	$0b, $8b, $4b, $cb, $2b, $ab, $6b, $eb
    457  f427		       1b 00 9b 00*	      .word.w	$1b, $9b, $5b, $db, $3b, $bb, $7b, $fb
    458  f437		       07 00 87 00*	      .word.w	$07, $87, $47, $c7, $27, $a7, $67, $e7
    459  f447		       17 00 97 00*	      .word.w	$17, $97, $57, $d7, $37, $b7, $77, $f7
    460  f457		       0f 00 8f 00*	      .word.w	$0f, $8f, $4f, $cf, $2f, $af, $6f, $ef
    461  f467		       1f 00 9f 00*	      .word.w	$1f, $9f, $5f, $df, $3f, $bf, $7f, $ff
    462  f477
    463  f477
    464  fffa					      org	$FFFA
    465  fffa
    466  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    467  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    468  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    469  10000
    470  10000
    471  10000
    472  10000
