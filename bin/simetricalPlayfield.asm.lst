------- FILE simetricalPlayfield.asm LEVEL 1 PASS 2
      1  10000 ????						;***********************************************************************
      2  10000 ????						;**								       **
      3  10000 ????						;**	       Symmetrical Playfield Left Scrolling  V1.00	       **
      4  10000 ????						;**		      Christian Bogey - May 12,2004		       **
      5  10000 ????						;**								       **
      6  10000 ????						;***********************************************************************
      7  10000 ????
      8  10000 ????
      9  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE simetricalPlayfield.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE simetricalPlayfield.asm
     12  10000 ????
     13  10000 ????						;-------------------------------------------------------------
     14  10000 ????						;-			Define Variables		      -
     15  10000 ????						;-------------------------------------------------------------
     16  10000 ????						; Ram Starts at address $80
     17  10000 ????		00 80	    PF0_L1     =	$80
     18  10000 ????		00 81	    PF0_L2     =	$81
     19  10000 ????		00 82	    PF0_L3     =	$82
     20  10000 ????		00 83	    PF0_L4     =	$83
     21  10000 ????
     22  10000 ????		00 84	    PF1_L1     =	$84
     23  10000 ????		00 85	    PF1_L2     =	$85
     24  10000 ????		00 86	    PF1_L3     =	$86
     25  10000 ????		00 87	    PF1_L4     =	$87
     26  10000 ????
     27  10000 ????		00 88	    PF2_L1     =	$88
     28  10000 ????		00 89	    PF2_L2     =	$89
     29  10000 ????		00 8a	    PF2_L3     =	$8A
     30  10000 ????		00 8b	    PF2_L4     =	$8B
     31  10000 ????
     32  10000 ????		00 8c	    Sky        =	$8C
     33  10000 ????		00 8d	    Temp       =	$8D
     34  10000 ????		00 02	    Scroll_Speed =	#2	; Higher = Slower (Min=1)
     35  10000 ????
     36  10000 ????						;-------------------------------------------------------------
     37  10000 ????						;-		       Start of code here		      -
     38  10000 ????						;-------------------------------------------------------------
     39  10000 ????
     40  10000 ????				       SEG
     41  f000					      ORG	$F000
     42  f000
     43  f000				   Reset
     44  f000
     45  f000							;-------------------------------------------------------------
     46  f000							;-   Clear RAM, TIA registers and Set Stack Pointer to #$FF  -
     47  f000							;-------------------------------------------------------------
     48  f000
     49  f000		       78		      SEI
     50  f001		       d8		      CLD
     51  f002		       a2 ff		      LDX	#$FF
     52  f004		       9a		      TXS
     53  f005		       a9 00		      LDA	#0
     54  f007				   Clear_Mem
     55  f007		       95 00		      STA	0,X
     56  f009		       ca		      DEX
     57  f00a		       d0 fb		      BNE	Clear_Mem
     58  f00c
     59  f00c		       a9 2a		      LDA	#$2A	; Brown
     60  f00e		       85 08		      STA	COLUPF	; Set PF coulour
     61  f010		       a9 00		      LDA	#%00000000	; Symmetrical Playfield
     62  f012		       85 0a		      STA	CTRLPF
     63  f014
     64  f014							; Tranfer Ground Datas to RAM
     65  f014		       a2 00		      LDX	#$00
     66  f016		       86 8d		      STX	Temp
     67  f018				   Init_Load_Ram
     68  f018		       bd 00 f1 	      LDA	Screen_PF0,X
     69  f01b		       95 80		      STA	PF0_L1,X
     70  f01d		       e8		      INX
     71  f01e		       e0 0c		      CPX	#12
     72  f020		       d0 f6		      BNE	Init_Load_Ram
     73  f022
     74  f022							;-------------------------------------------------------------
     75  f022							;-		       Start to Build Frame		      -
     76  f022							;-------------------------------------------------------------
     77  f022
     78  f022				   Start_Frame
     79  f022
     80  f022							; Start of Vertical Blank
     81  f022
     82  f022		       a9 02		      LDA	#2
     83  f024		       85 00		      STA	VSYNC
     84  f026
     85  f026		       85 02		      STA	WSYNC
     86  f028		       85 02		      STA	WSYNC
     87  f02a		       85 02		      STA	WSYNC	; 3 scanlines of VSYNC
     88  f02c
     89  f02c		       a9 00		      LDA	#0	; 2 cycles
     90  f02e		       85 00		      STA	VSYNC	; 3 cycles
     91  f030
     92  f030							; Start of Vertival Blank
     93  f030							; Count 37 Scanlines
     94  f030
     95  f030		       a9 2b		      LDA	#43	; 2 cycles
     96  f032		       8d 96 02 	      STA	TIM64T	; 4 cycles
     97  f035
     98  f035							;>>>> Free space for code START : 2785 cycles Free (or exactly 2792)
     99  f035
    100  f035		       a9 80		      LDA	#$80	; Blue
    101  f037		       85 8c		      STA	Sky	; Set Background Colour
    102  f039		       85 09		      STA	COLUBK
    103  f03b
    104  f03b		       e6 8d		      INC	Temp	; Scroll Speed
    105  f03d		       a5 8d		      LDA	Temp
    106  f03f		       c9 02		      CMP	#Scroll_Speed
    107  f041		       d0 1b		      BNE	Scroll_End
    108  f043		       a9 00		      LDA	#$00
    109  f045		       85 8d		      STA	Temp
    110  f047
    111  f047		       a2 04		      LDX	#04
    112  f049				   Scroll
    113  f049		       56 87		      LSR	#PF2_L1-1,X	; Scroll Line X-1 (= 3-0)
    114  f04b		       36 83		      ROL	#PF1_L1-1,X
    115  f04d		       76 7f		      ROR	#PF0_L1-1,X
    116  f04f		       b5 7f		      LDA	#PF0_L1-1,X
    117  f051		       29 08		      AND	#%00001000
    118  f053		       f0 06		      BEQ	Scroll_1
    119  f055		       b5 87		      LDA	#PF2_L1-1,X
    120  f057		       09 80		      ORA	#%10000000
    121  f059		       95 87		      STA	#PF2_L1-1,X
    122  f05b				   Scroll_1
    123  f05b		       ca		      DEX
    124  f05c		       d0 eb		      BNE	Scroll
    125  f05e
    126  f05e				   Scroll_End
    127  f05e
    128  f05e
    129  f05e							;>>>> Free space for code END
    130  f05e
    131  f05e				   Wait_VBLANK_End
    132  f05e		       ad 84 02 	      LDA	INTIM	; 4 cycles
    133  f061		       10 fb		      BPL	Wait_VBLANK_End	; 3 cycles (2)
    134  f063		       85 02		      STA	WSYNC	; 3 cycles  Total Amount = 21 cycles
    135  f065							; 2812-21 = 2791; 2791/64 = 43.60 (TIM64T)
    136  f065
    137  f065		       a9 00		      LDA	#0
    138  f067		       85 01		      STA	VBLANK	; Enable TIA Output
    139  f069
    140  f069
    141  f069							; Display 192 Scanlines
    142  f069
    143  f069		       a9 00		      LDA	#$00	; Clear Playfield
    144  f06b		       85 0d		      STA	PF0
    145  f06d		       85 0e		      STA	PF1
    146  f06f		       85 0f		      STA	PF2
    147  f071		       a0 00		      LDY	#00	; Scanlines Counter
    148  f073		       a2 00		      LDX	#00	; Sky colour changes
    149  f075				   Picture
    150  f075		       a5 8c		      LDA	Sky
    151  f077		       85 09		      STA	COLUBK
    152  f079		       e8		      INX
    153  f07a		       e0 17		      CPX	#23	; Time to change sky colour ?
    154  f07c		       d0 06		      BNE	Same_Sky_Colour	; No
    155  f07e		       a2 00		      LDX	#00	; Yes
    156  f080		       e6 8c		      INC	Sky
    157  f082		       e6 8c		      INC	Sky
    158  f084				   Same_Sky_Colour
    159  f084		       85 02		      STA	WSYNC
    160  f086		       c8		      INY
    161  f087		       c0 aa		      CPY	#170	; End of empty screen (0-169) ?
    162  f089		       d0 ea		      BNE	Picture	; No = Continue
    163  f08b
    164  f08b		       a2 00		      LDX	#$00
    165  f08d				   Picture1
    166  f08d		       b5 80		      LDA	#PF0_L1,X
    167  f08f		       85 0d		      STA	PF0
    168  f091		       b5 84		      LDA	#PF1_L1,X
    169  f093		       85 0e		      STA	PF1
    170  f095		       b5 88		      LDA	#PF2_L1,X
    171  f097		       85 0f		      STA	PF2
    172  f099		       e8		      INX
    173  f09a		       e0 04		      CPX	#$04
    174  f09c		       85 02		      STA	WSYNC	; L170-171 / L172-173
    175  f09e		       85 02		      STA	WSYNC	; L174-175 / L176-177
    176  f0a0		       d0 eb		      BNE	Picture1
    177  f0a2
    178  f0a2		       a9 ff		      LDA	#$FF	; Ground = Full
    179  f0a4		       85 0d		      STA	PF0
    180  f0a6		       85 0e		      STA	PF1
    181  f0a8		       85 0f		      STA	PF2
    182  f0aa		       85 02		      STA	WSYNC	; L178
    183  f0ac		       a2 0d		      LDX	#13
    184  f0ae				   Build_Ground
    185  f0ae		       85 02		      STA	WSYNC	; L179 - L191
    186  f0b0		       ca		      DEX
    187  f0b1		       d0 fb		      BNE	Build_Ground
    188  f0b3
    189  f0b3
    190  f0b3							;-------------------------------------------------------------
    191  f0b3							;-			  Frame Ends Here		      -
    192  f0b3							;-------------------------------------------------------------
    193  f0b3
    194  f0b3		       a9 02		      LDA	#%00000010
    195  f0b5		       85 01		      STA	VBLANK	; Disable TIA Output
    196  f0b7
    197  f0b7
    198  f0b7							; 30 Scanlines of Overscan
    199  f0b7
    200  f0b7		       a2 1e		      LDX	#30
    201  f0b9				   Overscan
    202  f0b9		       85 02		      STA	WSYNC
    203  f0bb		       ca		      DEX
    204  f0bc		       d0 fb		      BNE	Overscan
    205  f0be
    206  f0be		       4c 22 f0 	      JMP	Start_Frame	; Build Next Frame
    207  f0c1
    208  f0c1
    209  f0c1							;-------------------------------------------------------------
    210  f0c1							;-			    Game Datas			      -
    211  f0c1							;-------------------------------------------------------------
    212  f0c1
    213  f0c1							; Playfield generated by TIA Playfield Painter
    214  f0c1							; Mode Used = SYMMETRICAL
    215  f0c1							; Playfields generated = PF0, PF1, PF2
    216  f0c1							; Datas lines are not reversed
    217  f0c1
    218  f100		       00 00 00 00*	      ALIGN	256
    219  f100
    220  f100				   Screen_PF0
    221  f100		       80		      .byte.b	#%10000000	; Scanline 170
    222  f101		       80		      .byte.b	#%10000000	; Scanline 172
    223  f102		       c0		      .byte.b	#%11000000	; Scanline 174
    224  f103		       e0		      .byte.b	#%11100000	; Scanline 176
    225  f104
    226  f104				   Screen_PF1
    227  f104		       80		      .byte.b	#%10000000	; Scanline 170
    228  f105		       c0		      .byte.b	#%11000000	; Scanline 172
    229  f106		       e0		      .byte.b	#%11100000	; Scanline 174
    230  f107		       f1		      .byte.b	#%11110001	; Scanline 176
    231  f108
    232  f108				   Screen_PF2
    233  f108		       00		      .byte.b	#%00000000	; Scanline 170
    234  f109		       08		      .byte.b	#%00001000	; Scanline 172
    235  f10a		       0d		      .byte.b	#%00001101	; Scanline 174
    236  f10b		       1f		      .byte.b	#%00011111	; Scanline 176
    237  f10c
    238  f10c
    239  f10c
    240  f10c							;-------------------------------------------------------------
    241  f10c							;-			Set Interrup Vectors		      -
    242  f10c							;-------------------------------------------------------------
    243  f10c
    244  f10c
    245  fffa					      ORG	$FFFA
    246  fffa
    247  fffa				   Interrupt_Vectors
    248  fffa
    249  fffa		       00 f0		      .word.w	Reset	; NMI
    250  fffc		       00 f0		      .word.w	Reset	; RESET
    251  fffe		       00 f0		      .word.w	Reset	; IRQ
    252  10000
    253  10000					       END
