------- FILE kernels.asm LEVEL 1 PASS 2
      1  10000 ????						; Author: Nicola La Gloria, 2018
      2  10000 ????						;
      3  10000 ????						; Thanks to Kirk Israel for the Asymmetrical Reflected Playfield code.
      4  10000 ????						; Visit, https://alienbill.com/2600/
      5  10000 ????						;
      6  10000 ????						; This code owes a great debt to Glenn Saunders Thu, 20 Sep 2001 Stella post
      7  10000 ????						; " Asymmetrical Reflected Playfield" (who in turn took from Roger Williams,
      8  10000 ????						; who in turn took from Nick Bensema--yeesh!)
      9  10000 ????						;
     10  10000 ????						;
     11  10000 ????
     12  10000 ????
     13  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernels.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	macro.h
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernels.asm
     16  f000					      org	$F000
     17  f000
     18  f000							; store variables in memory
     19  f000							; TODO
     20  f000
     21  f000				   Start
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     23  f00b
     24  f00b		       a9 00		      lda	#00
     25  f00d		       85 09		      sta	COLUBK	;black background
     26  f00f		       a9 2d		      lda	#45
     27  f011		       85 08		      sta	COLUPF	;colored playfield and ball
     28  f013
     29  f013							;MainLoop starts with usual VBLANK code,
     30  f013							;and the usual timer seeding
     31  f013				   MainLoop
      0  f013					      VERTICAL_SYNC
      1  f013		       a9 0e		      lda	#%1110
      2  f015		       85 02	   .VSLP1     sta	WSYNC
      3  f017		       85 00		      sta	VSYNC
      4  f019		       4a		      lsr
      5  f01a		       d0 f9		      bne	.VSLP1
     33  f01c		       a9 0f		      lda	#15
     34  f01e		       8d 96 02 	      sta	TIM64T
     35  f021							;
     36  f021							; lots of logic can go here, obviously,
     37  f021							; and then we'll get to the point where we're waiting
     38  f021							; for the timer to run out
     39  f021
     40  f021				   WaitForVblankEnd
     41  f021		       ad 84 02 	      lda	INTIM
     42  f024		       d0 fb		      bne	WaitForVblankEnd
     43  f026		       85 01		      sta	VBLANK
     44  f028
     45  f028
     46  f028							;so, scanlines. We have three loops;
     47  f028							;TitlePreLoop , TitleShowLoop, TitlePostLoop
     48  f028							;
     49  f028							; I found that if the 3 add up to 174 WSYNCS,
     50  f028							; you should get the desired 262 lines per frame
     51  f028							;
     52  f028							; The trick is, the middle loop is
     53  f028							; how many pixels are in the playfield,
     54  f028							; times how many scanlines you want per "big" letter pixel
     55  f028
     56  f028		       00 06	   pixelHeightOfTitle =	#6
     57  f028		       00 06	   scanlinesPerTitlePixel =	#6
     58  f028
     59  f028							; ok, that's a weird place to define constants, but whatever
     60  f028
     61  f028
     62  f028							;just burning scanlines....you could do something else
     63  f028		       a2 28		      ldx	#40
     64  f02a		       a0 39		      ldy	#57
     65  f02c
     66  f02c				   TitlePreLoop
     67  f02c							; we color the pre title area
     68  f02c		       85 02		      sta	WSYNC
     69  f02e		       86 09		      stx	COLUBK
     70  f030		       e8		      inx
     71  f031		       88		      dey
     72  f032		       d0 f8		      bne	TitlePreLoop
     73  f034
     74  f034
     75  f034		       a9 00		      lda	#00	; reset background color
     76  f036		       85 09		      sta	COLUBK
     77  f038		       85 02		      sta	WSYNC	; create some padding
     78  f03a		       85 02		      sta	WSYNC
     79  f03c		       85 02		      sta	WSYNC
     80  f03e
     81  f03e
     82  f03e							;
     83  f03e							;the next part is careful cycle counting from those
     84  f03e							;who have gone before me....
     85  f03e
     86  f03e							; Ball code
     87  f03e		       a9 96		      lda	#150	; set ball color
     88  f040		       85 08		      sta	COLUPF
     89  f042		       a9 28		      lda	#%0101000	; set ball stretch
     90  f044		       85 0a		      sta	CTRLPF
     91  f046
     92  f046		       a9 02		      lda	#%00000010	; enable the ball
     93  f048		       85 1f		      sta	ENABL
     94  f04a		       85 02		      sta	WSYNC	; not elegan to set the ball thinkness :)
     95  f04c		       85 02		      sta	WSYNC
     96  f04e		       85 02		      sta	WSYNC
     97  f050
     98  f050							; move the ball!
     99  f050		       a9 0a		      lda	#10
    100  f052		       a2 04		      ldx	#4	; Ball sprite id for SetHozPos subroutine
    101  f054		       20 bf f0 	      jsr	SetHorizPos
    102  f057		       85 02		      sta	WSYNC
    103  f059		       85 2a		      sta	HMOVE
      0  f05b					      sleep	15
      1  f05b				   .CYCLES    SET	15
      2  f05b
      3  f05b				  -	      IF	.CYCLES < 2
      4  f05b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f05b				  -	      ERR
      6  f05b					      ENDIF
      7  f05b
      8  f05b					      IF	.CYCLES & 1
      9  f05b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f05b		       04 00		      nop	0
     11  f05d				  -	      ELSE
     12  f05d				  -	      bit	VSYNC
     13  f05d					      ENDIF
     14  f05d				   .CYCLES    SET	.CYCLES - 3
     15  f05d					      ENDIF
     16  f05d
     17  f05d					      REPEAT	.CYCLES / 2
     18  f05d		       ea		      nop
     17  f05d					      REPEND
     18  f05e		       ea		      nop
     17  f05e					      REPEND
     18  f05f		       ea		      nop
     17  f05f					      REPEND
     18  f060		       ea		      nop
     17  f060					      REPEND
     18  f061		       ea		      nop
     17  f061					      REPEND
     18  f062		       ea		      nop
     19  f063					      REPEND
    105  f063		       a9 00		      lda	#%00000000	; disable the ball
    106  f065		       85 1f		      sta	ENABL
    107  f067
    108  f067		       a2 06		      ldx	#pixelHeightOfTitle	; X will hold what letter pixel we're on
    109  f069		       a0 06		      ldy	#scanlinesPerTitlePixel	; Y will hold which scan line we're on for each pixel
    110  f06b
    111  f06b		       a9 2d		      lda	#45
    112  f06d		       85 08		      sta	COLUPF
    113  f06f
    114  f06f				   TitleShowLoop
    115  f06f		       85 02		      sta	WSYNC
    116  f071		       bd d2 f0 	      lda	PFData0Left-1,X	;[0]+4
    117  f074		       85 0d		      sta	PF0	;[4]+3 = *7*	< 23	;PF0 visible
    118  f076		       bd da f0 	      lda	PFData1Left-1,X	;[7]+4
    119  f079		       85 0e		      sta	PF1	;[11]+3 = *14*  < 29	;PF1 visible
    120  f07b		       bd e2 f0 	      lda	PFData2Left-1,X	;[14]+4
    121  f07e		       85 0f		      sta	PF2	;[18]+3 = *21*  < 40	;PF2 visible
    122  f080		       ea		      nop		;[21]+2
    123  f081		       ea		      nop		;[23]+2
    124  f082		       ea		      nop		;[25]+2
    125  f083							;six cycles available	Might be able to do something here
    126  f083		       bd ea f0 	      lda	PFData0Right-1,X	;[27]+4
    127  f086							;PF0 no longer visible, safe to rewrite
    128  f086		       85 0d		      sta	PF0	;[31]+3 = *34*
    129  f088		       bd f2 f0 	      lda	PFData1Right-1,X	;[34]+4
    130  f08b							;PF1 no longer visible, safe to rewrite
    131  f08b		       85 0e		      sta	PF1	;[38]+3 = *41*
    132  f08d		       bd fa f0 	      lda	PFData2Right-1,X	;[41]+4
    133  f090							;PF2 rewrite must begin at exactly cycle 45!!, no more, no less
    134  f090		       85 0f		      sta	PF2	;[45]+2 = *47*  ; >
    135  f092
    136  f092		       88		      dey		;ok, we've drawn one more scaneline for this 'pixel'
    137  f093		       d0 05		      bne	NotChangingWhatTitlePixel	;go to not changing if we still have more to do for this pixel
    138  f095		       ca		      dex		; we *are* changing what title pixel we're on...
    139  f096
    140  f096		       f0 05		      beq	DoneWithTitle	; ...unless we're done, of course
    141  f098
    142  f098		       a0 06		      ldy	#scanlinesPerTitlePixel	;...so load up Y with the count of how many scanlines for THIS pixel...
    143  f09a
    144  f09a				   NotChangingWhatTitlePixel
    145  f09a
    146  f09a		       4c 6f f0 	      jmp	TitleShowLoop
    147  f09d
    148  f09d				   DoneWithTitle
    149  f09d
    150  f09d							;clear out the playfield registers for obvious reasons
    151  f09d		       a9 00		      lda	#0
    152  f09f		       85 0f		      sta	PF2	;clear out PF2 first, I found out through experience
    153  f0a1		       85 0d		      sta	PF0
    154  f0a3		       85 0e		      sta	PF1
    155  f0a5
    156  f0a5							;just burning scanlines....you could do something else
    157  f0a5		       a0 89		      ldy	#137
    158  f0a7		       a2 64		      ldx	#100	; 40 + 60 (pretitle lines) so we start from the last color
    159  f0a9				   TitlePostLoop
    160  f0a9		       85 02		      sta	WSYNC
    161  f0ab		       86 09		      stx	COLUBK
    162  f0ad		       e8		      inx
    163  f0ae		       88		      dey
    164  f0af		       d0 f8		      bne	TitlePostLoop
    165  f0b1
    166  f0b1							; usual vblank
    167  f0b1		       a9 02		      lda	#2
    168  f0b3		       85 01		      sta	VBLANK
    169  f0b5		       a2 1e		      ldx	#30
    170  f0b7				   OverScanWait
    171  f0b7		       85 02		      sta	WSYNC
    172  f0b9		       ca		      dex
    173  f0ba		       d0 fb		      bne	OverScanWait
    174  f0bc		       4c 13 f0 	      jmp	MainLoop
    175  f0bf
    176  f0bf							; Subroutine to move horizontally a sprite
    177  f0bf				   SetHorizPos
    178  f0bf		       85 02		      sta	WSYNC	; start a new line
    179  f0c1		       24 00		      bit	0
    180  f0c3		       24 00		      bit	0	; waste 6 cycles for tuning object speed
    181  f0c5		       38		      sec		; set carry flag
    182  f0c6				   DivideLoop
    183  f0c6		       e9 32		      sbc	#50	; this value determines the direction of motion, 35 is steady
    184  f0c8		       b0 fc		      bcs	DivideLoop	; branch until negative
    185  f0ca		       49 07		      eor	#7	; calculate fine offset
    186  f0cc		       0a		      asl
    187  f0cd		       0a		      asl
    188  f0ce		       0a		      asl
    189  f0cf		       0a		      asl
    190  f0d0		       95 20		      sta	HMP0,x	; set fine offset
    191  f0d2		       60		      rts		; return to calle
    192  f0d3							;
    193  f0d3							; the graphics for Kynetics title
    194  f0d3							; PlayfieldPal at https://alienbill.com/2600/playfieldpal.html
    195  f0d3							; to draw these things. Just rename them left and right
    196  f0d3
    197  f0d3				   PFData0Left
    198  f0d3		       00		      .byte.b	#%00000000
    199  f0d4		       80		      .byte.b	#%10000000
    200  f0d5		       80		      .byte.b	#%10000000
    201  f0d6		       80		      .byte.b	#%10000000
    202  f0d7		       80		      .byte.b	#%10000000
    203  f0d8		       80		      .byte.b	#%10000000
    204  f0d9		       00		      .byte.b	#%00000000
    205  f0da		       00		      .byte.b	#%00000000
    206  f0db
    207  f0db				   PFData1Left
    208  f0db		       00		      .byte.b	#%00000000
    209  f0dc		       24		      .byte.b	#%00100100
    210  f0dd		       24		      .byte.b	#%00100100
    211  f0de		       c0		      .byte.b	#%11000000
    212  f0df		       8e		      .byte.b	#%10001110
    213  f0e0		       2a		      .byte.b	#%00101010
    214  f0e1		       00		      .byte.b	#%00000000
    215  f0e2		       00		      .byte.b	#%00000000
    216  f0e3
    217  f0e3				   PFData2Left
    218  f0e3		       00		      .byte.b	#%00000000
    219  f0e4		       65		      .byte.b	#%01100101
    220  f0e5		       15		      .byte.b	#%00010101
    221  f0e6		       55		      .byte.b	#%01010101
    222  f0e7		       17		      .byte.b	#%00010111
    223  f0e8		       61		      .byte.b	#%01100001
    224  f0e9		       00		      .byte.b	#%00000000
    225  f0ea		       00		      .byte.b	#%00000000
    226  f0eb
    227  f0eb				   PFData0Right
    228  f0eb		       00		      .byte.b	#%00000000
    229  f0ec		       20		      .byte.b	#%00100000
    230  f0ed		       20		      .byte.b	#%00100000
    231  f0ee		       20		      .byte.b	#%00100000
    232  f0ef		       00		      .byte.b	#%00000000
    233  f0f0		       70		      .byte.b	#%01110000
    234  f0f1		       00		      .byte.b	#%00000000
    235  f0f2		       00		      .byte.b	#%00000000
    236  f0f3
    237  f0f3				   PFData1Right
    238  f0f3		       00		      .byte.b	#%00000000
    239  f0f4		       99		      .byte.b	#%10011001
    240  f0f5		       a4		      .byte.b	#%10100100
    241  f0f6		       a0		      .byte.b	#%10100000
    242  f0f7		       25		      .byte.b	#%00100101
    243  f0f8		       98		      .byte.b	#%10011000
    244  f0f9		       00		      .byte.b	#%00000000
    245  f0fa		       00		      .byte.b	#%00000000
    246  f0fb
    247  f0fb				   PFData2Right
    248  f0fb		       00		      .byte.b	#%00000000
    249  f0fc		       03		      .byte.b	#%00000011
    250  f0fd		       04		      .byte.b	#%00000100
    251  f0fe		       03		      .byte.b	#%00000011
    252  f0ff		       00		      .byte.b	#%00000000
    253  f100		       07		      .byte.b	#%00000111
    254  f101		       00		      .byte.b	#%00000000
    255  f102		       00		      .byte.b	#%00000000
    256  f103
    257  f103
    258  f103
    259  fffc					      org	$FFFC
    260  fffc		       00 f0		      .word.w	Start
    261  fffe		       00 f0		      .word.w	Start
