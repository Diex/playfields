------- FILE kernel_10.1.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_10.1.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						;-------------------------------------------------------------------------------
    164  0000 ????						; shortcut
    165  0000 ????
    166  0000 ????				      MAC	_nextline
    167  0000 ????				      dec	scanline
    168  0000 ????				      sta	WSYNC
    169  0000 ????				      ENDM
    170  0000 ????
    171  0000 ????				      MAC	_get_color
    172  0000 ????
    173  0000 ????				      lda	{1}
    174  0000 ????				      adc	{2}
    175  0000 ????				      and	#$0F	; limit the value to 0-15
    176  0000 ????				      tax
    177  0000 ????				      lda	{3},x
    178  0000 ????				      ENDM
    179  0000 ????
    180  0000 ????				      MAC	_get_color_random15
    181  0000 ????						; Galois 8-bit Linear Feedback Shift Registers
    182  0000 ????						; https://samiam.org/blog/20130617.html
    183  0000 ????						; galois_lfsr_random
    184  0000 ????				      lda	r_seed	; keep calling funtion to for better entropy
    185  0000 ????				      lsr		; shift right
    186  0000 ????				      bcc	.noeor0	; if carry 1, then exclusive OR the bits
    187  0000 ????				      eor	#$D4	; d4 tap (11010100)
    188  0000 ????			   .noeor0    sta	r_seed
    189  0000 ????				      and	#$0F	; limit the value to 0-15
    190  0000 ????				      tax
    191  0000 ????				      lda	colors2,x
    192  0000 ????				      ENDM
    193  0000 ????
    194  0000 ????
    195  0000 ????
    196  0000 ????						; ldx channel
    197  0000 ????						; {1}	   = type
    198  0000 ????						; {2}	   = pitch
    199  0000 ????				      MAC	_snd_play
    200  0000 ????						; lda sndbank_type,y
    201  0000 ????				      ldx	#0
    202  0000 ????				      lda	{1}
    203  0000 ????				      sta	AUDC0,x	; audio control
    204  0000 ????				      lda	#3
    205  0000 ????				      sta	AUDV0,x	; audio volume (0 a 15)
    206  0000 ????
    207  0000 ????				      lda	{2}
    208  0000 ????				      sta	AUDF0,x	; audio frequence (0 a 31 - divisiones del clock)
    209  0000 ????
    210  0000 ????				      lda	#20
    211  0000 ????				      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    212  0000 ????				      ENDM
    213  0000 ????
    214  0000 ????						; EOF
------- FILE kernel_10.1.asm
------- FILE macros2.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macros2.h"
      1  0000 ????				      MAC	_clr16
      2  0000 ????				      LDA	#0
      3  0000 ????				      STA	{1}+0
      4  0000 ????				      STA	{1}+1
      5  0000 ????				      ENDM
      6  0000 ????
      7  0000 ????
      8  0000 ????						;------------------------------------------------
      9  0000 ????						; Arithmetic Operations
     10  0000 ????						;------------------------------------------------
     11  0000 ????
     12  0000 ????						; Increment the 16 bit value at location MEM
     13  0000 ????						; by one.
     14  0000 ????						;
     15  0000 ????						; On exit: A, X & Y are unchanged.
     16  0000 ????
     17  0000 ????				      MAC	_inc16
     18  0000 ????				      INC	{1}+0
     19  0000 ????				      BNE	_DONE
     20  0000 ????				      INC	{1}+1
     21  0000 ????			   _DONE      EQU	*
     22  0000 ????				      ENDM		;MACRO MEM
     23  0000 ????
     24  0000 ????						; Add two 16 bit numbers together and store the
     25  0000 ????						; result in another memory location. RES may be
     26  0000 ????						; the same as either VLA or VLB.
     27  0000 ????						;
     28  0000 ????						; On exit: A = ??, X & Y are unchanged.
     29  0000 ????
     30  0000 ????				      MAC	_add16
     31  0000 ????				      IF	{1} != {2}
     32  0000 ????				      CLC
     33  0000 ????				      LDA	{1}+0
     34  0000 ????				      ADC	{2}+0
     35  0000 ????				      STA	{3}+0
     36  0000 ????				      LDA	{1}+1
     37  0000 ????				      ADC	{2}+1
     38  0000 ????				      STA	{3}+1
     39  0000 ????				      ELSE
     40  0000 ????				      _ASL16	{1},{3}
     41  0000 ????				      ENDIF
     42  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     43  0000 ????
     44  0000 ????
     45  0000 ????
     46  0000 ????
     47  0000 ????						; Calculate the 16 bit product of two 16 bit
     48  0000 ????						; unsigned numbers. Any overflow during the
     49  0000 ????						; calculation is lost. The number at location
     50  0000 ????						; VLA is destroyed.
     51  0000 ????						;
     52  0000 ????						; On exit: A = ??, X = $FF, Y is unchanged.
     53  0000 ????
     54  0000 ????				      MAC	_mul16
     55  0000 ????				      _CLR16	{3}
     56  0000 ????				      LDX	#16
     57  0000 ????			   ._LOOP
     58  0000 ????				      _ASL16	{3},{3}
     59  0000 ????				      _ASL16	{1},{1}
     60  0000 ????				      BCC	._NEXT
     61  0000 ????				      _ADD16	{2},{3},{3}
     62  0000 ????			   ._NEXT
     63  0000 ????				      DEX
     64  0000 ????				      BPL	._LOOP
     65  0000 ????						; Count cycles for macro calls
     66  0000 ????						; _CLR16: 6 cycles
     67  0000 ????						; _ASL16: 6 cycles
     68  0000 ????						; _ASL16: 6 cycles
     69  0000 ????						; _ADD16: 12 cycles
     70  0000 ????						; Total cycles: 30 cycles
     71  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     72  0000 ????
     73  0000 ????
     74  0000 ????						;------------------------------------------------
     75  0000 ????						; Shift Operations
     76  0000 ????						;------------------------------------------------
     77  0000 ????
     78  0000 ????						; Perform an arithmetic shift left on the 16 bit
     79  0000 ????						; number at location VLA and store the result at
     80  0000 ????						; location RES. If VLA and RES are the same then
     81  0000 ????						; the operation is applied directly to the memory
     82  0000 ????						; otherwise it is done in the accumulator.
     83  0000 ????						;
     84  0000 ????						; On exit: A = ??, X & Y are unchanged.
     85  0000 ????
     86  0000 ????				      MAC	_asl16
     87  0000 ????				      IF	{1} != {2}
     88  0000 ????				      LDA	{1}+0
     89  0000 ????				      ASL
     90  0000 ????				      STA	{2}+0
     91  0000 ????				      LDA	{1}+1
     92  0000 ????				      ROL
     93  0000 ????				      STA	{2}+1
     94  0000 ????				      ELSE
     95  0000 ????				      ASL	{1}+0
     96  0000 ????				      ROL	{1}+1
     97  0000 ????				      ENDIF
     98  0000 ????				      ENDM		;MACRO VLA,RES
     99  0000 ????
    100  0000 ????						; Perform a right rotation on the 16 bit number
    101  0000 ????						; at location VLA and store the result at
    102  0000 ????						; location RES. If VLA and RES are the same then
    103  0000 ????						; the operation is applied directly to the memory
    104  0000 ????						; otherwise it is done in the accumulator.
    105  0000 ????						;
    106  0000 ????						; On exit: A = ??, X & Y are unchanged.
    107  0000 ????
    108  0000 ????				      MAC	_ror16
    109  0000 ????				      IF	{1} != {2}
    110  0000 ????				      LDA	{1}+1
    111  0000 ????				      ROR
    112  0000 ????				      STA	{2}+1
    113  0000 ????				      LDA	{1}+0
    114  0000 ????				      ROR
    115  0000 ????				      STA	{2}+0
    116  0000 ????				      ELSE
    117  0000 ????				      ROR	{1}+1
    118  0000 ????				      ROR	{1}+0
    119  0000 ????				      ENDIF
    120  0000 ????				      ENDM
    121  0000 ????
    122  0000 ????						; Perform a left rotation on the 16 bit number at
    123  0000 ????						; location VLA and store the result at location
    124  0000 ????						; RES. If VLA and RES are the same then the
    125  0000 ????						; operation is applied directly to the memory,
    126  0000 ????						; otherwise it is done in the accumulator.
    127  0000 ????						;
    128  0000 ????						; On exit: A = ??, X & Y are unchanged.
    129  0000 ????
    130  0000 ????				      MAC	_rol16
    131  0000 ????				      IF	{1} != {2}
    132  0000 ????				      LDA	{1}+0
    133  0000 ????				      ROL
    134  0000 ????				      STA	{2}+0
    135  0000 ????				      LDA	{1}+1
    136  0000 ????				      ROL
    137  0000 ????				      STA	{2}+1
    138  0000 ????				      ELSE
    139  0000 ????				      ROL	{1}+0
    140  0000 ????				      ROL	{1}+1
    141  0000 ????				      ENDIF
    142  0000 ????				      ENDM		;MACRO VLA,RES
    143  0000 ????
    144  0000 ????						; Calculate the logical OR of the two 16 bit
    145  0000 ????						; values at locations VLA and VLB. The result is
    146  0000 ????						; stored in location RES. If VLA and VLB are the
    147  0000 ????						; same the macro expands to a _XFR16.
    148  0000 ????						;
    149  0000 ????						; On exit: A = ??, X & Y are unchanged.
    150  0000 ????
    151  0000 ????				      MAC	_ora16
    152  0000 ????				      IF	{1} != {2}
    153  0000 ????				      LDA	{1}+0
    154  0000 ????				      ORA	{2}+0
    155  0000 ????				      STA	{3}+0
    156  0000 ????				      LDA	{1}+1
    157  0000 ????				      ORA	{2}+1
    158  0000 ????				      STA	{3}+1
    159  0000 ????				      ELSE
    160  0000 ????				      _XFR16	{1},{3}
    161  0000 ????				      ENDIF
    162  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    163  0000 ????
    164  0000 ????
    165  0000 ????
    166  0000 ????				      MAC	_rev8
    167  0000 ????				      ldx	{1}+0
    168  0000 ????				      lda	{2},x	; Load the value to be reversed from memory
    169  0000 ????				      ENDM		;reverseBits:
    170  0000 ????
    171  0000 ????						; Transfer 2 bytes of memory from one location to
    172  0000 ????						; another using the accumulator. The order in
    173  0000 ????						; which the bytes are moved depends on the
    174  0000 ????						; relative positions of SRC and DST. If SRC and
    175  0000 ????						; DST are the same then no code is generated.
    176  0000 ????						;
    177  0000 ????						; On exit: A = ??, X & Y are unchanged.
    178  0000 ????
    179  0000 ????				      MAC	_xfr16
    180  0000 ????				      IF	{1} != {2}
    181  0000 ????				      IF	{1} > {2}
    182  0000 ????				      LDA	{1}+0
    183  0000 ????				      STA	{2}+0
    184  0000 ????				      LDA	{1}+1
    185  0000 ????				      STA	{2}+1
    186  0000 ????				      ELSE
    187  0000 ????				      LDA	{1}+1
    188  0000 ????				      STA	{2}+1
    189  0000 ????				      LDA	{1}+0
    190  0000 ????				      STA	{2}+0
    191  0000 ????				      ENDIF
    192  0000 ????				      ENDIF
    193  0000 ????				      ENDM		;MACRO SRC,DST
    194  0000 ????
    195  0000 ????
    196  0000 ????						; Calculate the exclusive OR of a 16 value at
    197  0000 ????						; location VLA with a constant value and
    198  0000 ????						; store the result at location RES.
    199  0000 ????						;
    200  0000 ????						; On exit: A = ??, X & Y are unchanged.
    201  0000 ????
    202  0000 ????				      MAC	_eor16i
    203  0000 ????				      LDA	{1}+0
    204  0000 ????				      EOR	<{2}
    205  0000 ????				      STA	{3}+0
    206  0000 ????				      LDA	{1}+1
    207  0000 ????				      EOR	>{2}
    208  0000 ????				      STA	{3}+1
    209  0000 ????				      ENDM		;MACRO VLA,NUM,RES
    210  0000 ????
    211  0000 ????				      MAC	_revbits
    212  0000 ????				      ldx	{1}+0
    213  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    214  0000 ????				      sta	{1}+0
    215  0000 ????				      ldx	{1}+1
    216  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    217  0000 ????				      sta	{1}+1
    218  0000 ????				      ENDM
    219  0000 ????
    220  0000 ????
    221  0000 ????						; Calculate the exclusive OR of the two 16 bit
    222  0000 ????						; values at locations VLA and VLB. The result is
    223  0000 ????						; stored in location RES. If VLA and VLB are the
    224  0000 ????						; same the macro expands to a _CLR16.
    225  0000 ????						;
    226  0000 ????						; On exit: A = ??, X & Y are unchanged.
    227  0000 ????
    228  0000 ????				      MAC	_eor16
    229  0000 ????				      IF	{1} != {2}
    230  0000 ????				      LDA	{1}+0
    231  0000 ????				      EOR	{2}+0
    232  0000 ????				      STA	{3}+0
    233  0000 ????				      LDA	{1}+1
    234  0000 ????				      EOR	{2}+1
    235  0000 ????				      STA	{3}+1
    236  0000 ????				      ELSE
    237  0000 ????				      _CLR16	{3}
    238  0000 ????				      ENDIF
    239  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    240  0000 ????
    241  0000 ????
    242  0000 ????
    243  0000 ????
    244  0000 ????						; Calculate the logical AND of the two 16 bit
    245  0000 ????						; values at locations VLA and VLB. The result is
    246  0000 ????						; stored in location RES. If VLA and VLB are the
    247  0000 ????						; same the macro expands to a _XFR16.
    248  0000 ????						;
    249  0000 ????						; On exit: A = ??, X & Y are unchanged.
    250  0000 ????
    251  0000 ????				      MAC	_and16
    252  0000 ????				      IF	{1} != {2}
    253  0000 ????				      LDA	{1}+0
    254  0000 ????				      AND	{2}+0
    255  0000 ????				      STA	{3}+0
    256  0000 ????				      LDA	{1}+1
    257  0000 ????				      AND	{2}+1
    258  0000 ????				      STA	{3}+1
    259  0000 ????				      ELSE
    260  0000 ????				      _XFR16	{1},{3}
    261  0000 ????				      ENDIF
    262  0000 ????				      ENDM		;MACRO VLA,VLB,RES
------- FILE kernel_10.1.asm
      5  0000 ????						;
      6  0000 ????						; This Episode on Youtube - https://youtu.be/KJYeQjJTkj4
      7  0000 ????						; Email - 8blit0@gmail.com
      8  0000 ????
      9  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
     10  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     11  0000 ????
     12 U0084 ????				      seg.u	temp	; uninitialized segment
     13 U0080					      org	$80	; origin set at base of ram
     14 U0080
     15 U0080							; up to 9F
     16 U0080		       00 00	   c16_1      ds	2
     17 U0082
     18 U0082		       00 00	   revbits    ds	2
     19 U0084
     20 U0084
     21 U00ac ????				      seg.u	vars
     22 U00a0					      org	$A0
     23 U00a0
     24 U00a0		       00 00 00 00 temp       ds	4
     25 U00a4		       00	   scanline   ds	1	; 1 byte - current scanline
     26 U00a5		       00	   fcount     ds	1	; 1 byte - frame counter
     27 U00a6		       00 00	   t_	      ds	2	; 1 byte - temp
     28 U00a8		       00	   mod_1      ds	1	; 1 byte - modulo 1
     29 U00a9		       00	   speed      ds	1	; 1 byte - speed
     30 U00aa		       00 00	   snd_on     ds	2	; 1 byte per audio channel - greater than 0 if sound is playing
     31  10000 ????				       seg	main	; start of main segment
     32  f000					      org	$F000
     33  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     35  f00b
     36  f00b		       a9 01		      lda	#1
     37  f00d		       85 0a		      sta	CTRLPF
     38  f00f
     39  f00f		       a9 1e		      lda	#$1E
     40  f011		       85 08		      sta	COLUPF
     41  f013
     42  f013							; lda #255
     43  f013							; sta c24_1+1
     44  f013
      0  f013				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f013		       a9 0e		      lda	#%1110
      2  f015		       85 02	   .VSLP1     sta	WSYNC
      3  f017		       85 00		      sta	VSYNC
      4  f019		       4a		      lsr
      5  f01a		       d0 f9		      bne	.VSLP1
     46  f01c							; -------- set timer -------------------------------
     47  f01c							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     48  f01c							; 2812 machine cycles / 64 clocks = 43.9375
     49  f01c		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     50  f01e		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     51  f021							; -------- do stuff  -------------------------------
     52  f021		       c6 a8		      dec	mod_1
     53  f023		       d0 0a		      bne	cont
     54  f025		       a5 a9		      lda	speed
     55  f027		       85 a8		      sta	mod_1
      0  f029					      _INC16	c16_1
      1  f029		       e6 80		      INC	c16_1+0
      2  f02b		       d0 02		      BNE	_DONE
      3  f02d		       e6 81		      INC	c16_1+1
      4  f02d		       f0 2f	   _DONE      EQU	*
     57  f02f				   cont
     58  f02f		       20 aa f0 	      jsr	snd_process
     59  f032							; -------- wait ------------------------------------
     60  f032		       ad 84 02 	      lda	INTIM	; check the timer
     61  f035		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     62  f037							; -------- done ------------------------------------
     63  f037
     64  f037		       a9 00		      lda	#0
     65  f039
     66  f039		       85 01		      sta	VBLANK
     67  f03b
     68  f03b		       a9 c0		      lda	#PF_H
     69  f03d		       85 a4		      sta	scanline
     70  f03f
     71  f03f
     72  f03f
     73  f03f		       85 02		      sta	WSYNC	; primera linea visible
     74  f041
     75  f041
     76  f041
     77  f041
     78  f041
     79  f041		       85 02	   render     sta	WSYNC	; no lo cuento en la snl
     80  f043
     81  f043		       a5 a4		      lda	scanline
     82  f045		       6a		      ror
     83  f046		       85 08		      sta	COLUPF
     84  f048
     85  f048
     86  f048		       20 6d f0 	      jsr	kernel1
     87  f04b		       85 0f		      sta	PF2
     88  f04d		       c6 a4		      dec	scanline	; (2)
     89  f04f
     90  f04f
     91  f04f
     92  f04f		       85 02		      sta	WSYNC
     93  f051
     94  f051		       a5 a4		      lda	scanline
     95  f053		       6a		      ror
     96  f054		       85 08		      sta	COLUPF
     97  f056
     98  f056							; jsr kernel2
     99  f056		       85 0e		      sta	PF1
    100  f058
    101  f058
    102  f058		       c6 a4		      dec	scanline	; (2)
    103  f05a		       d0 e5		      bne	render	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    104  f05c
    105  f05c							; --------------- DoneWithFrame	---------------
    106  f05c
    107  f05c							; ---- Overscan (30 scanlines)
    108  f05c							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    109  f05c							; 2280 machine cycles / 64 clocks = 35.625
    110  f05c		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    111  f05e		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    112  f061
    113  f061
    114  f061
    115  f061
    116  f061		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    117  f063		       85 01		      sta	VBLANK	; turn off the beam
    118  f065
    119  f065							; -------- wait ------------------------------------
    120  f065		       ad 84 02 	      lda	INTIM	; check the timer
    121  f068		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    122  f06a							; -------- done ------------------------------------
    123  f06a
    124  f06a		       4c 13 f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    125  f06d
    126  f06d
    127  f06d				   kernel1
    128  f06d
    129  f06d		       a5 81		      lda	c16_1+1
    130  f06f		       65 a4		      adc	scanline
    131  f071		       2a		      rol
    132  f072		       85 a0		      sta	temp
    133  f074		       a5 81		      lda	c16_1+1
    134  f076		       2a		      rol
    135  f077		       45 a0		      eor	temp
    136  f079		       85 a0		      sta	temp
    137  f07b
    138  f07b		       a5 81		      lda	c16_1+1
    139  f07d		       6a		      ror
    140  f07e		       6a		      ror
    141  f07f		       6a		      ror
    142  f080		       6a		      ror
    143  f081							; ror
    144  f081		       65 a0		      adc	temp
    145  f083		       60		      rts
    146  f084
    147  f084				   kernel2
    148  f084
    149  f084		       a5 80		      lda	c16_1+0
    150  f086		       65 a4		      adc	scanline
    151  f088		       2a		      rol
    152  f089		       85 a0		      sta	temp
    153  f08b		       a5 80		      lda	c16_1+0
    154  f08d		       2a		      rol
    155  f08e		       45 a0		      eor	temp
    156  f090
    157  f090		       60		      rts
    158  f091
    159  f091
    160  f091
    161  f091
    162  f091
    163  f091
    164  f091
    165  f091				   reverseBits
    166  f091		       aa		      tax
    167  f092		       bd f4 f0 	      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    168  f095		       60		      rts
    169  f096
    170  f096
    171  f096							; cues a sound to play. sets audio registers based on table lookup sndbank.
    172  f096							; parameters: x = channel (0|1), y = sound to play
    173  f096				   snd_play
    174  f096							; lda sndbank_type,y
    175  f096		       a9 0c		      lda	#$0C
    176  f098		       95 15		      sta	AUDC0,x	; audio control
    177  f09a
    178  f09a		       a9 04		      lda	#4
    179  f09c		       95 19		      sta	AUDV0,x	; audio volume (0 a 15)
    180  f09e
    181  f09e		       a5 80		      lda	c16_1
    182  f0a0		       6a		      ror
    183  f0a1		       6a		      ror
    184  f0a2		       6a		      ror
    185  f0a3		       95 17		      sta	AUDF0,x	; audio frequence (0 a 31 - divisiones del clock)
    186  f0a5
    187  f0a5		       a9 0c		      lda	#12
    188  f0a7		       95 aa		      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    189  f0a9		       60		      rts
    190  f0aa
    191  f0aa							; process sound channels to turn off volume when sound length counter runs out
    192  f0aa				   snd_process
    193  f0aa		       a2 01		      ldx	#1	; channel to process, start with channel 1
    194  f0ac				   snd_ch
    195  f0ac		       b5 aa		      lda	snd_on,x	; get sound length counter for this channel
    196  f0ae		       f0 08		      beq	snd_done	; are we playing a sound? a>1
    197  f0b0		       d6 aa		      dec	snd_on,x	; yes, decrese the sound length counter for this channel
    198  f0b2		       d0 04		      bne	snd_cont	; did we reach the end of the sound length?
    199  f0b4		       a9 00		      lda	#0	; yes
    200  f0b6		       95 19		      sta	AUDV0,x	; turn off the volume for this channel
    201  f0b8				   snd_done
    202  f0b8
    203  f0b8				   snd_cont
    204  f0b8		       ca		      dex		; do it again for channel 0
    205  f0b9		       f0 f1		      beq	snd_ch
    206  f0bb		       60		      rts
    207  f0bc
    208  f0bc
    209  f0bc
    210  f0bc
    211  f0bc							; define sounds, bounce, reset, backward, forward
    212  f0bc				   sndbank_type
    213  f0bc		       0c 02 06 06*	      .byte.b	$0C, $02, $06, $06, $0C, $02, $06, $06, $0C, $02, $06, $06
    214  f0c8				   sndbank_vol
    215  f0c8		       02 06 04 04*	      .byte.b	$02, $06, $04, $04, $02, $06, $04, $04, $02, $06, $04, $04
    216  f0d4				   sndbank_pitch
    217  f0d4		       1a 0e 1f 09*	      .byte.b	$1A, $0E, $1F, $09, $12, $07, $1C, $0B, $14, $03, $19, $0D
    218  f0e0				   sndbank_len
    219  f0e0		       01 08 03 03*	      .byte.b	$01, $08, $03, $03, $0C, $02, $06, $06, $0C, $02, $06, $06
    220  f0ec
    221  f0ec
    222  f0ec				   colors
    223  f0ec		       36 48 76 b4*	      .byte.b	$36, $48, $76, $b4, $ea, $4c, $8a, $a4	; Player 0-7 colors
    224  f0f4
    225  f0f4
    226  f0f4				   reversedOrderBits
    227  f0f4		       00 00 80 00*	      .word.w	$00, $80, $40, $c0, $20, $a0, $60, $e0
    228  f104		       10 00 90 00*	      .word.w	$10, $90, $50, $d0, $30, $b0, $70, $f0
    229  f114		       08 00 88 00*	      .word.w	$08, $88, $48, $c8, $28, $a8, $68, $e8
    230  f124		       18 00 98 00*	      .word.w	$18, $98, $58, $d8, $38, $b8, $78, $f8
    231  f134		       04 00 84 00*	      .word.w	$04, $84, $44, $c4, $24, $a4, $64, $e4
    232  f144		       14 00 94 00*	      .word.w	$14, $94, $54, $d4, $34, $b4, $74, $f4
    233  f154		       0c 00 8c 00*	      .word.w	$0c, $8c, $4c, $cc, $2c, $ac, $6c, $ec
    234  f164		       1c 00 9c 00*	      .word.w	$1c, $9c, $5c, $dc, $3c, $bc, $7c, $fc
    235  f174		       02 00 82 00*	      .word.w	$02, $82, $42, $c2, $22, $a2, $62, $e2
    236  f184		       12 00 92 00*	      .word.w	$12, $92, $52, $d2, $32, $b2, $72, $f2
    237  f194		       0a 00 8a 00*	      .word.w	$0a, $8a, $4a, $ca, $2a, $aa, $6a, $ea
    238  f1a4		       1a 00 9a 00*	      .word.w	$1a, $9a, $5a, $da, $3a, $ba, $7a, $fa
    239  f1b4		       06 00 86 00*	      .word.w	$06, $86, $46, $c6, $26, $a6, $66, $e6
    240  f1c4		       16 00 96 00*	      .word.w	$16, $96, $56, $d6, $36, $b6, $76, $f6
    241  f1d4		       0e 00 8e 00*	      .word.w	$0e, $8e, $4e, $ce, $2e, $ae, $6e, $ee
    242  f1e4		       1e 00 9e 00*	      .word.w	$1e, $9e, $5e, $de, $3e, $be, $7e, $fe
    243  f1f4		       01 00 81 00*	      .word.w	$01, $81, $41, $c1, $21, $a1, $61, $e1
    244  f204		       11 00 91 00*	      .word.w	$11, $91, $51, $d1, $31, $b1, $71, $f1
    245  f214		       09 00 89 00*	      .word.w	$09, $89, $49, $c9, $29, $a9, $69, $e9
    246  f224		       19 00 99 00*	      .word.w	$19, $99, $59, $d9, $39, $b9, $79, $f9
    247  f234		       05 00 85 00*	      .word.w	$05, $85, $45, $c5, $25, $a5, $65, $e5
    248  f244		       15 00 95 00*	      .word.w	$15, $95, $55, $d5, $35, $b5, $75, $f5
    249  f254		       0d 00 8d 00*	      .word.w	$0d, $8d, $4d, $cd, $2d, $ad, $6d, $ed
    250  f264		       1d 00 9d 00*	      .word.w	$1d, $9d, $5d, $dd, $3d, $bd, $7d, $fd
    251  f274		       03 00 83 00*	      .word.w	$03, $83, $43, $c3, $23, $a3, $63, $e3
    252  f284		       13 00 93 00*	      .word.w	$13, $93, $53, $d3, $33, $b3, $73, $f3
    253  f294		       0b 00 8b 00*	      .word.w	$0b, $8b, $4b, $cb, $2b, $ab, $6b, $eb
    254  f2a4		       1b 00 9b 00*	      .word.w	$1b, $9b, $5b, $db, $3b, $bb, $7b, $fb
    255  f2b4		       07 00 87 00*	      .word.w	$07, $87, $47, $c7, $27, $a7, $67, $e7
    256  f2c4		       17 00 97 00*	      .word.w	$17, $97, $57, $d7, $37, $b7, $77, $f7
    257  f2d4		       0f 00 8f 00*	      .word.w	$0f, $8f, $4f, $cf, $2f, $af, $6f, $ef
    258  f2e4		       1f 00 9f 00*	      .word.w	$1f, $9f, $5f, $df, $3f, $bf, $7f, $ff
    259  f2f4
    260  ffd0					      org	$FFD0
    261  ffd0		       00 00 00 00	      .word.w	$0000,$0000
    262  ffd4		       a1 b3 77 10	      .word.w	$B3A1, $1077
    263  ffd8		       00 00 20 24	      .word.w	$0000,$2420
    264  ffdc		       00 00 00 00	      .word.w	$0000,$0000
    265  ffe0
    266  fffa					      org	$FFFA
    267  fffa
    268  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    269  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    270  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    271  10000
    272  10000
    273  10000
    274  10000
