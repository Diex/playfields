------- FILE kernel_13.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_13.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE kernel_13.asm
      4  0000 ????						;
      5  0000 ????						; This Episode on Youtube - https://youtu.be/KJYeQjJTkj4
      6  0000 ????						; Email - 8blit0@gmail.com
      7  0000 ????
      8  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
      9  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     10  0000 ????	       00 08	   SPEED      equ	8
     11 U0091 ????				      seg.u	temp	; uninitialized segment
     12 U0080					      org	$80	; origin set at base of ram
     13 U0080
     14 U0080							; up to 9F
     15 U0080		       00 00	   c16_1      ds	2
     16 U0082							; c24_1	   ds 3
     17 U0082
     18 U0082		       00 00 00 00*params     ds	8
     19 U008a		       00 00 00    plfys      ds	3
     20 U008d		       00 00	   revbits    ds	2
     21 U008f		       00 00	   ghostColPtr ds	2	; Pointer to which color palette to use
     22 U0091
     23 U00a9 ????				      seg.u	vars
     24 U00a0					      org	$A0
     25 U00a0
     26 U00a0		       00 00 00 00 temp       ds	4
     27 U00a4		       00	   scanline   ds	1	; 1 byte - current scanline
     28 U00a5		       00	   fcount     ds	1	; 1 byte - frame counter
     29 U00a6		       00 00	   t_	      ds	2	; 1 byte - temp
     30 U00a8		       00	   mod_1      ds	1	; 1 byte - modulo 1
     31 U00a9
     32 U00a9
     33  10000 ????				       seg	main	; start of main segment
     34  f000					      org	$F000
     35  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     37  f00b
     38  f00b		       a9 01		      lda	#1
     39  f00d		       85 0a		      sta	CTRLPF
     40  f00f
     41  f00f		       a9 1e		      lda	#$1E
     42  f011		       85 08		      sta	COLUPF
     43  f013
     44  f013		       a9 02		      lda	#$02
     45  f015		       85 80		      sta	c16_1+0
     46  f017
     47  f017		       a5 08		      lda	SPEED
     48  f019		       85 a8		      sta	mod_1
     49  f01b
      0  f01b				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f01b		       a9 0e		      lda	#%1110
      2  f01d		       85 02	   .VSLP1     sta	WSYNC
      3  f01f		       85 00		      sta	VSYNC
      4  f021		       4a		      lsr
      5  f022		       d0 f9		      bne	.VSLP1
     51  f024							; -------- set timer -------------------------------
     52  f024							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     53  f024							; 2812 machine cycles / 64 clocks = 43.9375
     54  f024		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     55  f026		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     56  f029							; -------- do stuff  -------------------------------
     57  f029
     58  f029		       c6 a8		      dec	mod_1
     59  f02b		       d0 08		      bne	.+10
     60  f02d		       a5 08		      lda	SPEED
     61  f02f		       85 a8		      sta	mod_1
     62  f031		       20 b7 f0 	      jsr	inc16
     63  f034
     64  f034							; resetColor:	   lda c16_1+0
     65  f034							;		   cmp #$0F
     66  f034							;		   bne cont1
     67  f034							;		   lda #$02
     68  f034							;		   sta c16_1+0
     69  f034							; cont1
     70  f034
     71  f034
     72  f034
     73  f034
     74  f034							; -------- wait ------------------------------------
     75  f034		       ad 84 02 	      lda	INTIM	; check the timer
     76  f037		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     77  f039							; -------- done ------------------------------------
     78  f039		       a9 00		      lda	#0
     79  f03b		       85 01		      sta	VBLANK
     80  f03d		       a9 c0		      lda	#PF_H
     81  f03f		       85 a4		      sta	scanline
     82  f041
     83  f041
     84  f041		       85 02		      sta	WSYNC	; primera linea visible
     85  f043
     86  f043
     87  f043		       85 02	   render     sta	WSYNC	; no lo cuento en la snl
     88  f045
     89  f045		       a5 a4		      lda	scanline
     90  f047		       65 81		      adc	c16_1+1
     91  f049		       6a		      ror
     92  f04a		       6a		      ror
     93  f04b		       6a		      ror
     94  f04c		       6a		      ror
     95  f04d		       85 08		      sta	COLUPF
     96  f04f
     97  f04f
     98  f04f		       20 8f f0 	      jsr	kernel1
     99  f052		       85 0f		      sta	PF2
    100  f054		       c6 a4		      dec	scanline	; (2)
    101  f056
    102  f056
    103  f056
    104  f056		       85 02		      sta	WSYNC
    105  f058
    106  f058		       a5 a4		      lda	scanline
    107  f05a		       6a		      ror
    108  f05b		       6a		      ror
    109  f05c		       6a		      ror
    110  f05d		       85 08		      sta	COLUPF
    111  f05f
    112  f05f		       20 a3 f0 	      jsr	kernel2
    113  f062		       85 0e		      sta	PF1
    114  f064
    115  f064
    116  f064
    117  f064		       c6 a4		      dec	scanline	; (2)
    118  f066		       d0 db		      bne	render	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    119  f068
    120  f068							; --------------- DoneWithFrame	---------------
    121  f068
    122  f068							; ---- Overscan (30 scanlines)
    123  f068							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    124  f068							; 2280 machine cycles / 64 clocks = 35.625
    125  f068		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    126  f06a		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    127  f06d
    128  f06d
    129  f06d
    130  f06d
    131  f06d		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    132  f06f		       85 01		      sta	VBLANK	; turn off the beam
    133  f071
    134  f071							; -------- wait ------------------------------------
    135  f071		       ad 84 02 	      lda	INTIM	; check the timer
    136  f074		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    137  f076							; -------- done ------------------------------------
    138  f076
    139  f076							; Read button input
    140  f076		       a0 00		      ldy	#0	; color index set to default yellow
    141  f078		       24 0c		      bit	INPT4	; check D7 of INPT4
    142  f07a		       30 02		      bmi	button_nopress	; branch if minus. D7 will me 0 is button is pressed
    143  f07c		       a0 01		      ldy	#1
    144  f07e				   button_nopress
    145  f07e		       b1 8f		      lda	(ghostColPtr),y
    146  f080		       85 09		      sta	COLUBK	; set the P0 color
    147  f082
    148  f082				   switch_color
    149  f082		       ad d4 f0 	      lda	ghost_pColLSB
    150  f085		       85 8f		      sta	ghostColPtr	; (3)
    151  f087		       ad d5 f0 	      lda	ghost_pColMSB
    152  f08a		       85 90		      sta	ghostColPtr+1	; (3)
    153  f08c
    154  f08c							; ldy #0
    155  f08c							; lda (ghostColPtr),y
    156  f08c							; sta COLUBK
    157  f08c
    158  f08c							; ldy #3
    159  f08c							; lda (ghostColPtr),y
    160  f08c							; sta COLUPF
    161  f08c
    162  f08c
    163  f08c		       4c 1b f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    164  f08f
    165  f08f
    166  f08f
    167  f08f				   kernel1
    168  f08f
    169  f08f		       a5 81		      lda	c16_1+1
    170  f091		       65 a4		      adc	scanline
    171  f093		       2a		      rol
    172  f094		       85 a0		      sta	temp
    173  f096		       a5 81		      lda	c16_1+1
    174  f098		       2a		      rol
    175  f099		       45 a0		      eor	temp
    176  f09b		       85 a0		      sta	temp
    177  f09d
    178  f09d		       a5 81		      lda	c16_1+1
    179  f09f		       6a		      ror
    180  f0a0							; ror
    181  f0a0		       65 a0		      adc	temp
    182  f0a2		       60		      rts
    183  f0a3
    184  f0a3				   kernel2
    185  f0a3
    186  f0a3		       a5 80		      lda	c16_1+0
    187  f0a5		       65 a4		      adc	scanline
    188  f0a7		       2a		      rol
    189  f0a8		       45 a0		      eor	temp
    190  f0aa		       85 a0		      sta	temp
    191  f0ac		       a5 80		      lda	c16_1+0
    192  f0ae		       2a		      rol
    193  f0af		       45 a0		      eor	temp
    194  f0b1
    195  f0b1		       60		      rts
    196  f0b2
    197  f0b2
    198  f0b2							; Shift a 16bit value by one place left (e.g. multiply by two)
    199  f0b2		       06 82	   asl16      ASL	params+0	;Shift the LSB
    200  f0b4		       26 83		      ROL	params+1	;Rotate the MSB
    201  f0b6		       60		      rts
    202  f0b7
    203  f0b7
    204  f0b7		       18	   inc16      clc
    205  f0b8		       a5 81		      lda	c16_1+1
    206  f0ba		       69 01		      adc	#1
    207  f0bc		       85 81		      sta	c16_1+1
    208  f0be		       90 01		      bcc	.+3
    209  f0c0		       e6 80		      inc	c16_1+0
    210  f0c2		       60		      rts
    211  f0c3
    212  f0c3							; inc24		 clc
    213  f0c3							;		   lda c24_1+2
    214  f0c3							;		   adc #31
    215  f0c3							;		   sta c24_1+2
    216  f0c3							;		   bcc ok
    217  f0c3							;		   clc
    218  f0c3							;		   lda c24_1+1
    219  f0c3							;		   adc #1
    220  f0c3							;		   sta c24_1+1
    221  f0c3							;		   bcc ok
    222  f0c3							;		   lda c24_1+0
    223  f0c3							;		   adc #1
    224  f0c3							;		   sta c24_1+0
    225  f0c3							; ok		   rts
    226  f0c3
    227  f0c3
    228  f0c3
    229  f0c3				   reverseBits
    230  f0c3		       aa		      tax
    231  f0c4		       bd d6 f0 	      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    232  f0c7		       60		      rts
    233  f0c8
    234  f0c8				   colors
    235  f0c8		       36 48 76 b4*	      .byte.b	$36, $48, $76, $b4, $ea, $4c, $8a, $a4	; Player 0-7 colors
    236  f0d0
    237  f0d0
    238  f0d0
    239  f0d0							; ghost_bw:	   .byte #$08	       ; lightest gray
    240  f0d0							;		   .byte #$02	       ; darker gray
    241  f0d0							;		   .byte #$0C	       ; mid gray
    242  f0d0							;		   .byte #$0E	       ; light gray
    243  f0d0
    244  f0d0		       1e	   ghost_color .byte.b	#$1E	; Bright Yellow
    245  f0d1		       42		      .byte.b	#$42	; Dark Red
    246  f0d2		       98		      .byte.b	#$98	; Mid Blue
    247  f0d3		       ae		      .byte.b	#$AE	; Bright Blue
    248  f0d4
    249  f0d4		       d0	   ghost_pColLSB .byte.b	<ghost_color	; LSB
    250  f0d5							; .byte <ghost_bw
    251  f0d5
    252  f0d5		       f0	   ghost_pColMSB .byte.b	>ghost_color	; MSB
    253  f0d6							; .byte >ghost_bw
    254  f0d6
    255  f0d6				   reversedOrderBits
    256  f0d6		       00 00 80 00*	      .word.w	$00, $80, $40, $c0, $20, $a0, $60, $e0
    257  f0e6		       10 00 90 00*	      .word.w	$10, $90, $50, $d0, $30, $b0, $70, $f0
    258  f0f6		       08 00 88 00*	      .word.w	$08, $88, $48, $c8, $28, $a8, $68, $e8
    259  f106		       18 00 98 00*	      .word.w	$18, $98, $58, $d8, $38, $b8, $78, $f8
    260  f116		       04 00 84 00*	      .word.w	$04, $84, $44, $c4, $24, $a4, $64, $e4
    261  f126		       14 00 94 00*	      .word.w	$14, $94, $54, $d4, $34, $b4, $74, $f4
    262  f136		       0c 00 8c 00*	      .word.w	$0c, $8c, $4c, $cc, $2c, $ac, $6c, $ec
    263  f146		       1c 00 9c 00*	      .word.w	$1c, $9c, $5c, $dc, $3c, $bc, $7c, $fc
    264  f156		       02 00 82 00*	      .word.w	$02, $82, $42, $c2, $22, $a2, $62, $e2
    265  f166		       12 00 92 00*	      .word.w	$12, $92, $52, $d2, $32, $b2, $72, $f2
    266  f176		       0a 00 8a 00*	      .word.w	$0a, $8a, $4a, $ca, $2a, $aa, $6a, $ea
    267  f186		       1a 00 9a 00*	      .word.w	$1a, $9a, $5a, $da, $3a, $ba, $7a, $fa
    268  f196		       06 00 86 00*	      .word.w	$06, $86, $46, $c6, $26, $a6, $66, $e6
    269  f1a6		       16 00 96 00*	      .word.w	$16, $96, $56, $d6, $36, $b6, $76, $f6
    270  f1b6		       0e 00 8e 00*	      .word.w	$0e, $8e, $4e, $ce, $2e, $ae, $6e, $ee
    271  f1c6		       1e 00 9e 00*	      .word.w	$1e, $9e, $5e, $de, $3e, $be, $7e, $fe
    272  f1d6		       01 00 81 00*	      .word.w	$01, $81, $41, $c1, $21, $a1, $61, $e1
    273  f1e6		       11 00 91 00*	      .word.w	$11, $91, $51, $d1, $31, $b1, $71, $f1
    274  f1f6		       09 00 89 00*	      .word.w	$09, $89, $49, $c9, $29, $a9, $69, $e9
    275  f206		       19 00 99 00*	      .word.w	$19, $99, $59, $d9, $39, $b9, $79, $f9
    276  f216		       05 00 85 00*	      .word.w	$05, $85, $45, $c5, $25, $a5, $65, $e5
    277  f226		       15 00 95 00*	      .word.w	$15, $95, $55, $d5, $35, $b5, $75, $f5
    278  f236		       0d 00 8d 00*	      .word.w	$0d, $8d, $4d, $cd, $2d, $ad, $6d, $ed
    279  f246		       1d 00 9d 00*	      .word.w	$1d, $9d, $5d, $dd, $3d, $bd, $7d, $fd
    280  f256		       03 00 83 00*	      .word.w	$03, $83, $43, $c3, $23, $a3, $63, $e3
    281  f266		       13 00 93 00*	      .word.w	$13, $93, $53, $d3, $33, $b3, $73, $f3
    282  f276		       0b 00 8b 00*	      .word.w	$0b, $8b, $4b, $cb, $2b, $ab, $6b, $eb
    283  f286		       1b 00 9b 00*	      .word.w	$1b, $9b, $5b, $db, $3b, $bb, $7b, $fb
    284  f296		       07 00 87 00*	      .word.w	$07, $87, $47, $c7, $27, $a7, $67, $e7
    285  f2a6		       17 00 97 00*	      .word.w	$17, $97, $57, $d7, $37, $b7, $77, $f7
    286  f2b6		       0f 00 8f 00*	      .word.w	$0f, $8f, $4f, $cf, $2f, $af, $6f, $ef
    287  f2c6		       1f 00 9f 00*	      .word.w	$1f, $9f, $5f, $df, $3f, $bf, $7f, $ff
    288  f2d6
    289  ffd0					      org	$FFD0
    290  ffd0		       00 00 00 00	      .word.w	$0000,$0000
    291  ffd4		       a1 b3 77 10	      .word.w	$B3A1, $1077
    292  ffd8		       00 00 20 24	      .word.w	$0000,$2420
    293  ffdc		       00 00 00 00	      .word.w	$0000,$0000
    294  ffe0
    295  fffa					      org	$FFFA
    296  fffa
    297  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    298  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    299  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    300  10000
    301  10000
    302  10000
    303  10000
