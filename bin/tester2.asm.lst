------- FILE tester2.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
      2  10000 ????						; S02E03 Ex2. Timers - Same as Ex1, but uses timers for the Vertical Blank, and Overscan
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE tester2.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE tester2.asm
      5  0000 ????						;
      6  0000 ????						; This Episode on Youtube - https://youtu.be/KJYeQjJTkj4
      7  0000 ????						;
      8  0000 ????						; Become a Patron - https://patreon.com/8blit
      9  0000 ????						; 8blit Merch - https://8blit.myspreadshop.com/
     10  0000 ????						; Subscribe to 8Blit - https://www.youtube.com/8blit?sub_confirmation=1
     11  0000 ????						; Follow on Facebook - https://www.facebook.com/8Blit
     12  0000 ????						; Follow on Instagram - https://www.instagram.com/8blit
     13  0000 ????						; Visit the Website - https://www.8blit.com
     14  0000 ????						;
     15  0000 ????						; Email - 8blit0@gmail.com
     16  0000 ????						;
     17  0000 ????						; PIA off the shelf 6532 Peripheral Interface Adaptor
     18  0000 ????						; Programmable timers, 128 bytes RAM
     19  0000 ????						; Two 8-bit parallel I/O ports
     20  0000 ????						;
     21  0000 ????						; PIA uses the same clock as 6502. 1 PIA cycle per 1 Machine Cycle.
     22  0000 ????						; Can be set to 1 of 4 counting intervals. 1, 8, 64, 1024
     23  0000 ????						; Select how many intervals from 1 to 255.
     24  0000 ????						; Valu decrements at each interval
     25  0000 ????						;
     26  0000 ????						; write value to the desired interval setting
     27  0000 ????						; 1 clock   TIM1T
     28  0000 ????						; 8 clocks  TIM8T
     29  0000 ????						; 64 clocks TIM64T
     30  0000 ????						; 1024 clocks T1024T
     31  0000 ????						;
     32  0000 ????						; Read the timers after loaded at INTIM
     33  0000 ????						;
     34  0000 ????						; When it reaches 0, it will hold 0 for one interval, then the counter will flip to FF and decrements
     35  0000 ????						; each clock cycle to allow the programmer determine how long ago the timer zeroed out.
     36  0000 ????
     37  0000 ????
     38  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
     39  0000 ????	       00 c0	   PF_H       equ	#192	; playfield height
     40  0000 ????	       00 1c	   CHANGE_T   equ	28	; frames to change color
     41  0000 ????	       00 60	   DATA_LENGTH equ	96
     42  0000 ????	       00 01	   SYMMETRY   equ	1
     43  0000 ????	       00 00	   ASYMMETRY  equ	0
     44  0000 ????
     45 U0080 ????				      seg.u	temp	; uninitialized segment
     46 U0080					      org	$80	; origin set at base of ram
     47 U0080							; 16 bytes of uninitialized memory
     48 U00f8 ????				      seg.u	vars	; uninitialized segment
     49 U0090					      org	$90	; origin set at base of ram
     50 U0090
     51 U0090		       00	   scanline   ds	1	; 1 byte - current scanline
     52 U0091		       00	   count1     ds	1	; 1 byte - change color counter
     53 U0092		       00	   colorbk    ds	1	; 1 byte - background color
     54 U0093		       00	   r_seed     ds	1	; 1 byte - random seed
     55 U0094		       00	   fcount     ds	1	; 1 byte - frame counter
     56 U0095		       00	   t_	      ds	1	; 1 byte - temp
     57 U0096		       00	   t2_	      ds	1	; 1 byte - temp
     58 U0097		       00	   temp       ds	1	; 1 byte - temp
     59 U0098		       00 00 00 00*data       ds	96	; 48 bytes - data
     60 U00f8
     61 U00f8
     62  10000 ????				       seg	main	; start of main segment
     63  f000					      org	$F000
     64  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     66  f00b
     67  f00b		       a9 11		      lda	#$11
     68  f00d		       85 06		      sta	COLUP0	; set the P0 color
     69  f00f
     70  f00f		       a9 11		      lda	#$11
     71  f011		       85 09		      sta	COLUBK
     72  f013
     73  f013		       a9 1c		      lda	#CHANGE_T
     74  f015		       85 91		      sta	count1
     75  f017
     76  f017		       ad 84 02 	      lda	INTIM
     77  f01a		       85 93		      sta	r_seed
     78  f01c
     79  f01c		       a9 00		      lda	#0
     80  f01e		       85 94		      sta	fcount
     81  f020		       85 95		      sta	t_
     82  f022
     83  f022
      0  f022				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f022		       a9 0e		      lda	#%1110
      2  f024		       85 02	   .VSLP1     sta	WSYNC
      3  f026		       85 00		      sta	VSYNC
      4  f028		       4a		      lsr
      5  f029		       d0 f9		      bne	.VSLP1
     85  f02b
     86  f02b							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     87  f02b							; 2812 machine cycles / 64 clocks = 43.9375
     88  f02b		       a2 2c		      ldx	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     89  f02d		       8e 96 02 	      stx	TIM64T	; Set a count of 43 with 64-clock interval
     90  f030
     91  f030							; do initializations
     92  f030		       a9 c0		      lda	#PF_H	; (2)
     93  f032		       85 90		      sta	scanline	; (3)
     94  f034
     95  f034		       a9 df		      lda	#$df	; background clear
     96  f036		       65 95		      adc	t_
     97  f038		       85 09		      sta	COLUBK
     98  f03a
     99  f03a		       a9 d8		      lda	#$d8
    100  f03c		       65 95		      adc	t_
    101  f03e		       85 08		      sta	COLUPF
    102  f040
    103  f040		       a9 01		      lda	#SYMMETRY
    104  f042		       85 0a		      sta	CTRLPF	; enable playfield
    105  f044
    106  f044		       e6 95		      inc	t_
    107  f046
    108  f046		       c6 91		      dec	count1
    109  f048		       d0 07		      bne	wait1
    110  f04a
    111  f04a		       a9 1c		      lda	#CHANGE_T	; resets the color change counter
    112  f04c		       85 91		      sta	count1
    113  f04e				   setPFColors
    114  f04e							; ------ generate data:
    115  f04e							; jsr randomData
    116  f04e		       20 af f0 	      jsr	bytebeat1
    117  f051							; jsr bytebeat2
    118  f051
    119  f051
    120  f051
    121  f051		       ae 84 02    wait1      ldx	INTIM	; check the timer
    122  f054		       d0 fb		      bne	wait1	; if it's not 0 then branch back up to timer1
    123  f056
    124  f056		       a9 00		      lda	#0	; (2) set D1 to 0 to end VBLANK
    125  f058		       85 02		      sta	WSYNC	; (3) end with a clean scanline
    126  f05a		       85 01		      sta	VBLANK	; (3) turn on the beam
    127  f05c
    128  f05c
    129  f05c
    130  f05c							; ------------------------------------------------------------
    131  f05c		       a2 20		      ldx	#32	; total lines
    132  f05e		       a0 06		      ldy	#6	; lines height
    133  f060
    134  f060				   kernel
    135  f060		       85 02		      sta	WSYNC	; no lo cuento en la signal
    136  f062
    137  f062		       b5 98		      lda	data,x	; 4
    138  f064		       85 0d		      sta	PF0	; 3 + 2 clocks = 4
    139  f066		       b5 9a		      lda	data,x+2	; 4
    140  f068		       85 0e		      sta	PF1	; 4
    141  f06a		       b5 d8		      lda	data,x+64	; 4
    142  f06c		       85 0f		      sta	PF2	; 4
    143  f06e
    144  f06e							; 24
    145  f06e		       ea		      nop
    146  f06f							; 26
    147  f06f							; lda #0
    148  f06f							; sta PF1
    149  f06f
    150  f06f
    151  f06f		       88		      dey		; 5
    152  f070		       d0 05		      bne	next	; 3
    153  f072		       a0 06		      ldy	#6	; 2
    154  f074		       ca		      dex		; 5
    155  f075		       f0 03		      beq	DoneWithFrame	; 3
    156  f077				   next
    157  f077		       4c 60 f0 	      jmp	kernel	;loop back up to draw the next pixel
    158  f07a
    159  f07a				   DoneWithFrame
    160  f07a
    161  f07a		       e6 94		      inc	fcount
    162  f07c							;clear out the playfield registers for obvious reasons
    163  f07c		       a9 00		      lda	#0
    164  f07e		       85 0f		      sta	PF2	;clear out PF2 first, I found out through experience
    165  f080		       85 0d		      sta	PF0
    166  f082		       85 0e		      sta	PF1
    167  f084
    168  f084		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    169  f086		       85 01		      sta	VBLANK	; turn off the beam
    170  f088
    171  f088							; ---- Overscan (30 scanlines)
    172  f088							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    173  f088							; 2280 machine cycles / 64 clocks = 35.625
    174  f088
    175  f088		       a2 23		      ldx	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    176  f08a		       8e 96 02 	      stx	TIM64T	; Set a count of 35 with 64-clock interval
    177  f08d
    178  f08d		       a9 00		      lda	#0	; background clear
    179  f08f		       85 09		      sta	COLUBK
    180  f091
    181  f091		       ae 84 02    timer2     ldx	INTIM
    182  f094		       d0 fb		      bne	timer2
    183  f096
    184  f096		       4c 22 f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    185  f099
    186  f099				   background
    187  f099		       a5 94		      lda	fcount	; 2
    188  f09b							; stx $80
    189  f09b							; adc $80
    190  f09b		       85 09		      sta	COLUBK	; 3
    191  f09d		       60		      rts		; 6
    192  f09e							; ////////////////////////////////////////////////////////
    193  f09e				   randomData
    194  f09e		       a2 60		      ldx	#DATA_LENGTH
    195  f0a0				   galois_lfsr_random
    196  f0a0		       a5 93		      lda	r_seed	; keep calling funtion to for better entropy
    197  f0a2		       4a		      lsr		; shift right
    198  f0a3		       90 02		      bcc	noeor0	; if carry 1, then exclusive OR the bits
    199  f0a5		       49 d4		      eor	#$D4	; d4 tap (11010100)
    200  f0a7		       85 93	   noeor0     sta	r_seed
    201  f0a9		       95 98		      sta	data,X
    202  f0ab		       ca		      dex
    203  f0ac		       d0 f2		      bne	galois_lfsr_random
    204  f0ae		       60		      rts
    205  f0af
    206  f0af
    207  f0af				   bytebeat1
    208  f0af		       a5 95		      lda	t_
    209  f0b1		       a2 60		      ldx	#DATA_LENGTH
    210  f0b3				   compute
    211  f0b3							; ror
    212  f0b3		       69 01		      adc	#1
    213  f0b5							; eor #$d4
    214  f0b5							; sta temp
    215  f0b5							; lda t_
    216  f0b5							; ; REPEAT 3 ;
    217  f0b5							;     rol
    218  f0b5							;     rol
    219  f0b5							;     rol
    220  f0b5							; ; REPEND
    221  f0b5							; ora t_
    222  f0b5
    223  f0b5		       95 98		      sta	data,x
    224  f0b7		       ca		      dex
    225  f0b8		       d0 f9		      bne	compute
    226  f0ba		       e6 95		      inc	t_
    227  f0bc		       60		      rts
    228  f0bd
    229  f0bd
    230  f0bd
    231  fffa					      org	$FFFA
    232  fffa
    233  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    234  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    235  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    236  10000
    237  10000
    238  10000
    239  10000
    240  10000
    241  10000
    242  10000
    243  10000
    244  10000
    245  10000
