------- FILE kernel_18.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_18.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE kernel_18.asm
------- FILE macros2.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macros2.h"
      1  0000 ????				      MAC	_clr16
      2  0000 ????				      LDA	#0
      3  0000 ????				      STA	{1}+0
      4  0000 ????				      STA	{1}+1
      5  0000 ????				      ENDM
      6  0000 ????
      7  0000 ????
      8  0000 ????						;------------------------------------------------
      9  0000 ????						; Arithmetic Operations
     10  0000 ????						;------------------------------------------------
     11  0000 ????
     12  0000 ????						; Increment the 16 bit value at location MEM
     13  0000 ????						; by one.
     14  0000 ????						;
     15  0000 ????						; On exit: A, X & Y are unchanged.
     16  0000 ????
     17  0000 ????				      MAC	_inc16
     18  0000 ????				      INC	{1}+0
     19  0000 ????				      BNE	_DONE
     20  0000 ????				      INC	{1}+1
     21  0000 ????			   _DONE      EQU	*
     22  0000 ????				      ENDM		;MACRO MEM
     23  0000 ????
     24  0000 ????						; Add two 16 bit numbers together and store the
     25  0000 ????						; result in another memory location. RES may be
     26  0000 ????						; the same as either VLA or VLB.
     27  0000 ????						;
     28  0000 ????						; On exit: A = ??, X & Y are unchanged.
     29  0000 ????
     30  0000 ????				      MAC	_add16
     31  0000 ????				      IF	{1} != {2}
     32  0000 ????				      CLC
     33  0000 ????				      LDA	{1}+0
     34  0000 ????				      ADC	{2}+0
     35  0000 ????				      STA	{3}+0
     36  0000 ????				      LDA	{1}+1
     37  0000 ????				      ADC	{2}+1
     38  0000 ????				      STA	{3}+1
     39  0000 ????				      ELSE
     40  0000 ????				      _ASL16	{1},{3}
     41  0000 ????				      ENDIF
     42  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     43  0000 ????
     44  0000 ????
     45  0000 ????
     46  0000 ????
     47  0000 ????						; Calculate the 16 bit product of two 16 bit
     48  0000 ????						; unsigned numbers. Any overflow during the
     49  0000 ????						; calculation is lost. The number at location
     50  0000 ????						; VLA is destroyed.
     51  0000 ????						;
     52  0000 ????						; On exit: A = ??, X = $FF, Y is unchanged.
     53  0000 ????
     54  0000 ????				      MAC	_mul16
     55  0000 ????				      _CLR16	{3}
     56  0000 ????				      LDX	#16
     57  0000 ????			   ._LOOP
     58  0000 ????				      _ASL16	{3},{3}
     59  0000 ????				      _ASL16	{1},{1}
     60  0000 ????				      BCC	._NEXT
     61  0000 ????				      _ADD16	{2},{3},{3}
     62  0000 ????			   ._NEXT
     63  0000 ????				      DEX
     64  0000 ????				      BPL	._LOOP
     65  0000 ????						; Count cycles for macro calls
     66  0000 ????						; _CLR16: 6 cycles
     67  0000 ????						; _ASL16: 6 cycles
     68  0000 ????						; _ASL16: 6 cycles
     69  0000 ????						; _ADD16: 12 cycles
     70  0000 ????						; Total cycles: 30 cycles
     71  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     72  0000 ????
     73  0000 ????
     74  0000 ????						;------------------------------------------------
     75  0000 ????						; Shift Operations
     76  0000 ????						;------------------------------------------------
     77  0000 ????
     78  0000 ????						; Perform an arithmetic shift left on the 16 bit
     79  0000 ????						; number at location VLA and store the result at
     80  0000 ????						; location RES. If VLA and RES are the same then
     81  0000 ????						; the operation is applied directly to the memory
     82  0000 ????						; otherwise it is done in the accumulator.
     83  0000 ????						;
     84  0000 ????						; On exit: A = ??, X & Y are unchanged.
     85  0000 ????
     86  0000 ????				      MAC	_asl16
     87  0000 ????				      IF	{1} != {2}
     88  0000 ????				      LDA	{1}+0
     89  0000 ????				      ASL
     90  0000 ????				      STA	{2}+0
     91  0000 ????				      LDA	{1}+1
     92  0000 ????				      ROL
     93  0000 ????				      STA	{2}+1
     94  0000 ????				      ELSE
     95  0000 ????				      ASL	{1}+0
     96  0000 ????				      ROL	{1}+1
     97  0000 ????				      ENDIF
     98  0000 ????				      ENDM		;MACRO VLA,RES
     99  0000 ????
    100  0000 ????						; Perform a right rotation on the 16 bit number
    101  0000 ????						; at location VLA and store the result at
    102  0000 ????						; location RES. If VLA and RES are the same then
    103  0000 ????						; the operation is applied directly to the memory
    104  0000 ????						; otherwise it is done in the accumulator.
    105  0000 ????						;
    106  0000 ????						; On exit: A = ??, X & Y are unchanged.
    107  0000 ????
    108  0000 ????				      MAC	_ror16
    109  0000 ????				      IF	{1} != {2}
    110  0000 ????				      LDA	{1}+1
    111  0000 ????				      ROR
    112  0000 ????				      STA	{2}+1
    113  0000 ????				      LDA	{1}+0
    114  0000 ????				      ROR
    115  0000 ????				      STA	{2}+0
    116  0000 ????				      ELSE
    117  0000 ????				      ROR	{1}+1
    118  0000 ????				      ROR	{1}+0
    119  0000 ????				      ENDIF
    120  0000 ????				      ENDM
    121  0000 ????
    122  0000 ????						; Perform a left rotation on the 16 bit number at
    123  0000 ????						; location VLA and store the result at location
    124  0000 ????						; RES. If VLA and RES are the same then the
    125  0000 ????						; operation is applied directly to the memory,
    126  0000 ????						; otherwise it is done in the accumulator.
    127  0000 ????						;
    128  0000 ????						; On exit: A = ??, X & Y are unchanged.
    129  0000 ????
    130  0000 ????				      MAC	_rol16
    131  0000 ????				      IF	{1} != {2}
    132  0000 ????				      LDA	{1}+0
    133  0000 ????				      ROL
    134  0000 ????				      STA	{2}+0
    135  0000 ????				      LDA	{1}+1
    136  0000 ????				      ROL
    137  0000 ????				      STA	{2}+1
    138  0000 ????				      ELSE
    139  0000 ????				      ROL	{1}+0
    140  0000 ????				      ROL	{1}+1
    141  0000 ????				      ENDIF
    142  0000 ????				      ENDM		;MACRO VLA,RES
    143  0000 ????
    144  0000 ????						; Calculate the logical OR of the two 16 bit
    145  0000 ????						; values at locations VLA and VLB. The result is
    146  0000 ????						; stored in location RES. If VLA and VLB are the
    147  0000 ????						; same the macro expands to a _XFR16.
    148  0000 ????						;
    149  0000 ????						; On exit: A = ??, X & Y are unchanged.
    150  0000 ????
    151  0000 ????				      MAC	_ora16
    152  0000 ????				      IF	{1} != {2}
    153  0000 ????				      LDA	{1}+0
    154  0000 ????				      ORA	{2}+0
    155  0000 ????				      STA	{3}+0
    156  0000 ????				      LDA	{1}+1
    157  0000 ????				      ORA	{2}+1
    158  0000 ????				      STA	{3}+1
    159  0000 ????				      ELSE
    160  0000 ????				      _XFR16	{1},{3}
    161  0000 ????				      ENDIF
    162  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    163  0000 ????
    164  0000 ????
    165  0000 ????
    166  0000 ????						; Transfer 2 bytes of memory from one location to
    167  0000 ????						; another using the accumulator. The order in
    168  0000 ????						; which the bytes are moved depends on the
    169  0000 ????						; relative positions of SRC and DST. If SRC and
    170  0000 ????						; DST are the same then no code is generated.
    171  0000 ????						;
    172  0000 ????						; On exit: A = ??, X & Y are unchanged.
    173  0000 ????
    174  0000 ????				      MAC	_xfr16
    175  0000 ????				      IF	{1} != {2}
    176  0000 ????				      IF	{1} > {2}
    177  0000 ????				      LDA	{1}+0
    178  0000 ????				      STA	{2}+0
    179  0000 ????				      LDA	{1}+1
    180  0000 ????				      STA	{2}+1
    181  0000 ????				      ELSE
    182  0000 ????				      LDA	{1}+1
    183  0000 ????				      STA	{2}+1
    184  0000 ????				      LDA	{1}+0
    185  0000 ????				      STA	{2}+0
    186  0000 ????				      ENDIF
    187  0000 ????				      ENDIF
    188  0000 ????				      ENDM		;MACRO SRC,DST
    189  0000 ????
    190  0000 ????
    191  0000 ????						; Calculate the exclusive OR of a 16 value at
    192  0000 ????						; location VLA with a constant value and
    193  0000 ????						; store the result at location RES.
    194  0000 ????						;
    195  0000 ????						; On exit: A = ??, X & Y are unchanged.
    196  0000 ????
    197  0000 ????				      MAC	_eor16i
    198  0000 ????				      LDA	{1}+0
    199  0000 ????				      EOR	<{2}
    200  0000 ????				      STA	{3}+0
    201  0000 ????				      LDA	{1}+1
    202  0000 ????				      EOR	>{2}
    203  0000 ????				      STA	{3}+1
    204  0000 ????				      ENDM		;MACRO VLA,NUM,RES
    205  0000 ????
    206  0000 ????				      MAC	_revbits
    207  0000 ????				      ldx	{1}+0
    208  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    209  0000 ????				      sta	{1}+0
    210  0000 ????				      ldx	{1}+1
    211  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    212  0000 ????				      sta	{1}+1
    213  0000 ????				      ENDM
    214  0000 ????
    215  0000 ????
    216  0000 ????						; Calculate the exclusive OR of the two 16 bit
    217  0000 ????						; values at locations VLA and VLB. The result is
    218  0000 ????						; stored in location RES. If VLA and VLB are the
    219  0000 ????						; same the macro expands to a _CLR16.
    220  0000 ????						;
    221  0000 ????						; On exit: A = ??, X & Y are unchanged.
    222  0000 ????
    223  0000 ????				      MAC	_eor16
    224  0000 ????				      IF	{1} != {2}
    225  0000 ????				      LDA	{1}+0
    226  0000 ????				      EOR	{2}+0
    227  0000 ????				      STA	{3}+0
    228  0000 ????				      LDA	{1}+1
    229  0000 ????				      EOR	{2}+1
    230  0000 ????				      STA	{3}+1
    231  0000 ????				      ELSE
    232  0000 ????				      _CLR16	{3}
    233  0000 ????				      ENDIF
    234  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    235  0000 ????
    236  0000 ????
    237  0000 ????
    238  0000 ????
    239  0000 ????						; Calculate the logical AND of the two 16 bit
    240  0000 ????						; values at locations VLA and VLB. The result is
    241  0000 ????						; stored in location RES. If VLA and VLB are the
    242  0000 ????						; same the macro expands to a _XFR16.
    243  0000 ????						;
    244  0000 ????						; On exit: A = ??, X & Y are unchanged.
    245  0000 ????
    246  0000 ????				      MAC	_and16
    247  0000 ????				      IF	{1} != {2}
    248  0000 ????				      LDA	{1}+0
    249  0000 ????				      AND	{2}+0
    250  0000 ????				      STA	{3}+0
    251  0000 ????				      LDA	{1}+1
    252  0000 ????				      AND	{2}+1
    253  0000 ????				      STA	{3}+1
    254  0000 ????				      ELSE
    255  0000 ????				      _XFR16	{1},{3}
    256  0000 ????				      ENDIF
    257  0000 ????				      ENDM		;MACRO VLA,VLB,RES
------- FILE kernel_18.asm
      5  0000 ????						;
      6  0000 ????						; This Episode on Youtube - https://youtu.be/KJYeQjJTkj4
      7  0000 ????						; Email - 8blit0@gmail.com
      8  0000 ????
      9  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
     10  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     11  0000 ????	       00 01	   SPEED      equ	1
     12 U008b ????				      seg.u	temp	; uninitialized segment
     13 U0080					      org	$80	; origin set at base of ram
     14 U0080
     15 U0080		       00 00	   c16_1      ds	2
     16 U0082		       00 00	   ghostColPtr ds	2	; Pointer to which color palette to use
     17 U0084		       00	   p0_x       ds	1
     18 U0085		       00	   p0_y       ds	1
     19 U0086		       00	   selectMode ds	1
     20 U0087		       00	   selDebounceOn ds	1
     21 U0088		       00	   selDebounceTm ds	1
     22 U0089
     23 U0089
     24 U0089		       00 00	   snd_on     ds	2	; 1 byte per audio channel - greater than 0 if sound is playing
     25 U008b
     26 U00aa ????				      seg.u	vars
     27 U00a0					      org	$A0
     28 U00a0
     29 U00a0		       00 00	   temp       ds	2
     30 U00a2		       00 00	   temp2      ds	2
     31 U00a4		       00 00	   scanline   ds	2	; 1 byte - current scanline
     32 U00a6		       00	   fcount     ds	1	; 1 byte - frame counter
     33 U00a7		       00 00	   t_	      ds	2	; 1 byte - temp
     34 U00a9		       00	   mod_1      ds	1	; 1 byte - modulo 1
     35 U00aa
     36 U00aa
     37  10000 ????				       seg	main	; start of main segment
     38  f000					      org	$F000
     39  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     41  f00b
     42  f00b		       a9 01		      lda	#1
     43  f00d		       85 0a		      sta	CTRLPF
     44  f00f
     45  f00f		       a9 1e		      lda	#$1E
     46  f011		       85 08		      sta	COLUPF
     47  f013
     48  f013		       a9 00		      lda	#$0	;$80  10000000
     49  f015		       85 80		      sta	c16_1
     50  f017
     51  f017		       a9 80		      lda	#$80	;$AA	  ; $55  10101010
     52  f019		       85 81		      sta	c16_1+1
     53  f01b
     54  f01b		       a9 01		      lda	#SPEED
     55  f01d		       85 a9		      sta	mod_1
     56  f01f
      0  f01f				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f01f		       a9 0e		      lda	#%1110
      2  f021		       85 02	   .VSLP1     sta	WSYNC
      3  f023		       85 00		      sta	VSYNC
      4  f025		       4a		      lsr
      5  f026		       d0 f9		      bne	.VSLP1
     58  f028							; -------- set timer -------------------------------
     59  f028							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     60  f028							; 2812 machine cycles / 64 clocks = 43.9375
     61  f028		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     62  f02a		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     63  f02d							; -------- do stuff  -------------------------------
     64  f02d
     65  f02d		       c6 a9		      dec	mod_1
     66  f02f		       d0 0a		      bne	cont
     67  f031		       a9 01		      lda	#SPEED
     68  f033		       85 a9		      sta	mod_1
      0  f035					      _INC16	c16_1
      1  f035		       e6 80		      INC	c16_1+0
      2  f037		       d0 02		      BNE	_DONE
      3  f039		       e6 81		      INC	c16_1+1
      4  f039		       f0 3b	   _DONE      EQU	*
     70  f03b							; lda c16_1+0
     71  f03b							; _ROL16 c16_1, temp
     72  f03b							; lda temp+0
     73  f03b							; sta COLUBK
     74  f03b
     75  f03b				   cont
     76  f03b		       20 de f0 	      jsr	snd_process
     77  f03e
     78  f03e
     79  f03e
     80  f03e
     81  f03e							; -------- wait ------------------------------------
     82  f03e		       ad 84 02 	      lda	INTIM	; check the timer
     83  f041		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     84  f043							; -------- done ------------------------------------
     85  f043		       a9 00		      lda	#0
     86  f045		       85 01		      sta	VBLANK
     87  f047
     88  f047		       a2 c0		      ldx	#PF_H
     89  f049		       86 a4		      stx	scanline
     90  f04b							; sta WSYNC	       ; primera linea visible
     91  f04b
     92  f04b							; sample = t * (( (t>>12) | (t>>8)) &(63&(t>>4)));
     93  f04b		       a9 bb		      lda	#$BB
     94  f04d		       85 08		      sta	COLUPF
     95  f04f				   render
     96  f04f
     97  f04f		       85 02		      sta	WSYNC
     98  f051
      0  f051					      _ADD16	c16_1, scanline, temp
      1  f051					      IF	c16_1 != scanline
      2  f051		       18		      CLC
      3  f052		       a5 80		      LDA	c16_1+0
      4  f054		       65 a4		      ADC	scanline+0
      5  f056		       85 a0		      STA	temp+0
      6  f058		       a5 81		      LDA	c16_1+1
      7  f05a		       65 a5		      ADC	scanline+1
      8  f05c		       85 a1		      STA	temp+1
      9  f05e				  -	      ELSE
     10  f05e				  -	      _ASL16	c16_1,temp
     11  f05e					      ENDIF
      0  f05e					      _ROL16	temp, temp
      1  f05e				  -	      IF	temp != temp
      2  f05e				  -	      LDA	temp+0
      3  f05e				  -	      ROL
      4  f05e				  -	      STA	temp+0
      5  f05e				  -	      LDA	temp+1
      6  f05e				  -	      ROL
      7  f05e				  -	      STA	temp+1
      8  f05e					      ELSE
      9  f05e		       26 a0		      ROL	temp+0
     10  f060		       26 a1		      ROL	temp+1
     11  f062					      ENDIF
      0  f062					      _ROL16	temp, temp
      1  f062				  -	      IF	temp != temp
      2  f062				  -	      LDA	temp+0
      3  f062				  -	      ROL
      4  f062				  -	      STA	temp+0
      5  f062				  -	      LDA	temp+1
      6  f062				  -	      ROL
      7  f062				  -	      STA	temp+1
      8  f062					      ELSE
      9  f062		       26 a0		      ROL	temp+0
     10  f064		       26 a1		      ROL	temp+1
     11  f066					      ENDIF
      0  f066					      _ROL16	temp, temp
      1  f066				  -	      IF	temp != temp
      2  f066				  -	      LDA	temp+0
      3  f066				  -	      ROL
      4  f066				  -	      STA	temp+0
      5  f066				  -	      LDA	temp+1
      6  f066				  -	      ROL
      7  f066				  -	      STA	temp+1
      8  f066					      ELSE
      9  f066		       26 a0		      ROL	temp+0
     10  f068		       26 a1		      ROL	temp+1
     11  f06a					      ENDIF
      0  f06a					      _ROL16	temp, temp
      1  f06a				  -	      IF	temp != temp
      2  f06a				  -	      LDA	temp+0
      3  f06a				  -	      ROL
      4  f06a				  -	      STA	temp+0
      5  f06a				  -	      LDA	temp+1
      6  f06a				  -	      ROL
      7  f06a				  -	      STA	temp+1
      8  f06a					      ELSE
      9  f06a		       26 a0		      ROL	temp+0
     10  f06c		       26 a1		      ROL	temp+1
     11  f06e					      ENDIF
    104  f06e
    105  f06e		       c6 a4		      dec	scanline
    106  f070
    107  f070							; --------------------------------
    108  f070
    109  f070		       85 02		      sta	WSYNC
    110  f072
    111  f072
    112  f072
      0  f072					      _ROL16	temp, temp
      1  f072				  -	      IF	temp != temp
      2  f072				  -	      LDA	temp+0
      3  f072				  -	      ROL
      4  f072				  -	      STA	temp+0
      5  f072				  -	      LDA	temp+1
      6  f072				  -	      ROL
      7  f072				  -	      STA	temp+1
      8  f072					      ELSE
      9  f072		       26 a0		      ROL	temp+0
     10  f074		       26 a1		      ROL	temp+1
     11  f076					      ENDIF
      0  f076					      _ROL16	temp, temp
      1  f076				  -	      IF	temp != temp
      2  f076				  -	      LDA	temp+0
      3  f076				  -	      ROL
      4  f076				  -	      STA	temp+0
      5  f076				  -	      LDA	temp+1
      6  f076				  -	      ROL
      7  f076				  -	      STA	temp+1
      8  f076					      ELSE
      9  f076		       26 a0		      ROL	temp+0
     10  f078		       26 a1		      ROL	temp+1
     11  f07a					      ENDIF
      0  f07a					      _ROL16	temp, temp
      1  f07a				  -	      IF	temp != temp
      2  f07a				  -	      LDA	temp+0
      3  f07a				  -	      ROL
      4  f07a				  -	      STA	temp+0
      5  f07a				  -	      LDA	temp+1
      6  f07a				  -	      ROL
      7  f07a				  -	      STA	temp+1
      8  f07a					      ELSE
      9  f07a		       26 a0		      ROL	temp+0
     10  f07c		       26 a1		      ROL	temp+1
     11  f07e					      ENDIF
    116  f07e							; _ROL16 temp, temp
    117  f07e
    118  f07e
      0  f07e					      _EOR16	temp, temp2, temp
      1  f07e					      IF	temp != temp2
      2  f07e		       a5 a0		      LDA	temp+0
      3  f080		       45 a2		      EOR	temp2+0
      4  f082		       85 a0		      STA	temp+0
      5  f084		       a5 a1		      LDA	temp+1
      6  f086		       45 a3		      EOR	temp2+1
      7  f088		       85 a1		      STA	temp+1
      8  f08a				  -	      ELSE
      9  f08a				  -	      _CLR16	temp
     10  f08a					      ENDIF
      0  f08a					      _AND16	temp, temp, temp
      1  f08a				  -	      IF	temp != temp
      2  f08a				  -	      LDA	temp+0
      3  f08a				  -	      AND	temp+0
      4  f08a				  -	      STA	temp+0
      5  f08a				  -	      LDA	temp+1
      6  f08a				  -	      AND	temp+1
      7  f08a				  -	      STA	temp+1
      8  f08a					      ELSE
      0  f08a					      _XFR16	temp,temp
      1  f08a				  -	      IF	temp != temp
      2  f08a				  -	      IF	temp > temp
      3  f08a				  -	      LDA	temp+0
      4  f08a				  -	      STA	temp+0
      5  f08a				  -	      LDA	temp+1
      6  f08a				  -	      STA	temp+1
      7  f08a				  -	      ELSE
      8  f08a				  -	      LDA	temp+1
      9  f08a				  -	      STA	temp+1
     10  f08a				  -	      LDA	temp+0
     11  f08a				  -	      STA	temp+0
     12  f08a				  -	      ENDIF
     13  f08a					      ENDIF
     10  f08a					      ENDIF
    121  f08a
    122  f08a		       a5 a1		      lda	temp+1
    123  f08c		       85 0e		      sta	PF1
    124  f08e
    125  f08e
    126  f08e		       c6 a4		      dec	scanline
    127  f090		       85 02		      sta	WSYNC
    128  f092
    129  f092							; lda scanline
    130  f092							; eor temp
    131  f092							; ; sta COLUPF
    132  f092
      0  f092					      _ROL16	temp, temp
      1  f092				  -	      IF	temp != temp
      2  f092				  -	      LDA	temp+0
      3  f092				  -	      ROL
      4  f092				  -	      STA	temp+0
      5  f092				  -	      LDA	temp+1
      6  f092				  -	      ROL
      7  f092				  -	      STA	temp+1
      8  f092					      ELSE
      9  f092		       26 a0		      ROL	temp+0
     10  f094		       26 a1		      ROL	temp+1
     11  f096					      ENDIF
      0  f096					      _ROL16	temp2, temp2
      1  f096				  -	      IF	temp2 != temp2
      2  f096				  -	      LDA	temp2+0
      3  f096				  -	      ROL
      4  f096				  -	      STA	temp2+0
      5  f096				  -	      LDA	temp2+1
      6  f096				  -	      ROL
      7  f096				  -	      STA	temp2+1
      8  f096					      ELSE
      9  f096		       26 a2		      ROL	temp2+0
     10  f098		       26 a3		      ROL	temp2+1
     11  f09a					      ENDIF
      0  f09a					      _ROL16	temp2, temp2
      1  f09a				  -	      IF	temp2 != temp2
      2  f09a				  -	      LDA	temp2+0
      3  f09a				  -	      ROL
      4  f09a				  -	      STA	temp2+0
      5  f09a				  -	      LDA	temp2+1
      6  f09a				  -	      ROL
      7  f09a				  -	      STA	temp2+1
      8  f09a					      ELSE
      9  f09a		       26 a2		      ROL	temp2+0
     10  f09c		       26 a3		      ROL	temp2+1
     11  f09e					      ENDIF
    136  f09e
    137  f09e
      0  f09e					      _EOR16	temp, temp2, temp
      1  f09e					      IF	temp != temp2
      2  f09e		       a5 a0		      LDA	temp+0
      3  f0a0		       45 a2		      EOR	temp2+0
      4  f0a2		       85 a0		      STA	temp+0
      5  f0a4		       a5 a1		      LDA	temp+1
      6  f0a6		       45 a3		      EOR	temp2+1
      7  f0a8		       85 a1		      STA	temp+1
      8  f0aa				  -	      ELSE
      9  f0aa				  -	      _CLR16	temp
     10  f0aa					      ENDIF
      0  f0aa					      _AND16	temp, temp, temp
      1  f0aa				  -	      IF	temp != temp
      2  f0aa				  -	      LDA	temp+0
      3  f0aa				  -	      AND	temp+0
      4  f0aa				  -	      STA	temp+0
      5  f0aa				  -	      LDA	temp+1
      6  f0aa				  -	      AND	temp+1
      7  f0aa				  -	      STA	temp+1
      8  f0aa					      ELSE
      0  f0aa					      _XFR16	temp,temp
      1  f0aa				  -	      IF	temp != temp
      2  f0aa				  -	      IF	temp > temp
      3  f0aa				  -	      LDA	temp+0
      4  f0aa				  -	      STA	temp+0
      5  f0aa				  -	      LDA	temp+1
      6  f0aa				  -	      STA	temp+1
      7  f0aa				  -	      ELSE
      8  f0aa				  -	      LDA	temp+1
      9  f0aa				  -	      STA	temp+1
     10  f0aa				  -	      LDA	temp+0
     11  f0aa				  -	      STA	temp+0
     12  f0aa				  -	      ENDIF
     13  f0aa					      ENDIF
     10  f0aa					      ENDIF
    140  f0aa
    141  f0aa
    142  f0aa		       c6 a4		      dec	scanline
    143  f0ac		       85 02		      sta	WSYNC
    144  f0ae
    145  f0ae
    146  f0ae		       a5 a0		      lda	temp+0
    147  f0b0		       85 0f		      sta	PF2
    148  f0b2
    149  f0b2
    150  f0b2
    151  f0b2
    152  f0b2		       c6 a4		      dec	scanline
    153  f0b4		       d0 99		      bne	render	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    154  f0b6
    155  f0b6
    156  f0b6							; --------------- DoneWithFrame	---------------
    157  f0b6
    158  f0b6							; ---- Overscan (30 scanlines)
    159  f0b6							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    160  f0b6							; 2280 machine cycles / 64 clocks = 35.625
    161  f0b6		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    162  f0b8		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    163  f0bb
    164  f0bb		       e6 a6		      inc	fcount
    165  f0bd
    166  f0bd
    167  f0bd		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    168  f0bf		       85 01		      sta	VBLANK	; turn off the beam
    169  f0c1
    170  f0c1							; -------- wait ------------------------------------
    171  f0c1		       ad 84 02 	      lda	INTIM	; check the timer
    172  f0c4		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    173  f0c6							; -------- done ------------------------------------
    174  f0c6
    175  f0c6
    176  f0c6		       4c 1f f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    177  f0c9
    178  f0c9							; --- END OF FRAME -------
    179  f0c9
    180  f0c9
    181  f0c9
    182  f0c9
    183  f0c9
    184  f0c9
    185  f0c9							; cues a sound to play. sets audio registers based on table lookup sndbank.
    186  f0c9							; parameters: x = channel (0|1), y = sound to play
    187  f0c9				   snd_play
    188  f0c9		       b9 b0 f1 	      lda	sndbank_type,y
    189  f0cc		       95 15		      sta	AUDC0,x	; audio control
    190  f0ce		       b9 b4 f1 	      lda	sndbank_vol,y
    191  f0d1		       95 19		      sta	AUDV0,x	; audio volume
    192  f0d3		       b9 b8 f1 	      lda	sndbank_pitch,y
    193  f0d6		       95 17		      sta	AUDF0,x	; audio frequence
    194  f0d8		       b9 bc f1 	      lda	sndbank_len,y
    195  f0db		       95 89		      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    196  f0dd		       60		      rts
    197  f0de
    198  f0de							; process sound channels to turn off volume when sound length counter runs out
    199  f0de				   snd_process
    200  f0de		       a2 01		      ldx	#1	; channel to process, start with channel 1
    201  f0e0				   snd_ch
    202  f0e0		       b5 89		      lda	snd_on,x	; get sound length counter for this channel
    203  f0e2		       f0 08		      beq	snd_done	; are we playing a sound? a>1
    204  f0e4		       d6 89		      dec	snd_on,x	; yes, decrese the sound length counter for this channel
    205  f0e6		       d0 04		      bne	snd_cont	; did we reach the end of the sound length?
    206  f0e8		       a9 00		      lda	#0	; yes
    207  f0ea		       95 19		      sta	AUDV0,x	; turn off the volume for this channel
    208  f0ec				   snd_done
    209  f0ec
    210  f0ec				   snd_cont
    211  f0ec		       ca		      dex		; do it again for channel 0
    212  f0ed		       f0 f1		      beq	snd_ch
    213  f0ef		       60		      rts
    214  f0f0
    215  f0f0
    216  f0f0
    217  f0f0		       a9 01	   checkInput lda	#%00000001	; (2) read reset input
    218  f0f2		       2c 82 02 	      bit	SWCHB
    219  f0f5		       d0 03		      bne	switch_noreset
    220  f0f7		       4c 00 f0 	      jmp	reset
    221  f0fa				   switch_noreset
    222  f0fa
    223  f0fa							; Game Select
    224  f0fa				   switch_select_chkbounced
    225  f0fa		       a5 87		      lda	selDebounceOn	; (2)
    226  f0fc		       d0 2a		      bne	switch_select_decrease	; if debounce already on then branch out
    227  f0fe
    228  f0fe		       a9 02		      lda	#%00000010
    229  f100		       2c 82 02 	      bit	SWCHB
    230  f103		       d0 2b		      bne	switch_select_end
    231  f105
    232  f105		       a9 01		      lda	#1
    233  f107		       85 87		      sta	selDebounceOn
    234  f109		       a9 28		      lda	#40
    235  f10b		       85 88		      sta	selDebounceTm
    236  f10d
    237  f10d		       06 86		      asl	selectMode
    238  f10f		       90 0f		      bcc	switch_select_solid
    239  f111		       e6 86		      inc	selectMode
    240  f113
    241  f113				   switch_select_stripped
    242  f113		       a9 aa		      lda	#%10101010
    243  f115		       85 0d		      sta	PF0
    244  f117		       85 0f		      sta	PF2
    245  f119		       a9 55		      lda	#%01010101
    246  f11b		       85 0e		      sta	PF1
    247  f11d		       4c 30 f1 	      jmp	switch_select_end
    248  f120
    249  f120				   switch_select_solid
    250  f120		       a9 00		      lda	#0
    251  f122		       85 0d		      sta	PF0
    252  f124		       85 0e		      sta	PF1
    253  f126		       85 0f		      sta	PF2
    254  f128
    255  f128				   switch_select_decrease
    256  f128		       c6 88		      dec	selDebounceTm
    257  f12a		       d0 04		      bne	switch_select_end
    258  f12c		       a9 00		      lda	#0
    259  f12e		       85 87		      sta	selDebounceOn
    260  f130				   switch_select_end
    261  f130
    262  f130
    263  f130							; B/W input
    264  f130		       a2 00		      ldx	#0
    265  f132		       a9 08		      lda	#%00001000
    266  f134		       2c 82 02 	      bit	SWCHB
    267  f137		       d0 02		      bne	switch_color
    268  f139		       a2 01		      ldx	#1
    269  f13b				   switch_color
    270  f13b		       bd cc f1 	      lda	ghost_pColLSB,x	; (5)
    271  f13e		       85 82		      sta	ghostColPtr	; (3)
    272  f140		       bd cd f1 	      lda	ghost_pColMSB,x	; (5)
    273  f143		       85 83		      sta	ghostColPtr+1	; (3)
    274  f145
    275  f145		       a0 02		      ldy	#2
    276  f147		       b1 82		      lda	(ghostColPtr),y
    277  f149		       85 09		      sta	COLUBK
    278  f14b
    279  f14b		       a0 03		      ldy	#3
    280  f14d		       b1 82		      lda	(ghostColPtr),y
    281  f14f		       85 08		      sta	COLUPF
    282  f151
    283  f151							; Player 0 Difficulty
    284  f151		       a2 00		      ldx	#0
    285  f153		       a9 40		      lda	#%01000000
    286  f155		       2c 82 02 	      bit	SWCHB
    287  f158		       d0 00		      bne	switch_P0Diff1
    288  f15a				   switch_P0Diff2		; Difficulty 2
    289  f15a				   switch_P0Diff1		; Difficulty 1
    290  f15a
    291  f15a							; Player 1 Difficulty
    292  f15a		       a2 00		      ldx	#0
    293  f15c		       a9 80		      lda	#%10000000
    294  f15e		       2c 82 02 	      bit	SWCHB
    295  f161		       d0 00		      bne	switch_P1Diff1
    296  f163				   switch_P1Diff2		; Difficulty 2
    297  f163				   switch_P1Diff1		; Difficulty 1
    298  f163
    299  f163							; Read button input
    300  f163		       a0 00		      ldy	#0	; color index set to default yellow
    301  f165		       24 0c		      bit	INPT4	; check D7 of INPT4
    302  f167		       30 02		      bmi	button_nopress	; branch if minus. D7 will me 0 is button is pressed
    303  f169		       a0 01		      ldy	#1
    304  f16b				   button_nopress
    305  f16b		       b1 82		      lda	(ghostColPtr),y
    306  f16d		       85 06		      sta	COLUP0	; set the P0 color
    307  f16f
    308  f16f							; read direction input
    309  f16f		       a6 84		      ldx	p0_x
    310  f171		       a9 80		      lda	#%10000000	; check for right movement
    311  f173		       2c 80 02 	      bit	SWCHA
    312  f176		       d0 09		      bne	pos_noright
    313  f178		       e0 98		      cpx	#152
    314  f17a		       b0 05		      bcs	pos_noright
    315  f17c		       e8		      inx
    316  f17d		       a9 08		      lda	#%00001000
    317  f17f		       85 0b		      sta	REFP0
    318  f181				   pos_noright
    319  f181		       a9 40		      lda	#%01000000	; check left movement
    320  f183		       2c 80 02 	      bit	SWCHA
    321  f186		       d0 09		      bne	pos_noleft
    322  f188		       e0 01		      cpx	#1
    323  f18a		       90 05		      bcc	pos_noleft
    324  f18c		       ca		      dex
    325  f18d		       a9 00		      lda	#0
    326  f18f		       85 0b		      sta	REFP0
    327  f191				   pos_noleft
    328  f191		       86 84		      stx	p0_x
    329  f193
    330  f193		       a6 85		      ldx	p0_y
    331  f195		       a9 20		      lda	#%00100000
    332  f197		       2c 80 02 	      bit	SWCHA
    333  f19a		       d0 05		      bne	pos_nodown
    334  f19c		       e0 4a		      cpx	#74
    335  f19e		       90 01		      bcc	pos_nodown
    336  f1a0		       ca		      dex
    337  f1a1				   pos_nodown
    338  f1a1		       a9 10		      lda	#%00010000
    339  f1a3		       2c 80 02 	      bit	SWCHA
    340  f1a6		       d0 05		      bne	pos_noup
    341  f1a8		       e0 ff		      cpx	#255
    342  f1aa		       b0 01		      bcs	pos_noup
    343  f1ac		       e8		      inx
    344  f1ad				   pos_noup
    345  f1ad		       86 85		      stx	p0_y
    346  f1af
    347  f1af		       60		      rts
    348  f1b0
    349  f1b0
    350  f1b0							; define sounds, bounce, reset, backward, forward
    351  f1b0				   sndbank_type
    352  f1b0		       0c 02 06 06	      .byte.b	$0C, $02, $06, $06
    353  f1b4				   sndbank_vol
    354  f1b4		       02 06 04 04	      .byte.b	$02, $06, $04, $04
    355  f1b8				   sndbank_pitch
    356  f1b8		       0d 03 09 03	      .byte.b	$0D, $03, $09, $03
    357  f1bc				   sndbank_len
    358  f1bc		       01 08 03 03	      .byte.b	$01, $08, $03, $03
    359  f1c0
    360  f1c0
    361  f1c0				   colors
    362  f1c0		       36 48 76 b4*	      .byte.b	$36, $48, $76, $b4, $ea, $4c, $8a, $a4	; Player 0-7 colors
    363  f1c8
    364  f1c8
    365  f1c8
    366  f1c8		       1e	   ghost_color .byte.b	#$1E	; Bright Yellow
    367  f1c9		       42		      .byte.b	#$42	; Dark Red
    368  f1ca		       98		      .byte.b	#$98	; Mid Blue
    369  f1cb		       ae		      .byte.b	#$AE	; Bright Blue
    370  f1cc
    371  f1cc		       c8	   ghost_pColLSB .byte.b	<ghost_color	; LSB
    372  f1cd		       f1	   ghost_pColMSB .byte.b	>ghost_color	; MSB
    373  f1ce
    374  f1ce
    375  f1ce				   reversedOrderBits
    376  f1ce		       00 80 40 c0*	      .byte.b	$00, $80, $40, $C0, $20, $A0, $60, $E0
    377  f1d6		       10 90 50 d0*	      .byte.b	$10, $90, $50, $D0, $30, $B0, $70, $F0
    378  f1de		       08 88 48 c8*	      .byte.b	$08, $88, $48, $C8, $28, $A8, $68, $E8
    379  f1e6		       18 98 58 d8*	      .byte.b	$18, $98, $58, $D8, $38, $B8, $78, $F8
    380  f1ee		       04 84 44 c4*	      .byte.b	$04, $84, $44, $C4, $24, $A4, $64, $E4
    381  f1f6		       14 94 54 d4*	      .byte.b	$14, $94, $54, $D4, $34, $B4, $74, $F4
    382  f1fe		       0c 8c 4c cc*	      .byte.b	$0C, $8C, $4C, $CC, $2C, $AC, $6C, $EC
    383  f206		       1c 9c 5c dc*	      .byte.b	$1C, $9C, $5C, $DC, $3C, $BC, $7C, $FC
    384  f20e		       02 82 42 c2*	      .byte.b	$02, $82, $42, $C2, $22, $A2, $62, $E2
    385  f216		       12 92 52 d2*	      .byte.b	$12, $92, $52, $D2, $32, $B2, $72, $F2
    386  f21e		       0a 8a 4a ca*	      .byte.b	$0A, $8A, $4A, $CA, $2A, $AA, $6A, $EA
    387  f226		       1a 9a 5a da*	      .byte.b	$1A, $9A, $5A, $DA, $3A, $BA, $7A, $FA
    388  f22e		       06 86 46 c6*	      .byte.b	$06, $86, $46, $C6, $26, $A6, $66, $E6
    389  f236		       16 96 56 d6*	      .byte.b	$16, $96, $56, $D6, $36, $B6, $76, $F6
    390  f23e		       0e 8e 4e ce*	      .byte.b	$0E, $8E, $4E, $CE, $2E, $AE, $6E, $EE
    391  f246		       1e 9e 5e de*	      .byte.b	$1E, $9E, $5E, $DE, $3E, $BE, $7E, $FE
    392  f24e		       01 81 41 c1*	      .byte.b	$01, $81, $41, $C1, $21, $A1, $61, $E1
    393  f256		       11 91 51 d1*	      .byte.b	$11, $91, $51, $D1, $31, $B1, $71, $F1
    394  f25e		       09 89 49 c9*	      .byte.b	$09, $89, $49, $C9, $29, $A9, $69, $E9
    395  f266		       19 99 59 d9*	      .byte.b	$19, $99, $59, $D9, $39, $B9, $79, $F9
    396  f26e		       05 85 45 c5*	      .byte.b	$05, $85, $45, $C5, $25, $A5, $65, $E5
    397  f276		       15 95 55 d5*	      .byte.b	$15, $95, $55, $D5, $35, $B5, $75, $F5
    398  f27e		       0d 8d 4d cd*	      .byte.b	$0D, $8D, $4D, $CD, $2D, $AD, $6D, $ED
    399  f286		       1d 9d 5d dd*	      .byte.b	$1D, $9D, $5D, $DD, $3D, $BD, $7D, $FD
    400  f28e		       03 83 43 c3*	      .byte.b	$03, $83, $43, $C3, $23, $A3, $63, $E3
    401  f296		       13 93 53 d3*	      .byte.b	$13, $93, $53, $D3, $33, $B3, $73, $F3
    402  f29e		       0b 8b 4b cb*	      .byte.b	$0B, $8B, $4B, $CB, $2B, $AB, $6B, $EB
    403  f2a6		       1b 9b 5b db*	      .byte.b	$1B, $9B, $5B, $DB, $3B, $BB, $7B, $FB
    404  f2ae		       07 87 47 c7*	      .byte.b	$07, $87, $47, $C7, $27, $A7, $67, $E7
    405  f2b6		       17 97 57 d7*	      .byte.b	$17, $97, $57, $D7, $37, $B7, $77, $F7
    406  f2be		       0f 8f 4f cf*	      .byte.b	$0F, $8F, $4F, $CF, $2F, $AF, $6F, $EF
    407  f2c6		       1f 9f 5f df*	      .byte.b	$1F, $9F, $5F, $DF, $3F, $BF, $7F, $FF
    408  f2ce
    409  f2ce
    410  ffd0					      org	$FFD0
    411  ffd0		       00 00 00 00	      .word.w	$0000,$0000
    412  ffd4		       a1 b3 77 10	      .word.w	$B3A1, $1077
    413  ffd8		       00 00 20 24	      .word.w	$0000,$2420
    414  ffdc		       00 00 00 00	      .word.w	$0000,$0000
    415  ffe0
    416  fffa					      org	$FFFA
    417  fffa
    418  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    419  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    420  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    421  10000
    422  10000
    423  10000
    424  10000
