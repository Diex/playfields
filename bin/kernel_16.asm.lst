------- FILE kernel_16.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_16.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE kernel_16.asm
      4  0000 ????						;
      5  0000 ????						; This Episode on Youtube - https://youtu.be/KJYeQjJTkj4
      6  0000 ????						; Email - 8blit0@gmail.com
      7  0000 ????
      8  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
      9  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     10  0000 ????	       00 01	   SPEED      equ	1
     11 U0093 ????				      seg.u	temp	; uninitialized segment
     12 U0080					      org	$80	; origin set at base of ram
     13 U0080
     14 U0080							; up to 9F
     15 U0080		       00 00	   c16_1      ds	2
     16 U0082							; c24_1	   ds 3
     17 U0082
     18 U0082		       00 00 00 00*params     ds	8
     19 U008a		       00 00 00    plfys      ds	3
     20 U008d		       00 00	   revbits    ds	2
     21 U008f		       00 00	   ghostColPtr ds	2	; Pointer to which color palette to use
     22 U0091		       00 00	   snd_on     ds	2	; 1 byte per audio channel - greater than 0 if sound is playing
     23 U0093
     24 U00a9 ????				      seg.u	vars
     25 U00a0					      org	$A0
     26 U00a0
     27 U00a0		       00 00 00 00 temp       ds	4
     28 U00a4		       00	   scanline   ds	1	; 1 byte - current scanline
     29 U00a5		       00	   fcount     ds	1	; 1 byte - frame counter
     30 U00a6		       00 00	   t_	      ds	2	; 1 byte - temp
     31 U00a8		       00	   mod_1      ds	1	; 1 byte - modulo 1
     32 U00a9
     33 U00a9
     34  10000 ????				       seg	main	; start of main segment
     35  f000					      org	$F000
     36  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     38  f00b
     39  f00b		       a9 01		      lda	#1
     40  f00d		       85 0a		      sta	CTRLPF
     41  f00f
     42  f00f		       a9 1e		      lda	#$1E
     43  f011		       85 08		      sta	COLUPF
     44  f013
     45  f013		       a9 00		      lda	#0	;$80  10000000
     46  f015		       85 80		      sta	c16_1
     47  f017
     48  f017		       a9 00		      lda	#0	;$AA	  ; $55  10101010
     49  f019		       85 81		      sta	c16_1+1
     50  f01b
     51  f01b		       a5 01		      lda	SPEED
     52  f01d		       85 a8		      sta	mod_1
     53  f01f
      0  f01f				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f01f		       a9 0e		      lda	#%1110
      2  f021		       85 02	   .VSLP1     sta	WSYNC
      3  f023		       85 00		      sta	VSYNC
      4  f025		       4a		      lsr
      5  f026		       d0 f9		      bne	.VSLP1
     55  f028							; -------- set timer -------------------------------
     56  f028							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     57  f028							; 2812 machine cycles / 64 clocks = 43.9375
     58  f028		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     59  f02a		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     60  f02d							; -------- do stuff  -------------------------------
     61  f02d
     62  f02d							; dec mod_1
     63  f02d							; bne .+10
     64  f02d							; lda SPEED
     65  f02d							; sta mod_1
     66  f02d		       20 a5 f0 	      jsr	inc16
     67  f030		       a5 80		      lda	c16_1+0
     68  f032		       20 9b f0 	      jsr	ror16
     69  f035
     70  f035							; process the sound channels to turn off volume when counter runs out
     71  f035		       20 cb f0 	      jsr	snd_process
     72  f038
     73  f038
     74  f038
     75  f038
     76  f038							; -------- wait ------------------------------------
     77  f038		       ad 84 02 	      lda	INTIM	; check the timer
     78  f03b		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     79  f03d							; -------- done ------------------------------------
     80  f03d		       a9 00		      lda	#0
     81  f03f		       85 01		      sta	VBLANK
     82  f041
     83  f041		       a2 c0		      ldx	#PF_H
     84  f043		       86 a4		      stx	scanline
     85  f045
     86  f045
     87  f045		       85 02		      sta	WSYNC	; primera linea visible
     88  f047
     89  f047
     90  f047		       85 02	   render     sta	WSYNC	; no lo cuento en la snl
     91  f049
     92  f049
     93  f049
     94  f049
     95  f049		       20 91 f0 	      jsr	kernel2
     96  f04c		       85 0e		      sta	PF1
     97  f04e		       c6 a4		      dec	scanline	; (2)
     98  f050
     99  f050
    100  f050
    101  f050
    102  f050		       85 02		      sta	WSYNC
    103  f052
    104  f052		       20 8c f0 	      jsr	kernel1
    105  f055		       20 b1 f0 	      jsr	reverseBits
    106  f058
    107  f058		       85 0f		      sta	PF2
    108  f05a
    109  f05a		       c6 a4		      dec	scanline	; (2)
    110  f05c
    111  f05c		       d0 e9		      bne	render	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    112  f05e
    113  f05e							; --------------- DoneWithFrame	---------------
    114  f05e
    115  f05e							; ---- Overscan (30 scanlines)
    116  f05e							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    117  f05e							; 2280 machine cycles / 64 clocks = 35.625
    118  f05e		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    119  f060		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    120  f063
    121  f063
    122  f063
    123  f063
    124  f063		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    125  f065		       85 01		      sta	VBLANK	; turn off the beam
    126  f067
    127  f067							; -------- wait ------------------------------------
    128  f067		       ad 84 02 	      lda	INTIM	; check the timer
    129  f06a		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    130  f06c							; -------- done ------------------------------------
    131  f06c
    132  f06c							; Read button input
    133  f06c		       a0 01		      ldy	#1	; color index set to default yellow
    134  f06e		       24 0c		      bit	INPT4	; check D7 of INPT4
    135  f070		       30 09		      bmi	button_nopress	; branch if minus. D7 will me 0 is button is pressed
    136  f072		       a0 02		      ldy	#2
    137  f074		       a2 00		      ldx	#0	; channel 0
    138  f076		       a0 00		      ldy	#0	; sound parameter index from sndbank_*
    139  f078		       20 b6 f0 	      jsr	snd_play	; call the subroutine to load the audio registers
    140  f07b
    141  f07b				   button_nopress
    142  f07b		       b1 8f		      lda	(ghostColPtr),y
    143  f07d		       85 09		      sta	COLUBK	; set the P0 color
    144  f07f
    145  f07f				   switch_color
    146  f07f		       ad f9 f0 	      lda	ghost_pColLSB
    147  f082		       85 8f		      sta	ghostColPtr	; (3)
    148  f084		       ad fa f0 	      lda	ghost_pColMSB
    149  f087		       85 90		      sta	ghostColPtr+1	; (3)
    150  f089
    151  f089		       4c 1f f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    152  f08c
    153  f08c							; --- END OF FRAME -------
    154  f08c
    155  f08c
    156  f08c				   kernel1
    157  f08c
    158  f08c		       a5 81		      lda	c16_1+1
    159  f08e
    160  f08e		       85 a0		      sta	temp
    161  f090
    162  f090
    163  f090		       60		      rts
    164  f091
    165  f091				   kernel2
    166  f091
    167  f091		       a5 80		      lda	c16_1+0
    168  f093
    169  f093		       85 a0		      sta	temp
    170  f095
    171  f095
    172  f095		       60		      rts
    173  f096
    174  f096
    175  f096							; Shift a 16bit value by one place left (e.g. multiply by two)
    176  f096		       06 82	   asl16      ASL	params+0	;Shift the LSB
    177  f098		       26 83		      ROL	params+1	;Rotate the MSB
    178  f09a		       60		      rts
    179  f09b
    180  f09b		       4a	   ror16      lsr
    181  f09c		       90 00		      bcc	*+2	; or *+3 for 16-bit mode
    182  f09e		       09 80		      ora	#$80	; or #$8000 for 16-bit mode
    183  f0a0		       60		      rts
    184  f0a1
    185  f0a1		       c9 80	   rol16      cmp	#$80
    186  f0a3		       2a		      rol
    187  f0a4		       60		      rts
    188  f0a5
    189  f0a5
    190  f0a5		       18	   inc16      clc
    191  f0a6		       a5 81		      lda	c16_1+1
    192  f0a8		       69 01		      adc	#1
    193  f0aa		       85 81		      sta	c16_1+1
    194  f0ac		       90 02		      bcc	.+4
    195  f0ae		       e6 80		      inc	c16_1+0
    196  f0b0		       60		      rts
    197  f0b1
    198  f0b1				   reverseBits
    199  f0b1		       aa		      tax
    200  f0b2		       bd fb f0 	      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    201  f0b5		       60		      rts
    202  f0b6
    203  f0b6							; cues a sound to play. sets audio registers based on table lookup sndbank.
    204  f0b6							; parameters: x = channel (0|1), y = sound to play
    205  f0b6				   snd_play
    206  f0b6		       b9 dd f0 	      lda	sndbank_type,y
    207  f0b9		       95 15		      sta	AUDC0,x	; audio control
    208  f0bb		       b9 e1 f0 	      lda	sndbank_vol,y
    209  f0be		       95 19		      sta	AUDV0,x	; audio volume
    210  f0c0		       b9 e5 f0 	      lda	sndbank_pitch,y
    211  f0c3		       95 17		      sta	AUDF0,x	; audio frequence
    212  f0c5		       b9 e9 f0 	      lda	sndbank_len,y
    213  f0c8		       95 91		      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    214  f0ca		       60		      rts
    215  f0cb
    216  f0cb							; process sound channels to turn off volume when sound length counter runs out
    217  f0cb				   snd_process
    218  f0cb		       a2 01		      ldx	#1	; channel to process, start with channel 1
    219  f0cd				   snd_ch
    220  f0cd		       b5 91		      lda	snd_on,x	; get sound length counter for this channel
    221  f0cf		       f0 08		      beq	snd_done	; are we playing a sound? a>1
    222  f0d1		       d6 91		      dec	snd_on,x	; yes, decrese the sound length counter for this channel
    223  f0d3		       d0 04		      bne	snd_cont	; did we reach the end of the sound length?
    224  f0d5		       a9 00		      lda	#0	; yes
    225  f0d7		       95 19		      sta	AUDV0,x	; turn off the volume for this channel
    226  f0d9				   snd_done
    227  f0d9
    228  f0d9				   snd_cont
    229  f0d9		       ca		      dex		; do it again for channel 0
    230  f0da		       f0 f1		      beq	snd_ch
    231  f0dc		       60		      rts
    232  f0dd
    233  f0dd
    234  f0dd							; define sounds, bounce, reset, backward, forward
    235  f0dd				   sndbank_type
    236  f0dd		       0c 02 06 06	      .byte.b	$0C, $02, $06, $06
    237  f0e1				   sndbank_vol
    238  f0e1		       02 06 04 04	      .byte.b	$02, $06, $04, $04
    239  f0e5				   sndbank_pitch
    240  f0e5		       0d 03 09 03	      .byte.b	$0D, $03, $09, $03
    241  f0e9				   sndbank_len
    242  f0e9		       01 08 03 03	      .byte.b	$01, $08, $03, $03
    243  f0ed
    244  f0ed
    245  f0ed				   colors
    246  f0ed		       36 48 76 b4*	      .byte.b	$36, $48, $76, $b4, $ea, $4c, $8a, $a4	; Player 0-7 colors
    247  f0f5
    248  f0f5
    249  f0f5
    250  f0f5		       1e	   ghost_color .byte.b	#$1E	; Bright Yellow
    251  f0f6		       42		      .byte.b	#$42	; Dark Red
    252  f0f7		       98		      .byte.b	#$98	; Mid Blue
    253  f0f8		       ae		      .byte.b	#$AE	; Bright Blue
    254  f0f9
    255  f0f9		       f5	   ghost_pColLSB .byte.b	<ghost_color	; LSB
    256  f0fa		       f0	   ghost_pColMSB .byte.b	>ghost_color	; MSB
    257  f0fb
    258  f0fb
    259  f0fb				   reversedOrderBits
    260  f0fb		       00 80 40 c0*	      .byte.b	$00, $80, $40, $C0, $20, $A0, $60, $E0
    261  f103		       10 90 50 d0*	      .byte.b	$10, $90, $50, $D0, $30, $B0, $70, $F0
    262  f10b		       08 88 48 c8*	      .byte.b	$08, $88, $48, $C8, $28, $A8, $68, $E8
    263  f113		       18 98 58 d8*	      .byte.b	$18, $98, $58, $D8, $38, $B8, $78, $F8
    264  f11b		       04 84 44 c4*	      .byte.b	$04, $84, $44, $C4, $24, $A4, $64, $E4
    265  f123		       14 94 54 d4*	      .byte.b	$14, $94, $54, $D4, $34, $B4, $74, $F4
    266  f12b		       0c 8c 4c cc*	      .byte.b	$0C, $8C, $4C, $CC, $2C, $AC, $6C, $EC
    267  f133		       1c 9c 5c dc*	      .byte.b	$1C, $9C, $5C, $DC, $3C, $BC, $7C, $FC
    268  f13b		       02 82 42 c2*	      .byte.b	$02, $82, $42, $C2, $22, $A2, $62, $E2
    269  f143		       12 92 52 d2*	      .byte.b	$12, $92, $52, $D2, $32, $B2, $72, $F2
    270  f14b		       0a 8a 4a ca*	      .byte.b	$0A, $8A, $4A, $CA, $2A, $AA, $6A, $EA
    271  f153		       1a 9a 5a da*	      .byte.b	$1A, $9A, $5A, $DA, $3A, $BA, $7A, $FA
    272  f15b		       06 86 46 c6*	      .byte.b	$06, $86, $46, $C6, $26, $A6, $66, $E6
    273  f163		       16 96 56 d6*	      .byte.b	$16, $96, $56, $D6, $36, $B6, $76, $F6
    274  f16b		       0e 8e 4e ce*	      .byte.b	$0E, $8E, $4E, $CE, $2E, $AE, $6E, $EE
    275  f173		       1e 9e 5e de*	      .byte.b	$1E, $9E, $5E, $DE, $3E, $BE, $7E, $FE
    276  f17b		       01 81 41 c1*	      .byte.b	$01, $81, $41, $C1, $21, $A1, $61, $E1
    277  f183		       11 91 51 d1*	      .byte.b	$11, $91, $51, $D1, $31, $B1, $71, $F1
    278  f18b		       09 89 49 c9*	      .byte.b	$09, $89, $49, $C9, $29, $A9, $69, $E9
    279  f193		       19 99 59 d9*	      .byte.b	$19, $99, $59, $D9, $39, $B9, $79, $F9
    280  f19b		       05 85 45 c5*	      .byte.b	$05, $85, $45, $C5, $25, $A5, $65, $E5
    281  f1a3		       15 95 55 d5*	      .byte.b	$15, $95, $55, $D5, $35, $B5, $75, $F5
    282  f1ab		       0d 8d 4d cd*	      .byte.b	$0D, $8D, $4D, $CD, $2D, $AD, $6D, $ED
    283  f1b3		       1d 9d 5d dd*	      .byte.b	$1D, $9D, $5D, $DD, $3D, $BD, $7D, $FD
    284  f1bb		       03 83 43 c3*	      .byte.b	$03, $83, $43, $C3, $23, $A3, $63, $E3
    285  f1c3		       13 93 53 d3*	      .byte.b	$13, $93, $53, $D3, $33, $B3, $73, $F3
    286  f1cb		       0b 8b 4b cb*	      .byte.b	$0B, $8B, $4B, $CB, $2B, $AB, $6B, $EB
    287  f1d3		       1b 9b 5b db*	      .byte.b	$1B, $9B, $5B, $DB, $3B, $BB, $7B, $FB
    288  f1db		       07 87 47 c7*	      .byte.b	$07, $87, $47, $C7, $27, $A7, $67, $E7
    289  f1e3		       17 97 57 d7*	      .byte.b	$17, $97, $57, $D7, $37, $B7, $77, $F7
    290  f1eb		       0f 8f 4f cf*	      .byte.b	$0F, $8F, $4F, $CF, $2F, $AF, $6F, $EF
    291  f1f3		       1f 9f 5f df*	      .byte.b	$1F, $9F, $5F, $DF, $3F, $BF, $7F, $FF
    292  f1fb
    293  f1fb
    294  ffd0					      org	$FFD0
    295  ffd0		       00 00 00 00	      .word.w	$0000,$0000
    296  ffd4		       a1 b3 77 10	      .word.w	$B3A1, $1077
    297  ffd8		       00 00 20 24	      .word.w	$0000,$2420
    298  ffdc		       00 00 00 00	      .word.w	$0000,$0000
    299  ffe0
    300  fffa					      org	$FFFA
    301  fffa
    302  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    303  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    304  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    305  10000
    306  10000
    307  10000
    308  10000
