------- FILE kernel_01.asm LEVEL 1 PASS 1
      1  0000					      processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 1
      0  0000 ????				      include	"vcs.h"	;
      1  0000 ????						; VCS.H
      2  0000 ????						; Version 1.05, 13/November/2003
      3  0000 ????
      4  0000 ????	       00 69	   VERSION_VCS =	105
      5  0000 ????
      6  0000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines hardware registers and memory mapping for the
     11  0000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  0000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  0000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  0000 ????						; with your views.  Please contribute, if you think you can improve this
     19  0000 ????						; file!
     20  0000 ????						;
     21  0000 ????						; Latest Revisions...
     22  0000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  0000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  0000 ????						;			    This will allow conditional code to verify VCS.H being
     25  0000 ????						;			    used for code assembly.
     26  0000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  0000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  0000 ????						;			 mirrored reading/writing differences.	This is more a
     29  0000 ????						;			 readability issue, and binary compatibility with disassembled
     30  0000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  0000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  0000 ????						;			 which was broken by the use of segments in this file, as
     33  0000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  0000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  0000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  0000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  0000 ????						;						   it is safe to leave it undefined, and the base address will
     38  0000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  0000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  0000 ????						;			  - register definitions are now generated through assignment
     41  0000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  0000 ????						;			    address architecture.
     43  0000 ????						; 1.0	22/MAR/2003		Initial release
     44  0000 ????
     45  0000 ????
     46  0000 ????						;-------------------------------------------------------------------------------
     47  0000 ????
     48  0000 ????						; TIA_BASE_ADDRESS
     49  0000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  0000 ????						; Normally 0, the base address should (externally, before including this file)
     51  0000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  0000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  0000 ????						; < $40 as a bankswitch.
     54  0000 ????
     55  0000 ????				      IFNCONST	TIA_BASE_ADDRESS
     56  0000 ????	       00 00	   TIA_BASE_ADDRESS =	0
     57  0000 ????				      ENDIF
     58  0000 ????
     59  0000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  0000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  0000 ????						; *OR* by declaring the label before including this file, eg:
     62  0000 ????						; TIA_BASE_ADDRESS = $40
     63  0000 ????						;   include "vcs.h"
     64  0000 ????
     65  0000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  0000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  0000 ????						; for the mirrored ROM hardware registers.
     68  0000 ????
     69  0000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  0000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  0000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  0000 ????
     73  0000 ????				      IFNCONST	TIA_BASE_READ_ADDRESS
     74  0000 ????	       00 00	   TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  0000 ????				      ENDIF
     76  0000 ????
     77  0000 ????				      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  0000 ????	       00 00	   TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  0000 ????				      ENDIF
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????
     83 U0000 ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U0000 ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0000 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_01.asm
------- FILE macro.h LEVEL 2 PASS 1
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE kernel_01.asm
      4  0000 ????						;
      5  0000 ????						; This Episode on Youtube - https://youtu.be/KJYeQjJTkj4
      6  0000 ????						; Email - 8blit0@gmail.com
      7  0000 ????						;
      8  0000 ????						; PIA off the shelf 6532 Peripheral Interface Adaptor
      9  0000 ????						; Programmable timers, 128 bytes RAM
     10  0000 ????						; Two 8-bit parallel I/O ports
     11  0000 ????						;
     12  0000 ????						; PIA uses the same clock as 6502. 1 PIA cycle per 1 Machine Cycle.
     13  0000 ????						; Can be set to 1 of 4 counting intervals. 1, 8, 64, 1024
     14  0000 ????						; Select how many intervals from 1 to 255.
     15  0000 ????						; Valu decrements at each interval
     16  0000 ????						;
     17  0000 ????						; write value to the desired interval setting
     18  0000 ????						; 1 clock   TIM1T
     19  0000 ????						; 8 clocks  TIM8T
     20  0000 ????						; 64 clocks TIM64T
     21  0000 ????						; 1024 clocks T1024T
     22  0000 ????						;
     23  0000 ????						; Read the timers after loaded at INTIM
     24  0000 ????						;
     25  0000 ????						; When it reaches 0, it will hold 0 for one interval, then the counter will flip to FF and decrements
     26  0000 ????						; each clock cycle to allow the programmer determine how long ago the timer zeroed out.
     27  0000 ????
     28  0000 ????
     29  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
     30  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     31  0000 ????
     32 U0000 ????				      seg.u	temp	; uninitialized segment
     33 U0080					      org	$80	; origin set at base of ram
     34 U0080							; 16 bytes of uninitialized memory
     35 U0080		       00	   temp       ds	1
     36 U0000 ????				      seg.u	vars	; uninitialized segment
     37 U0090					      org	$90	; origin set at base of ram
     38 U0090
     39 U0090		       00	   my16bit_lsb ds	1	; 1 byte - 16 bit counter lsb
     40 U0091		       00	   my16bit_msb ds	1	; 1 byte - 16 bit counter msb
     41 U0092		       00	   scanline   ds	1	; 1 byte - current scanline
     42 U0093		       00	   fcount     ds	1	; 1 byte - frame counter
     43 U0094
     44  0000 ????				      seg	main	; start of main segment
     45  f000					      org	$F000
     46  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     48  f00b
      0  f00b				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f00b		       a9 0e		      lda	#%1110
      2  f00d		       85 02	   .VSLP1     sta	WSYNC
      3  f00f		       85 00		      sta	VSYNC
      4  f011		       4a		      lsr
      5  f012		       d0 f9		      bne	.VSLP1
     50  f014							; -------- set timer -------------------------------
     51  f014							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     52  f014							; 2812 machine cycles / 64 clocks = 43.9375
     53  f014		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     54  f016		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     55  f019							; -------- do stuff  -------------------------------
     56  f019
     57  f019							; lda #0		     ; (2) set D1 to 0 to end VBLANK
     58  f019							; sta WSYNC	       ; (3) wait for end of scanline
     59  f019							; sta COLUBK	       ;(3)
     60  f019							; ldy #PF_H
     61  f019
     62  f019							; -------- wait ------------------------------------
     63  f019		       ad 84 02 	      lda	INTIM	; check the timer
     64  f01c		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     65  f01e							; -------- done ------------------------------------
     66  f01e		       a9 00		      lda	#0
     67  f020		       85 02		      sta	WSYNC
     68  f022		       85 01		      sta	VBLANK
     69  f024
     70  f024
     71  f024		       a0 c0		      ldy	#PF_H
     72  f026		       85 02	   kernel     sta	WSYNC	; no lo cuento en la snl
     73  f028
     74  f028		       84 80		      sty	temp	; (3)
     75  f02a
     76  f02a		       a5 80		      lda	temp	; (3)
     77  f02c		       85 09		      sta	COLUBK	;(3)
      0  f02e					      sleep	4	; (4)
      1  f02e				   .CYCLES    SET	4
      2  f02e
      3  f02e				  -	      IF	.CYCLES < 2
      4  f02e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f02e				  -	      ERR
      6  f02e					      ENDIF
      7  f02e
      8  f02e				  -	      IF	.CYCLES & 1
      9  f02e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f02e				  -	      nop	0
     11  f02e				  -	      ELSE
     12  f02e				  -	      bit	VSYNC
     13  f02e				  -	      ENDIF
     14  f02e				  -.CYCLES    SET	.CYCLES - 3
     15  f02e					      ENDIF
     16  f02e
     17  f02e					      REPEAT	.CYCLES / 2
     18  f02e		       ea		      nop
     17  f02e					      REPEND
     18  f02f		       ea		      nop
     19  f030					      REPEND
     79  f030
     80  f030		       85 09		      sta	COLUBK	;(3)
     81  f032		       2a		      rol		; (2)
      0  f033					      sleep	4	; (4)
      1  f033				   .CYCLES    SET	4
      2  f033
      3  f033				  -	      IF	.CYCLES < 2
      4  f033				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f033				  -	      ERR
      6  f033					      ENDIF
      7  f033
      8  f033				  -	      IF	.CYCLES & 1
      9  f033				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f033				  -	      nop	0
     11  f033				  -	      ELSE
     12  f033				  -	      bit	VSYNC
     13  f033				  -	      ENDIF
     14  f033				  -.CYCLES    SET	.CYCLES - 3
     15  f033					      ENDIF
     16  f033
     17  f033					      REPEAT	.CYCLES / 2
     18  f033		       ea		      nop
     17  f033					      REPEND
     18  f034		       ea		      nop
     19  f035					      REPEND
     83  f035
     84  f035		       85 09		      sta	COLUBK	;(3)
     85  f037		       2a		      rol		; (2)
      0  f038					      sleep	4	; (4)
      1  f038				   .CYCLES    SET	4
      2  f038
      3  f038				  -	      IF	.CYCLES < 2
      4  f038				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f038				  -	      ERR
      6  f038					      ENDIF
      7  f038
      8  f038				  -	      IF	.CYCLES & 1
      9  f038				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f038				  -	      nop	0
     11  f038				  -	      ELSE
     12  f038				  -	      bit	VSYNC
     13  f038				  -	      ENDIF
     14  f038				  -.CYCLES    SET	.CYCLES - 3
     15  f038					      ENDIF
     16  f038
     17  f038					      REPEAT	.CYCLES / 2
     18  f038		       ea		      nop
     17  f038					      REPEND
     18  f039		       ea		      nop
     19  f03a					      REPEND
     87  f03a
     88  f03a		       85 09		      sta	COLUBK	;(3)
     89  f03c		       2a		      rol		; (2)
      0  f03d					      sleep	4	; (4)
      1  f03d				   .CYCLES    SET	4
      2  f03d
      3  f03d				  -	      IF	.CYCLES < 2
      4  f03d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f03d				  -	      ERR
      6  f03d					      ENDIF
      7  f03d
      8  f03d				  -	      IF	.CYCLES & 1
      9  f03d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f03d				  -	      nop	0
     11  f03d				  -	      ELSE
     12  f03d				  -	      bit	VSYNC
     13  f03d				  -	      ENDIF
     14  f03d				  -.CYCLES    SET	.CYCLES - 3
     15  f03d					      ENDIF
     16  f03d
     17  f03d					      REPEAT	.CYCLES / 2
     18  f03d		       ea		      nop
     17  f03d					      REPEND
     18  f03e		       ea		      nop
     19  f03f					      REPEND
     91  f03f
     92  f03f		       85 09		      sta	COLUBK	;(3)
     93  f041		       2a		      rol		; (2)
      0  f042					      sleep	4	; (4)
      1  f042				   .CYCLES    SET	4
      2  f042
      3  f042				  -	      IF	.CYCLES < 2
      4  f042				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f042				  -	      ERR
      6  f042					      ENDIF
      7  f042
      8  f042				  -	      IF	.CYCLES & 1
      9  f042				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f042				  -	      nop	0
     11  f042				  -	      ELSE
     12  f042				  -	      bit	VSYNC
     13  f042				  -	      ENDIF
     14  f042				  -.CYCLES    SET	.CYCLES - 3
     15  f042					      ENDIF
     16  f042
     17  f042					      REPEAT	.CYCLES / 2
     18  f042		       ea		      nop
     17  f042					      REPEND
     18  f043		       ea		      nop
     19  f044					      REPEND
     95  f044
     96  f044		       85 09		      sta	COLUBK	;(3)
     97  f046		       2a		      rol		; (2)
      0  f047					      sleep	4	; (4)
      1  f047				   .CYCLES    SET	4
      2  f047
      3  f047				  -	      IF	.CYCLES < 2
      4  f047				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f047				  -	      ERR
      6  f047					      ENDIF
      7  f047
      8  f047				  -	      IF	.CYCLES & 1
      9  f047				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f047				  -	      nop	0
     11  f047				  -	      ELSE
     12  f047				  -	      bit	VSYNC
     13  f047				  -	      ENDIF
     14  f047				  -.CYCLES    SET	.CYCLES - 3
     15  f047					      ENDIF
     16  f047
     17  f047					      REPEAT	.CYCLES / 2
     18  f047		       ea		      nop
     17  f047					      REPEND
     18  f048		       ea		      nop
     19  f049					      REPEND
     99  f049
    100  f049
    101  f049		       85 09		      sta	COLUBK	;(3)
    102  f04b							; ror		       ; (2)
    103  f04b
    104  f04b
    105  f04b		       ea		      nop		; (2)
    106  f04c		       ea		      nop		; (2)
    107  f04d
    108  f04d
    109  f04d
    110  f04d
    111  f04d		       88		      dey		; (2)
    112  f04e		       d0 d6		      bne	kernel	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    113  f050
    114  f050							; --------------- DoneWithFrame	---------------
    115  f050							;clear out the playfield registers for obvious reasons
    116  f050							; ---- Overscan (30 scanlines)
    117  f050							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    118  f050							; 2280 machine cycles / 64 clocks = 35.625
    119  f050
    120  f050		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    121  f052		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    122  f055
    123  f055		       a9 00		      lda	#0
    124  f057		       85 0f		      sta	PF2
    125  f059		       85 0d		      sta	PF0
    126  f05b		       85 0e		      sta	PF1
    127  f05d
    128  f05d		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    129  f05f		       85 01		      sta	VBLANK	; turn off the beam
    130  f061
    131  f061							; lda #0
    132  f061							; sta COLUBK
    133  f061
    134  f061
    135  f061							; -------- wait ------------------------------------
    136  f061		       ad 84 02 	      lda	INTIM	; check the timer
    137  f064		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    138  f066							; -------- done ------------------------------------
    139  f066
    140  f066		       4c 0b f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    141  f069
    142  f069
    143  fffa					      org	$FFFA
    144  fffa
    145  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    146  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    147  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    148  10000
    149  10000
    150  10000
    151  10000
    152  10000
    153  10000
    154  10000
    155  10000
    156  10000
    157  10000
