------- FILE kernel_07.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_07.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE kernel_07.asm
      4  0000 ????						;
      5  0000 ????						; This Episode on Youtube - https://youtu.be/KJYeQjJTkj4
      6  0000 ????						; Email - 8blit0@gmail.com
      7  0000 ????
      8  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
      9  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     10  0000 ????
     11 U0092 ????				      seg.u	temp	; uninitialized segment
     12 U0080					      org	$80	; origin set at base of ram
     13 U0080							; up to 9F
     14 U0080		       00 00 00    c24_1      ds	3
     15 U0083		       00 00 00 00*params     ds	8
     16 U008b		       00 00	   c16_1      ds	2
     17 U008d
     18 U008d		       00 00 00    plfys      ds	3
     19 U0090		       00 00	   revbits    ds	2
     20 U0092
     21 U0092
     22 U00a9 ????				      seg.u	vars
     23 U00a0					      org	$A0
     24 U00a0
     25 U00a0		       00 00 00 00 temp       ds	4
     26 U00a4		       00	   scanline   ds	1	; 1 byte - current scanline
     27 U00a5		       00	   fcount     ds	1	; 1 byte - frame counter
     28 U00a6		       00 00	   t_	      ds	2	; 1 byte - temp
     29 U00a8		       00	   mod_1      ds	1	; 1 byte - modulo 1
     30 U00a9
     31 U00a9
     32  10000 ????				       seg	main	; start of main segment
     33  f000					      org	$F000
     34  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     36  f00b
     37  f00b		       a9 01		      lda	#1
     38  f00d		       85 0a		      sta	CTRLPF
     39  f00f
     40  f00f		       a9 1e		      lda	#$1E
     41  f011		       85 08		      sta	COLUPF
     42  f013
     43  f013							; lda #255
     44  f013							; sta c24_1+1
     45  f013
      0  f013				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f013		       a9 0e		      lda	#%1110
      2  f015		       85 02	   .VSLP1     sta	WSYNC
      3  f017		       85 00		      sta	VSYNC
      4  f019		       4a		      lsr
      5  f01a		       d0 f9		      bne	.VSLP1
     47  f01c							; -------- set timer -------------------------------
     48  f01c							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     49  f01c							; 2812 machine cycles / 64 clocks = 43.9375
     50  f01c		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     51  f01e		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     52  f021							; -------- do stuff  -------------------------------
     53  f021							; jsr add
     54  f021
     55  f021							; -------- wait ------------------------------------
     56  f021		       ad 84 02 	      lda	INTIM	; check the timer
     57  f024		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     58  f026							; -------- done ------------------------------------
     59  f026
     60  f026		       a9 00		      lda	#0
     61  f028
     62  f028		       85 01		      sta	VBLANK
     63  f02a
     64  f02a		       a9 c0		      lda	#PF_H
     65  f02c		       85 a4		      sta	scanline	; 1 byte - current scanline
     66  f02e
     67  f02e							; ldy #4
     68  f02e
     69  f02e		       20 85 f0 	      jsr	inc24
     70  f031
     71  f031
     72  f031		       85 02		      sta	WSYNC	; primera linea visible
     73  f033
     74  f033
     75  f033		       ad a8 f0 	      lda	colors+5
     76  f036		       85 08		      sta	COLUPF
     77  f038
     78  f038
     79  f038
     80  f038
     81  f038
     82  f038
     83  f038		       85 02	   kernel     sta	WSYNC	; no lo cuento en la snl
     84  f03a		       c6 a4		      dec	scanline	; (2)
     85  f03c		       85 02		      sta	WSYNC
     86  f03e		       c6 a4		      dec	scanline	; (2)
     87  f040		       85 02		      sta	WSYNC
     88  f042		       c6 a4		      dec	scanline	; (2)
     89  f044		       85 02		      sta	WSYNC
     90  f046							; ((t<<1)^((t<<1)+(t>>7)&t>>12))|t>>(4-(1^7&(t>>19)))|t>>7
     91  f046							; PF0
     92  f046
     93  f046							; jsr reverseBits
     94  f046							; rol
     95  f046							; rol
     96  f046		       a5 81		      lda	c24_1+1
     97  f048		       65 a4		      adc	scanline
     98  f04a		       2a		      rol
     99  f04b		       85 a0		      sta	temp
    100  f04d		       a5 81		      lda	c24_1+1
    101  f04f		       2a		      rol
    102  f050		       45 a0		      eor	temp
    103  f052		       85 a0		      sta	temp
    104  f054
    105  f054		       a5 81		      lda	c24_1+1
    106  f056		       6a		      ror
    107  f057		       6a		      ror
    108  f058		       6a		      ror
    109  f059		       6a		      ror
    110  f05a		       6a		      ror
    111  f05b		       65 a0		      adc	temp
    112  f05d		       85 0f		      sta	PF2
    113  f05f
    114  f05f							; ; PF1
    115  f05f							; lda c24_1+2
    116  f05f							; rol
    117  f05f							; eor #15
    118  f05f							; eor scanline
    119  f05f							; sta PF1
    120  f05f
    121  f05f							; ; PF2
    122  f05f							; lda c24_1
    123  f05f							; ror
    124  f05f							; eor #7
    125  f05f							; jsr reverseBits
    126  f05f							; eor scanline
    127  f05f							; sta PF0
    128  f05f
    129  f05f							; ldy #0
    130  f05f							; lda plfys,y
    131  f05f							; sta PF0
    132  f05f
    133  f05f							; iny
    134  f05f							; lda plfys,y
    135  f05f							; sta PF1
    136  f05f
    137  f05f							; iny
    138  f05f							; lda plfys,y
    139  f05f							; sta PF2
    140  f05f
    141  f05f
    142  f05f		       c6 a4		      dec	scanline	; (2)
    143  f061		       d0 d5		      bne	kernel	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    144  f063
    145  f063							; --------------- DoneWithFrame	---------------
    146  f063
    147  f063							; ---- Overscan (30 scanlines)
    148  f063							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    149  f063							; 2280 machine cycles / 64 clocks = 35.625
    150  f063		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    151  f065		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    152  f068
    153  f068
    154  f068
    155  f068
    156  f068		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    157  f06a		       85 01		      sta	VBLANK	; turn off the beam
    158  f06c
    159  f06c							; -------- wait ------------------------------------
    160  f06c		       ad 84 02 	      lda	INTIM	; check the timer
    161  f06f		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    162  f071							; -------- done ------------------------------------
    163  f071
    164  f071		       4c 13 f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    165  f074
    166  f074
    167  f074
    168  f074
    169  f074							; Shift a 16bit value by one place left (e.g. multiply by two)
    170  f074		       06 83	   asl16      ASL	params+0	;Shift the LSB
    171  f076		       26 84		      ROL	params+1	;Rotate the MSB
    172  f078		       60		      rts
    173  f079
    174  f079
    175  f079		       18	   inc16      clc
    176  f07a		       a5 8c		      lda	c16_1+1
    177  f07c		       69 01		      adc	#1
    178  f07e		       85 8c		      sta	c16_1+1
    179  f080		       90 01		      bcc	.+3
    180  f082		       e6 8b		      inc	c16_1+0
    181  f084							; ok
    182  f084		       60		      rts
    183  f085
    184  f085		       18	   inc24      clc
    185  f086		       a5 82		      lda	c24_1+2
    186  f088		       69 20		      adc	#32
    187  f08a		       85 82		      sta	c24_1+2
    188  f08c		       90 0f		      bcc	ok
    189  f08e		       18		      clc
    190  f08f		       a5 81		      lda	c24_1+1
    191  f091		       69 01		      adc	#1
    192  f093		       85 81		      sta	c24_1+1
    193  f095		       90 06		      bcc	ok
    194  f097		       a5 80		      lda	c24_1+0
    195  f099		       69 01		      adc	#1
    196  f09b		       85 80		      sta	c24_1+0
    197  f09d		       60	   ok	      rts
    198  f09e
    199  f09e
    200  f09e
    201  f09e				   reverseBits
    202  f09e		       aa		      tax
    203  f09f		       bd ab f0 	      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    204  f0a2		       60		      rts
    205  f0a3
    206  f0a3				   colors
    207  f0a3		       36 48 76 b4*	      .byte.b	$36, $48, $76, $b4, $ea, $4c, $8a, $a4	; Player 0-7 colors
    208  f0ab
    209  f0ab
    210  f0ab				   reversedOrderBits
    211  f0ab		       00 00 80 00*	      .word.w	$00, $80, $40, $c0, $20, $a0, $60, $e0
    212  f0bb		       10 00 90 00*	      .word.w	$10, $90, $50, $d0, $30, $b0, $70, $f0
    213  f0cb		       08 00 88 00*	      .word.w	$08, $88, $48, $c8, $28, $a8, $68, $e8
    214  f0db		       18 00 98 00*	      .word.w	$18, $98, $58, $d8, $38, $b8, $78, $f8
    215  f0eb		       04 00 84 00*	      .word.w	$04, $84, $44, $c4, $24, $a4, $64, $e4
    216  f0fb		       14 00 94 00*	      .word.w	$14, $94, $54, $d4, $34, $b4, $74, $f4
    217  f10b		       0c 00 8c 00*	      .word.w	$0c, $8c, $4c, $cc, $2c, $ac, $6c, $ec
    218  f11b		       1c 00 9c 00*	      .word.w	$1c, $9c, $5c, $dc, $3c, $bc, $7c, $fc
    219  f12b		       02 00 82 00*	      .word.w	$02, $82, $42, $c2, $22, $a2, $62, $e2
    220  f13b		       12 00 92 00*	      .word.w	$12, $92, $52, $d2, $32, $b2, $72, $f2
    221  f14b		       0a 00 8a 00*	      .word.w	$0a, $8a, $4a, $ca, $2a, $aa, $6a, $ea
    222  f15b		       1a 00 9a 00*	      .word.w	$1a, $9a, $5a, $da, $3a, $ba, $7a, $fa
    223  f16b		       06 00 86 00*	      .word.w	$06, $86, $46, $c6, $26, $a6, $66, $e6
    224  f17b		       16 00 96 00*	      .word.w	$16, $96, $56, $d6, $36, $b6, $76, $f6
    225  f18b		       0e 00 8e 00*	      .word.w	$0e, $8e, $4e, $ce, $2e, $ae, $6e, $ee
    226  f19b		       1e 00 9e 00*	      .word.w	$1e, $9e, $5e, $de, $3e, $be, $7e, $fe
    227  f1ab		       01 00 81 00*	      .word.w	$01, $81, $41, $c1, $21, $a1, $61, $e1
    228  f1bb		       11 00 91 00*	      .word.w	$11, $91, $51, $d1, $31, $b1, $71, $f1
    229  f1cb		       09 00 89 00*	      .word.w	$09, $89, $49, $c9, $29, $a9, $69, $e9
    230  f1db		       19 00 99 00*	      .word.w	$19, $99, $59, $d9, $39, $b9, $79, $f9
    231  f1eb		       05 00 85 00*	      .word.w	$05, $85, $45, $c5, $25, $a5, $65, $e5
    232  f1fb		       15 00 95 00*	      .word.w	$15, $95, $55, $d5, $35, $b5, $75, $f5
    233  f20b		       0d 00 8d 00*	      .word.w	$0d, $8d, $4d, $cd, $2d, $ad, $6d, $ed
    234  f21b		       1d 00 9d 00*	      .word.w	$1d, $9d, $5d, $dd, $3d, $bd, $7d, $fd
    235  f22b		       03 00 83 00*	      .word.w	$03, $83, $43, $c3, $23, $a3, $63, $e3
    236  f23b		       13 00 93 00*	      .word.w	$13, $93, $53, $d3, $33, $b3, $73, $f3
    237  f24b		       0b 00 8b 00*	      .word.w	$0b, $8b, $4b, $cb, $2b, $ab, $6b, $eb
    238  f25b		       1b 00 9b 00*	      .word.w	$1b, $9b, $5b, $db, $3b, $bb, $7b, $fb
    239  f26b		       07 00 87 00*	      .word.w	$07, $87, $47, $c7, $27, $a7, $67, $e7
    240  f27b		       17 00 97 00*	      .word.w	$17, $97, $57, $d7, $37, $b7, $77, $f7
    241  f28b		       0f 00 8f 00*	      .word.w	$0f, $8f, $4f, $cf, $2f, $af, $6f, $ef
    242  f29b		       1f 00 9f 00*	      .word.w	$1f, $9f, $5f, $df, $3f, $bf, $7f, $ff
    243  f2ab
    244  f2ab
    245  fffa					      org	$FFFA
    246  fffa
    247  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    248  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    249  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    250  10000
    251  10000
    252  10000
    253  10000
