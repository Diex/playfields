------- FILE kernel_19.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_19.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						;-------------------------------------------------------------------------------
    164  0000 ????						; shortcut
    165  0000 ????
    166  0000 ????				      MAC	_nextline
    167  0000 ????				      dec	scanline
    168  0000 ????				      sta	WSYNC
    169  0000 ????				      ENDM
    170  0000 ????
    171  0000 ????				      MAC	_get_color
    172  0000 ????
    173  0000 ????				      lda	{1}
    174  0000 ????				      adc	{2}
    175  0000 ????				      lsr
    176  0000 ????				      lsr
    177  0000 ????				      lsr
    178  0000 ????				      lsr
    179  0000 ????				      tax
    180  0000 ????				      lda	{3},x
    181  0000 ????				      ENDM
    182  0000 ????
    183  0000 ????						; ldx channel
    184  0000 ????						; {1}	   = type
    185  0000 ????						; {2}	   = pitch
    186  0000 ????				      MAC	_snd_play
    187  0000 ????						; lda sndbank_type,y
    188  0000 ????				      ldx	#0
    189  0000 ????				      lda	{1}
    190  0000 ????				      sta	AUDC0,x	; audio control
    191  0000 ????				      lda	#3
    192  0000 ????				      sta	AUDV0,x	; audio volume (0 a 15)
    193  0000 ????
    194  0000 ????				      lda	{2}
    195  0000 ????				      sta	AUDF0,x	; audio frequence (0 a 31 - divisiones del clock)
    196  0000 ????
    197  0000 ????				      lda	#20
    198  0000 ????				      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    199  0000 ????				      ENDM
    200  0000 ????
    201  0000 ????						; EOF
------- FILE kernel_19.asm
------- FILE macros2.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macros2.h"
      1  0000 ????				      MAC	_clr16
      2  0000 ????				      LDA	#0
      3  0000 ????				      STA	{1}+0
      4  0000 ????				      STA	{1}+1
      5  0000 ????				      ENDM
      6  0000 ????
      7  0000 ????
      8  0000 ????						;------------------------------------------------
      9  0000 ????						; Arithmetic Operations
     10  0000 ????						;------------------------------------------------
     11  0000 ????
     12  0000 ????						; Increment the 16 bit value at location MEM
     13  0000 ????						; by one.
     14  0000 ????						;
     15  0000 ????						; On exit: A, X & Y are unchanged.
     16  0000 ????
     17  0000 ????				      MAC	_inc16
     18  0000 ????				      INC	{1}+0
     19  0000 ????				      BNE	_DONE
     20  0000 ????				      INC	{1}+1
     21  0000 ????			   _DONE      EQU	*
     22  0000 ????				      ENDM		;MACRO MEM
     23  0000 ????
     24  0000 ????						; Add two 16 bit numbers together and store the
     25  0000 ????						; result in another memory location. RES may be
     26  0000 ????						; the same as either VLA or VLB.
     27  0000 ????						;
     28  0000 ????						; On exit: A = ??, X & Y are unchanged.
     29  0000 ????
     30  0000 ????				      MAC	_add16
     31  0000 ????				      IF	{1} != {2}
     32  0000 ????				      CLC
     33  0000 ????				      LDA	{1}+0
     34  0000 ????				      ADC	{2}+0
     35  0000 ????				      STA	{3}+0
     36  0000 ????				      LDA	{1}+1
     37  0000 ????				      ADC	{2}+1
     38  0000 ????				      STA	{3}+1
     39  0000 ????				      ELSE
     40  0000 ????				      _ASL16	{1},{3}
     41  0000 ????				      ENDIF
     42  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     43  0000 ????
     44  0000 ????
     45  0000 ????
     46  0000 ????
     47  0000 ????						; Calculate the 16 bit product of two 16 bit
     48  0000 ????						; unsigned numbers. Any overflow during the
     49  0000 ????						; calculation is lost. The number at location
     50  0000 ????						; VLA is destroyed.
     51  0000 ????						;
     52  0000 ????						; On exit: A = ??, X = $FF, Y is unchanged.
     53  0000 ????
     54  0000 ????				      MAC	_mul16
     55  0000 ????				      _CLR16	{3}
     56  0000 ????				      LDX	#16
     57  0000 ????			   ._LOOP
     58  0000 ????				      _ASL16	{3},{3}
     59  0000 ????				      _ASL16	{1},{1}
     60  0000 ????				      BCC	._NEXT
     61  0000 ????				      _ADD16	{2},{3},{3}
     62  0000 ????			   ._NEXT
     63  0000 ????				      DEX
     64  0000 ????				      BPL	._LOOP
     65  0000 ????						; Count cycles for macro calls
     66  0000 ????						; _CLR16: 6 cycles
     67  0000 ????						; _ASL16: 6 cycles
     68  0000 ????						; _ASL16: 6 cycles
     69  0000 ????						; _ADD16: 12 cycles
     70  0000 ????						; Total cycles: 30 cycles
     71  0000 ????				      ENDM		;MACRO VLA,VLB,RES
     72  0000 ????
     73  0000 ????
     74  0000 ????						;------------------------------------------------
     75  0000 ????						; Shift Operations
     76  0000 ????						;------------------------------------------------
     77  0000 ????
     78  0000 ????						; Perform an arithmetic shift left on the 16 bit
     79  0000 ????						; number at location VLA and store the result at
     80  0000 ????						; location RES. If VLA and RES are the same then
     81  0000 ????						; the operation is applied directly to the memory
     82  0000 ????						; otherwise it is done in the accumulator.
     83  0000 ????						;
     84  0000 ????						; On exit: A = ??, X & Y are unchanged.
     85  0000 ????
     86  0000 ????				      MAC	_asl16
     87  0000 ????				      IF	{1} != {2}
     88  0000 ????				      LDA	{1}+0
     89  0000 ????				      ASL
     90  0000 ????				      STA	{2}+0
     91  0000 ????				      LDA	{1}+1
     92  0000 ????				      ROL
     93  0000 ????				      STA	{2}+1
     94  0000 ????				      ELSE
     95  0000 ????				      ASL	{1}+0
     96  0000 ????				      ROL	{1}+1
     97  0000 ????				      ENDIF
     98  0000 ????				      ENDM		;MACRO VLA,RES
     99  0000 ????
    100  0000 ????						; Perform a right rotation on the 16 bit number
    101  0000 ????						; at location VLA and store the result at
    102  0000 ????						; location RES. If VLA and RES are the same then
    103  0000 ????						; the operation is applied directly to the memory
    104  0000 ????						; otherwise it is done in the accumulator.
    105  0000 ????						;
    106  0000 ????						; On exit: A = ??, X & Y are unchanged.
    107  0000 ????
    108  0000 ????				      MAC	_ror16
    109  0000 ????				      IF	{1} != {2}
    110  0000 ????				      LDA	{1}+1
    111  0000 ????				      ROR
    112  0000 ????				      STA	{2}+1
    113  0000 ????				      LDA	{1}+0
    114  0000 ????				      ROR
    115  0000 ????				      STA	{2}+0
    116  0000 ????				      ELSE
    117  0000 ????				      ROR	{1}+1
    118  0000 ????				      ROR	{1}+0
    119  0000 ????				      ENDIF
    120  0000 ????				      ENDM
    121  0000 ????
    122  0000 ????						; Perform a left rotation on the 16 bit number at
    123  0000 ????						; location VLA and store the result at location
    124  0000 ????						; RES. If VLA and RES are the same then the
    125  0000 ????						; operation is applied directly to the memory,
    126  0000 ????						; otherwise it is done in the accumulator.
    127  0000 ????						;
    128  0000 ????						; On exit: A = ??, X & Y are unchanged.
    129  0000 ????
    130  0000 ????				      MAC	_rol16
    131  0000 ????				      IF	{1} != {2}
    132  0000 ????				      LDA	{1}+0
    133  0000 ????				      ROL
    134  0000 ????				      STA	{2}+0
    135  0000 ????				      LDA	{1}+1
    136  0000 ????				      ROL
    137  0000 ????				      STA	{2}+1
    138  0000 ????				      ELSE
    139  0000 ????				      ROL	{1}+0
    140  0000 ????				      ROL	{1}+1
    141  0000 ????				      ENDIF
    142  0000 ????				      ENDM		;MACRO VLA,RES
    143  0000 ????
    144  0000 ????						; Calculate the logical OR of the two 16 bit
    145  0000 ????						; values at locations VLA and VLB. The result is
    146  0000 ????						; stored in location RES. If VLA and VLB are the
    147  0000 ????						; same the macro expands to a _XFR16.
    148  0000 ????						;
    149  0000 ????						; On exit: A = ??, X & Y are unchanged.
    150  0000 ????
    151  0000 ????				      MAC	_ora16
    152  0000 ????				      IF	{1} != {2}
    153  0000 ????				      LDA	{1}+0
    154  0000 ????				      ORA	{2}+0
    155  0000 ????				      STA	{3}+0
    156  0000 ????				      LDA	{1}+1
    157  0000 ????				      ORA	{2}+1
    158  0000 ????				      STA	{3}+1
    159  0000 ????				      ELSE
    160  0000 ????				      _XFR16	{1},{3}
    161  0000 ????				      ENDIF
    162  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    163  0000 ????
    164  0000 ????
    165  0000 ????
    166  0000 ????				      MAC	_rev8
    167  0000 ????				      ldx	{1}+0
    168  0000 ????				      lda	{2},x	; Load the value to be reversed from memory
    169  0000 ????				      ENDM		;reverseBits:
    170  0000 ????
    171  0000 ????						; Transfer 2 bytes of memory from one location to
    172  0000 ????						; another using the accumulator. The order in
    173  0000 ????						; which the bytes are moved depends on the
    174  0000 ????						; relative positions of SRC and DST. If SRC and
    175  0000 ????						; DST are the same then no code is generated.
    176  0000 ????						;
    177  0000 ????						; On exit: A = ??, X & Y are unchanged.
    178  0000 ????
    179  0000 ????				      MAC	_xfr16
    180  0000 ????				      IF	{1} != {2}
    181  0000 ????				      IF	{1} > {2}
    182  0000 ????				      LDA	{1}+0
    183  0000 ????				      STA	{2}+0
    184  0000 ????				      LDA	{1}+1
    185  0000 ????				      STA	{2}+1
    186  0000 ????				      ELSE
    187  0000 ????				      LDA	{1}+1
    188  0000 ????				      STA	{2}+1
    189  0000 ????				      LDA	{1}+0
    190  0000 ????				      STA	{2}+0
    191  0000 ????				      ENDIF
    192  0000 ????				      ENDIF
    193  0000 ????				      ENDM		;MACRO SRC,DST
    194  0000 ????
    195  0000 ????
    196  0000 ????						; Calculate the exclusive OR of a 16 value at
    197  0000 ????						; location VLA with a constant value and
    198  0000 ????						; store the result at location RES.
    199  0000 ????						;
    200  0000 ????						; On exit: A = ??, X & Y are unchanged.
    201  0000 ????
    202  0000 ????				      MAC	_eor16i
    203  0000 ????				      LDA	{1}+0
    204  0000 ????				      EOR	<{2}
    205  0000 ????				      STA	{3}+0
    206  0000 ????				      LDA	{1}+1
    207  0000 ????				      EOR	>{2}
    208  0000 ????				      STA	{3}+1
    209  0000 ????				      ENDM		;MACRO VLA,NUM,RES
    210  0000 ????
    211  0000 ????				      MAC	_revbits
    212  0000 ????				      ldx	{1}+0
    213  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    214  0000 ????				      sta	{1}+0
    215  0000 ????				      ldx	{1}+1
    216  0000 ????				      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    217  0000 ????				      sta	{1}+1
    218  0000 ????				      ENDM
    219  0000 ????
    220  0000 ????
    221  0000 ????						; Calculate the exclusive OR of the two 16 bit
    222  0000 ????						; values at locations VLA and VLB. The result is
    223  0000 ????						; stored in location RES. If VLA and VLB are the
    224  0000 ????						; same the macro expands to a _CLR16.
    225  0000 ????						;
    226  0000 ????						; On exit: A = ??, X & Y are unchanged.
    227  0000 ????
    228  0000 ????				      MAC	_eor16
    229  0000 ????				      IF	{1} != {2}
    230  0000 ????				      LDA	{1}+0
    231  0000 ????				      EOR	{2}+0
    232  0000 ????				      STA	{3}+0
    233  0000 ????				      LDA	{1}+1
    234  0000 ????				      EOR	{2}+1
    235  0000 ????				      STA	{3}+1
    236  0000 ????				      ELSE
    237  0000 ????				      _CLR16	{3}
    238  0000 ????				      ENDIF
    239  0000 ????				      ENDM		;MACRO VLA,VLB,RES
    240  0000 ????
    241  0000 ????
    242  0000 ????
    243  0000 ????
    244  0000 ????						; Calculate the logical AND of the two 16 bit
    245  0000 ????						; values at locations VLA and VLB. The result is
    246  0000 ????						; stored in location RES. If VLA and VLB are the
    247  0000 ????						; same the macro expands to a _XFR16.
    248  0000 ????						;
    249  0000 ????						; On exit: A = ??, X & Y are unchanged.
    250  0000 ????
    251  0000 ????				      MAC	_and16
    252  0000 ????				      IF	{1} != {2}
    253  0000 ????				      LDA	{1}+0
    254  0000 ????				      AND	{2}+0
    255  0000 ????				      STA	{3}+0
    256  0000 ????				      LDA	{1}+1
    257  0000 ????				      AND	{2}+1
    258  0000 ????				      STA	{3}+1
    259  0000 ????				      ELSE
    260  0000 ????				      _XFR16	{1},{3}
    261  0000 ????				      ENDIF
    262  0000 ????				      ENDM		;MACRO VLA,VLB,RES
------- FILE kernel_19.asm
      5  0000 ????						;
      6  0000 ????						; This Episode on Youtube - https://youtu.be/KJYeQjJTkj4
      7  0000 ????						; Email - 8blit0@gmail.com
      8  0000 ????
      9  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
     10  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     11  0000 ????	       00 10	   SPEED      equ	16
     12 U008b ????				      seg.u	temp	; uninitialized segment
     13 U0080					      org	$80	; origin set at base of ram
     14 U0080
     15 U0080		       00 00	   c16_1      ds	2
     16 U0082		       00 00	   ghostColPtr ds	2	; Pointer to which color palette to use
     17 U0084		       00	   p0_x       ds	1
     18 U0085		       00	   p0_y       ds	1
     19 U0086		       00	   selectMode ds	1
     20 U0087		       00	   selDebounceOn ds	1
     21 U0088		       00	   selDebounceTm ds	1
     22 U0089
     23 U0089
     24 U0089		       00 00	   snd_on     ds	2	; 1 byte per audio channel - greater than 0 if sound is playing
     25 U008b
     26 U00aa ????				      seg.u	vars
     27 U00a0					      org	$A0
     28 U00a0
     29 U00a0		       00 00	   temp       ds	2
     30 U00a2		       00 00	   temp2      ds	2
     31 U00a4		       00 00	   scanline   ds	2	; 1 byte - current scanline
     32 U00a6		       00	   fcount     ds	1	; 1 byte - frame counter
     33 U00a7		       00 00	   t_	      ds	2	; 1 byte - temp
     34 U00a9		       00	   mod_1      ds	1	; 1 byte - modulo 1
     35 U00aa
     36 U00aa
     37  10000 ????				       seg	main	; start of main segment
     38  f000					      org	$F000
     39  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     41  f00b
     42  f00b		       a9 01		      lda	#1
     43  f00d		       85 0a		      sta	CTRLPF
     44  f00f
     45  f00f		       a9 1e		      lda	#$1E
     46  f011		       85 08		      sta	COLUPF
     47  f013
     48  f013		       a9 00		      lda	#$0	;$80  10000000
     49  f015		       85 80		      sta	c16_1
     50  f017
     51  f017		       a9 80		      lda	#$80	;$AA	  ; $55  10101010
     52  f019		       85 81		      sta	c16_1+1
     53  f01b
     54  f01b		       a9 10		      lda	#SPEED
     55  f01d		       85 a9		      sta	mod_1
     56  f01f
      0  f01f				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f01f		       a9 0e		      lda	#%1110
      2  f021		       85 02	   .VSLP1     sta	WSYNC
      3  f023		       85 00		      sta	VSYNC
      4  f025		       4a		      lsr
      5  f026		       d0 f9		      bne	.VSLP1
     58  f028							; -------- set timer -------------------------------
     59  f028							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     60  f028							; 2812 machine cycles / 64 clocks = 43.9375
     61  f028		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     62  f02a		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     63  f02d							; -------- do stuff  -------------------------------
     64  f02d
     65  f02d		       c6 a9		      dec	mod_1
     66  f02f		       d0 0a		      bne	cont
     67  f031		       a9 10		      lda	#SPEED
     68  f033		       85 a9		      sta	mod_1
      0  f035					      _INC16	c16_1
      1  f035		       e6 80		      INC	c16_1+0
      2  f037		       d0 02		      BNE	_DONE
      3  f039		       e6 81		      INC	c16_1+1
      4  f039		       f0 3b	   _DONE      EQU	*
     70  f03b							; lda c16_1+0
     71  f03b							; _ROL16 c16_1, temp
     72  f03b							; lda temp+0
     73  f03b							; sta COLUBK
     74  f03b
     75  f03b				   cont
     76  f03b		       20 33 f1 	      jsr	snd_process
     77  f03e
     78  f03e
     79  f03e
     80  f03e
     81  f03e							; -------- wait ------------------------------------
     82  f03e		       ad 84 02 	      lda	INTIM	; check the timer
     83  f041		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     84  f043							; -------- done ------------------------------------
     85  f043		       a9 00		      lda	#0
     86  f045		       85 01		      sta	VBLANK
     87  f047
     88  f047		       a2 c0		      ldx	#PF_H
     89  f049		       86 a4		      stx	scanline
     90  f04b							; sta WSYNC	       ; primera linea visible
     91  f04b
     92  f04b							; sample = t * (( (t>>12) | (t>>8)) &(63&(t>>4)));
     93  f04b		       a9 bb		      lda	#$BB
     94  f04d		       85 08		      sta	COLUPF
     95  f04f				   render
     96  f04f		       20 6d f0 	      jsr	kernel_1
     97  f052
     98  f052							; --------------------------------
     99  f052
    100  f052
    101  f052		       d0 03		      bne	gotorender	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    102  f054		       4c 5a f0 	      jmp	DoneWithFrame	; (3) 2 bytes del opcode (jmp) + 1 byte operando + byte del salto
    103  f057		       4c 4f f0    gotorender jmp	render
    104  f05a
    105  f05a							; --------------- DoneWithFrame	---------------
    106  f05a				   DoneWithFrame
    107  f05a							; ---- Overscan (30 scanlines)
    108  f05a							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    109  f05a							; 2280 machine cycles / 64 clocks = 35.625
    110  f05a		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    111  f05c		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    112  f05f
    113  f05f		       e6 a6		      inc	fcount
    114  f061
    115  f061		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    116  f063		       85 01		      sta	VBLANK	; turn off the beam
    117  f065
    118  f065							; -------- wait ------------------------------------
    119  f065		       ad 84 02 	      lda	INTIM	; check the timer
    120  f068		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    121  f06a							; -------- done ------------------------------------
    122  f06a
    123  f06a
    124  f06a		       4c 1f f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    125  f06d
    126  f06d							; --- END OF FRAME -------
    127  f06d
    128  f06d
    129  f06d				   kernel_1
    130  f06d		       85 02		      sta	WSYNC
    131  f06f
      0  f06f					      _ADD16	c16_1, scanline, temp
      1  f06f					      IF	c16_1 != scanline
      2  f06f		       18		      CLC
      3  f070		       a5 80		      LDA	c16_1+0
      4  f072		       65 a4		      ADC	scanline+0
      5  f074		       85 a0		      STA	temp+0
      6  f076		       a5 81		      LDA	c16_1+1
      7  f078		       65 a5		      ADC	scanline+1
      8  f07a		       85 a1		      STA	temp+1
      9  f07c				  -	      ELSE
     10  f07c				  -	      _ASL16	c16_1,temp
     11  f07c					      ENDIF
      0  f07c					      _ROL16	temp, temp
      1  f07c				  -	      IF	temp != temp
      2  f07c				  -	      LDA	temp+0
      3  f07c				  -	      ROL
      4  f07c				  -	      STA	temp+0
      5  f07c				  -	      LDA	temp+1
      6  f07c				  -	      ROL
      7  f07c				  -	      STA	temp+1
      8  f07c					      ELSE
      9  f07c		       26 a0		      ROL	temp+0
     10  f07e		       26 a1		      ROL	temp+1
     11  f080					      ENDIF
      0  f080					      _ROL16	temp, temp
      1  f080				  -	      IF	temp != temp
      2  f080				  -	      LDA	temp+0
      3  f080				  -	      ROL
      4  f080				  -	      STA	temp+0
      5  f080				  -	      LDA	temp+1
      6  f080				  -	      ROL
      7  f080				  -	      STA	temp+1
      8  f080					      ELSE
      9  f080		       26 a0		      ROL	temp+0
     10  f082		       26 a1		      ROL	temp+1
     11  f084					      ENDIF
      0  f084					      _EOR16	scanline, temp, temp
      1  f084					      IF	scanline != temp
      2  f084		       a5 a4		      LDA	scanline+0
      3  f086		       45 a0		      EOR	temp+0
      4  f088		       85 a0		      STA	temp+0
      5  f08a		       a5 a5		      LDA	scanline+1
      6  f08c		       45 a1		      EOR	temp+1
      7  f08e		       85 a1		      STA	temp+1
      8  f090				  -	      ELSE
      9  f090				  -	      _CLR16	temp
     10  f090					      ENDIF
    136  f090
      0  f090					      _NEXTLINE
      1  f090		       c6 a4		      dec	scanline
      2  f092		       85 02		      sta	WSYNC
    138  f094
      0  f094					      _ADD16	c16_1, scanline, temp2
      1  f094					      IF	c16_1 != scanline
      2  f094		       18		      CLC
      3  f095		       a5 80		      LDA	c16_1+0
      4  f097		       65 a4		      ADC	scanline+0
      5  f099		       85 a2		      STA	temp2+0
      6  f09b		       a5 81		      LDA	c16_1+1
      7  f09d		       65 a5		      ADC	scanline+1
      8  f09f		       85 a3		      STA	temp2+1
      9  f0a1				  -	      ELSE
     10  f0a1				  -	      _ASL16	c16_1,temp2
     11  f0a1					      ENDIF
      0  f0a1					      _ROL16	temp2, temp2
      1  f0a1				  -	      IF	temp2 != temp2
      2  f0a1				  -	      LDA	temp2+0
      3  f0a1				  -	      ROL
      4  f0a1				  -	      STA	temp2+0
      5  f0a1				  -	      LDA	temp2+1
      6  f0a1				  -	      ROL
      7  f0a1				  -	      STA	temp2+1
      8  f0a1					      ELSE
      9  f0a1		       26 a2		      ROL	temp2+0
     10  f0a3		       26 a3		      ROL	temp2+1
     11  f0a5					      ENDIF
      0  f0a5					      _ROL16	temp2, temp2
      1  f0a5				  -	      IF	temp2 != temp2
      2  f0a5				  -	      LDA	temp2+0
      3  f0a5				  -	      ROL
      4  f0a5				  -	      STA	temp2+0
      5  f0a5				  -	      LDA	temp2+1
      6  f0a5				  -	      ROL
      7  f0a5				  -	      STA	temp2+1
      8  f0a5					      ELSE
      9  f0a5		       26 a2		      ROL	temp2+0
     10  f0a7		       26 a3		      ROL	temp2+1
     11  f0a9					      ENDIF
      0  f0a9					      _ORA16	temp, temp2, temp
      1  f0a9					      IF	temp != temp2
      2  f0a9		       a5 a0		      LDA	temp+0
      3  f0ab		       05 a2		      ORA	temp2+0
      4  f0ad		       85 a0		      STA	temp+0
      5  f0af		       a5 a1		      LDA	temp+1
      6  f0b1		       05 a3		      ORA	temp2+1
      7  f0b3		       85 a1		      STA	temp+1
      8  f0b5				  -	      ELSE
      9  f0b5				  -	      _XFR16	temp,temp
     10  f0b5					      ENDIF
    143  f0b5
      0  f0b5					      _NEXTLINE
      1  f0b5		       c6 a4		      dec	scanline
      2  f0b7		       85 02		      sta	WSYNC
    145  f0b9
      0  f0b9					      _ADD16	c16_1, scanline, temp2
      1  f0b9					      IF	c16_1 != scanline
      2  f0b9		       18		      CLC
      3  f0ba		       a5 80		      LDA	c16_1+0
      4  f0bc		       65 a4		      ADC	scanline+0
      5  f0be		       85 a2		      STA	temp2+0
      6  f0c0		       a5 81		      LDA	c16_1+1
      7  f0c2		       65 a5		      ADC	scanline+1
      8  f0c4		       85 a3		      STA	temp2+1
      9  f0c6				  -	      ELSE
     10  f0c6				  -	      _ASL16	c16_1,temp2
     11  f0c6					      ENDIF
      0  f0c6					      _ROL16	temp, temp
      1  f0c6				  -	      IF	temp != temp
      2  f0c6				  -	      LDA	temp+0
      3  f0c6				  -	      ROL
      4  f0c6				  -	      STA	temp+0
      5  f0c6				  -	      LDA	temp+1
      6  f0c6				  -	      ROL
      7  f0c6				  -	      STA	temp+1
      8  f0c6					      ELSE
      9  f0c6		       26 a0		      ROL	temp+0
     10  f0c8		       26 a1		      ROL	temp+1
     11  f0ca					      ENDIF
      0  f0ca					      _ROR16	temp2, temp2
      1  f0ca				  -	      IF	temp2 != temp2
      2  f0ca				  -	      LDA	temp2+1
      3  f0ca				  -	      ROR
      4  f0ca				  -	      STA	temp2+1
      5  f0ca				  -	      LDA	temp2+0
      6  f0ca				  -	      ROR
      7  f0ca				  -	      STA	temp2+0
      8  f0ca					      ELSE
      9  f0ca		       66 a3		      ROR	temp2+1
     10  f0cc		       66 a2		      ROR	temp2+0
     11  f0ce					      ENDIF
      0  f0ce					      _EOR16	temp, temp2, temp
      1  f0ce					      IF	temp != temp2
      2  f0ce		       a5 a0		      LDA	temp+0
      3  f0d0		       45 a2		      EOR	temp2+0
      4  f0d2		       85 a0		      STA	temp+0
      5  f0d4		       a5 a1		      LDA	temp+1
      6  f0d6		       45 a3		      EOR	temp2+1
      7  f0d8		       85 a1		      STA	temp+1
      8  f0da				  -	      ELSE
      9  f0da				  -	      _CLR16	temp
     10  f0da					      ENDIF
    150  f0da
    151  f0da		       a5 a1		      lda	temp+1
    152  f0dc		       85 0f		      sta	PF2
    153  f0de
      0  f0de					      _NEXTLINE
      1  f0de		       c6 a4		      dec	scanline
      2  f0e0		       85 02		      sta	WSYNC
    155  f0e2
      0  f0e2					      _ADD16	c16_1, scanline, temp
      1  f0e2					      IF	c16_1 != scanline
      2  f0e2		       18		      CLC
      3  f0e3		       a5 80		      LDA	c16_1+0
      4  f0e5		       65 a4		      ADC	scanline+0
      5  f0e7		       85 a0		      STA	temp+0
      6  f0e9		       a5 81		      LDA	c16_1+1
      7  f0eb		       65 a5		      ADC	scanline+1
      8  f0ed		       85 a1		      STA	temp+1
      9  f0ef				  -	      ELSE
     10  f0ef				  -	      _ASL16	c16_1,temp
     11  f0ef					      ENDIF
    157  f0ef
      0  f0ef					      _NEXTLINE
      1  f0ef		       c6 a4		      dec	scanline
      2  f0f1		       85 02		      sta	WSYNC
    159  f0f3
      0  f0f3					      _EOR16	c16_1, #$55, temp2
      1  f0f3					      IF	c16_1 != #$55
      2  f0f3		       a5 80		      LDA	c16_1+0
      3  f0f5		       49 55		      EOR	#$55+0
      4  f0f7		       85 a2		      STA	temp2+0
      5  f0f9		       a5 81		      LDA	c16_1+1
      6  f0fb		       49 56		      EOR	#$55+1
      7  f0fd		       85 a3		      STA	temp2+1
      8  f0ff				  -	      ELSE
      9  f0ff				  -	      _CLR16	temp2
     10  f0ff					      ENDIF
    161  f0ff
      0  f0ff					      _NEXTLINE
      1  f0ff		       c6 a4		      dec	scanline
      2  f101		       85 02		      sta	WSYNC
    163  f103
      0  f103					      _ROL16	temp2, temp2
      1  f103				  -	      IF	temp2 != temp2
      2  f103				  -	      LDA	temp2+0
      3  f103				  -	      ROL
      4  f103				  -	      STA	temp2+0
      5  f103				  -	      LDA	temp2+1
      6  f103				  -	      ROL
      7  f103				  -	      STA	temp2+1
      8  f103					      ELSE
      9  f103		       26 a2		      ROL	temp2+0
     10  f105		       26 a3		      ROL	temp2+1
     11  f107					      ENDIF
      0  f107					      _ROL16	temp2, temp2
      1  f107				  -	      IF	temp2 != temp2
      2  f107				  -	      LDA	temp2+0
      3  f107				  -	      ROL
      4  f107				  -	      STA	temp2+0
      5  f107				  -	      LDA	temp2+1
      6  f107				  -	      ROL
      7  f107				  -	      STA	temp2+1
      8  f107					      ELSE
      9  f107		       26 a2		      ROL	temp2+0
     10  f109		       26 a3		      ROL	temp2+1
     11  f10b					      ENDIF
      0  f10b					      _EOR16	temp, temp2, temp
      1  f10b					      IF	temp != temp2
      2  f10b		       a5 a0		      LDA	temp+0
      3  f10d		       45 a2		      EOR	temp2+0
      4  f10f		       85 a0		      STA	temp+0
      5  f111		       a5 a1		      LDA	temp+1
      6  f113		       45 a3		      EOR	temp2+1
      7  f115		       85 a1		      STA	temp+1
      8  f117				  -	      ELSE
      9  f117				  -	      _CLR16	temp
     10  f117					      ENDIF
      0  f117					      _AND16	temp, temp, temp
      1  f117				  -	      IF	temp != temp
      2  f117				  -	      LDA	temp+0
      3  f117				  -	      AND	temp+0
      4  f117				  -	      STA	temp+0
      5  f117				  -	      LDA	temp+1
      6  f117				  -	      AND	temp+1
      7  f117				  -	      STA	temp+1
      8  f117					      ELSE
      0  f117					      _XFR16	temp,temp
      1  f117				  -	      IF	temp != temp
      2  f117				  -	      IF	temp > temp
      3  f117				  -	      LDA	temp+0
      4  f117				  -	      STA	temp+0
      5  f117				  -	      LDA	temp+1
      6  f117				  -	      STA	temp+1
      7  f117				  -	      ELSE
      8  f117				  -	      LDA	temp+1
      9  f117				  -	      STA	temp+1
     10  f117				  -	      LDA	temp+0
     11  f117				  -	      STA	temp+0
     12  f117				  -	      ENDIF
     13  f117					      ENDIF
     10  f117					      ENDIF
    168  f117
    169  f117		       a5 a0		      lda	temp+0
    170  f119		       85 0e		      sta	PF1
    171  f11b
    172  f11b		       c6 a4		      dec	scanline
    173  f11d		       60		      rts
    174  f11e
    175  f11e
    176  f11e
    177  f11e							; cues a sound to play. sets audio registers based on table lookup sndbank.
    178  f11e							; parameters: x = channel (0|1), y = sound to play
    179  f11e				   snd_play
    180  f11e		       b9 05 f2 	      lda	sndbank_type,y
    181  f121		       95 15		      sta	AUDC0,x	; audio control
    182  f123		       b9 09 f2 	      lda	sndbank_vol,y
    183  f126		       95 19		      sta	AUDV0,x	; audio volume
    184  f128		       b9 0d f2 	      lda	sndbank_pitch,y
    185  f12b		       95 17		      sta	AUDF0,x	; audio frequence
    186  f12d		       b9 11 f2 	      lda	sndbank_len,y
    187  f130		       95 89		      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    188  f132		       60		      rts
    189  f133
    190  f133							; process sound channels to turn off volume when sound length counter runs out
    191  f133				   snd_process
    192  f133		       a2 01		      ldx	#1	; channel to process, start with channel 1
    193  f135				   snd_ch
    194  f135		       b5 89		      lda	snd_on,x	; get sound length counter for this channel
    195  f137		       f0 08		      beq	snd_done	; are we playing a sound? a>1
    196  f139		       d6 89		      dec	snd_on,x	; yes, decrese the sound length counter for this channel
    197  f13b		       d0 04		      bne	snd_cont	; did we reach the end of the sound length?
    198  f13d		       a9 00		      lda	#0	; yes
    199  f13f		       95 19		      sta	AUDV0,x	; turn off the volume for this channel
    200  f141				   snd_done
    201  f141
    202  f141				   snd_cont
    203  f141		       ca		      dex		; do it again for channel 0
    204  f142		       f0 f1		      beq	snd_ch
    205  f144		       60		      rts
    206  f145
    207  f145
    208  f145
    209  f145		       a9 01	   checkInput lda	#%00000001	; (2) read reset input
    210  f147		       2c 82 02 	      bit	SWCHB
    211  f14a		       d0 03		      bne	switch_noreset
    212  f14c		       4c 00 f0 	      jmp	reset
    213  f14f				   switch_noreset
    214  f14f
    215  f14f							; Game Select
    216  f14f				   switch_select_chkbounced
    217  f14f		       a5 87		      lda	selDebounceOn	; (2)
    218  f151		       d0 2a		      bne	switch_select_decrease	; if debounce already on then branch out
    219  f153
    220  f153		       a9 02		      lda	#%00000010
    221  f155		       2c 82 02 	      bit	SWCHB
    222  f158		       d0 2b		      bne	switch_select_end
    223  f15a
    224  f15a		       a9 01		      lda	#1
    225  f15c		       85 87		      sta	selDebounceOn
    226  f15e		       a9 28		      lda	#40
    227  f160		       85 88		      sta	selDebounceTm
    228  f162
    229  f162		       06 86		      asl	selectMode
    230  f164		       90 0f		      bcc	switch_select_solid
    231  f166		       e6 86		      inc	selectMode
    232  f168
    233  f168				   switch_select_stripped
    234  f168		       a9 aa		      lda	#%10101010
    235  f16a		       85 0d		      sta	PF0
    236  f16c		       85 0f		      sta	PF2
    237  f16e		       a9 55		      lda	#%01010101
    238  f170		       85 0e		      sta	PF1
    239  f172		       4c 85 f1 	      jmp	switch_select_end
    240  f175
    241  f175				   switch_select_solid
    242  f175		       a9 00		      lda	#0
    243  f177		       85 0d		      sta	PF0
    244  f179		       85 0e		      sta	PF1
    245  f17b		       85 0f		      sta	PF2
    246  f17d
    247  f17d				   switch_select_decrease
    248  f17d		       c6 88		      dec	selDebounceTm
    249  f17f		       d0 04		      bne	switch_select_end
    250  f181		       a9 00		      lda	#0
    251  f183		       85 87		      sta	selDebounceOn
    252  f185				   switch_select_end
    253  f185
    254  f185
    255  f185							; B/W input
    256  f185		       a2 00		      ldx	#0
    257  f187		       a9 08		      lda	#%00001000
    258  f189		       2c 82 02 	      bit	SWCHB
    259  f18c		       d0 02		      bne	switch_color
    260  f18e		       a2 01		      ldx	#1
    261  f190				   switch_color
    262  f190		       bd 21 f2 	      lda	ghost_pColLSB,x	; (5)
    263  f193		       85 82		      sta	ghostColPtr	; (3)
    264  f195		       bd 22 f2 	      lda	ghost_pColMSB,x	; (5)
    265  f198		       85 83		      sta	ghostColPtr+1	; (3)
    266  f19a
    267  f19a		       a0 02		      ldy	#2
    268  f19c		       b1 82		      lda	(ghostColPtr),y
    269  f19e		       85 09		      sta	COLUBK
    270  f1a0
    271  f1a0		       a0 03		      ldy	#3
    272  f1a2		       b1 82		      lda	(ghostColPtr),y
    273  f1a4		       85 08		      sta	COLUPF
    274  f1a6
    275  f1a6							; Player 0 Difficulty
    276  f1a6		       a2 00		      ldx	#0
    277  f1a8		       a9 40		      lda	#%01000000
    278  f1aa		       2c 82 02 	      bit	SWCHB
    279  f1ad		       d0 00		      bne	switch_P0Diff1
    280  f1af				   switch_P0Diff2		; Difficulty 2
    281  f1af				   switch_P0Diff1		; Difficulty 1
    282  f1af
    283  f1af							; Player 1 Difficulty
    284  f1af		       a2 00		      ldx	#0
    285  f1b1		       a9 80		      lda	#%10000000
    286  f1b3		       2c 82 02 	      bit	SWCHB
    287  f1b6		       d0 00		      bne	switch_P1Diff1
    288  f1b8				   switch_P1Diff2		; Difficulty 2
    289  f1b8				   switch_P1Diff1		; Difficulty 1
    290  f1b8
    291  f1b8							; Read button input
    292  f1b8		       a0 00		      ldy	#0	; color index set to default yellow
    293  f1ba		       24 0c		      bit	INPT4	; check D7 of INPT4
    294  f1bc		       30 02		      bmi	button_nopress	; branch if minus. D7 will me 0 is button is pressed
    295  f1be		       a0 01		      ldy	#1
    296  f1c0				   button_nopress
    297  f1c0		       b1 82		      lda	(ghostColPtr),y
    298  f1c2		       85 06		      sta	COLUP0	; set the P0 color
    299  f1c4
    300  f1c4							; read direction input
    301  f1c4		       a6 84		      ldx	p0_x
    302  f1c6		       a9 80		      lda	#%10000000	; check for right movement
    303  f1c8		       2c 80 02 	      bit	SWCHA
    304  f1cb		       d0 09		      bne	pos_noright
    305  f1cd		       e0 98		      cpx	#152
    306  f1cf		       b0 05		      bcs	pos_noright
    307  f1d1		       e8		      inx
    308  f1d2		       a9 08		      lda	#%00001000
    309  f1d4		       85 0b		      sta	REFP0
    310  f1d6				   pos_noright
    311  f1d6		       a9 40		      lda	#%01000000	; check left movement
    312  f1d8		       2c 80 02 	      bit	SWCHA
    313  f1db		       d0 09		      bne	pos_noleft
    314  f1dd		       e0 01		      cpx	#1
    315  f1df		       90 05		      bcc	pos_noleft
    316  f1e1		       ca		      dex
    317  f1e2		       a9 00		      lda	#0
    318  f1e4		       85 0b		      sta	REFP0
    319  f1e6				   pos_noleft
    320  f1e6		       86 84		      stx	p0_x
    321  f1e8
    322  f1e8		       a6 85		      ldx	p0_y
    323  f1ea		       a9 20		      lda	#%00100000
    324  f1ec		       2c 80 02 	      bit	SWCHA
    325  f1ef		       d0 05		      bne	pos_nodown
    326  f1f1		       e0 4a		      cpx	#74
    327  f1f3		       90 01		      bcc	pos_nodown
    328  f1f5		       ca		      dex
    329  f1f6				   pos_nodown
    330  f1f6		       a9 10		      lda	#%00010000
    331  f1f8		       2c 80 02 	      bit	SWCHA
    332  f1fb		       d0 05		      bne	pos_noup
    333  f1fd		       e0 ff		      cpx	#255
    334  f1ff		       b0 01		      bcs	pos_noup
    335  f201		       e8		      inx
    336  f202				   pos_noup
    337  f202		       86 85		      stx	p0_y
    338  f204
    339  f204		       60		      rts
    340  f205
    341  f205
    342  f205							; define sounds, bounce, reset, backward, forward
    343  f205				   sndbank_type
    344  f205		       0c 02 06 06	      .byte.b	$0C, $02, $06, $06
    345  f209				   sndbank_vol
    346  f209		       02 06 04 04	      .byte.b	$02, $06, $04, $04
    347  f20d				   sndbank_pitch
    348  f20d		       0d 03 09 03	      .byte.b	$0D, $03, $09, $03
    349  f211				   sndbank_len
    350  f211		       01 08 03 03	      .byte.b	$01, $08, $03, $03
    351  f215
    352  f215
    353  f215				   colors
    354  f215		       36 48 76 b4*	      .byte.b	$36, $48, $76, $b4, $ea, $4c, $8a, $a4	; Player 0-7 colors
    355  f21d
    356  f21d
    357  f21d
    358  f21d		       1e	   ghost_color .byte.b	#$1E	; Bright Yellow
    359  f21e		       42		      .byte.b	#$42	; Dark Red
    360  f21f		       98		      .byte.b	#$98	; Mid Blue
    361  f220		       ae		      .byte.b	#$AE	; Bright Blue
    362  f221
    363  f221		       1d	   ghost_pColLSB .byte.b	<ghost_color	; LSB
    364  f222		       f2	   ghost_pColMSB .byte.b	>ghost_color	; MSB
    365  f223
    366  f223
    367  f223				   reversedOrderBits
    368  f223		       00 80 40 c0*	      .byte.b	$00, $80, $40, $C0, $20, $A0, $60, $E0
    369  f22b		       10 90 50 d0*	      .byte.b	$10, $90, $50, $D0, $30, $B0, $70, $F0
    370  f233		       08 88 48 c8*	      .byte.b	$08, $88, $48, $C8, $28, $A8, $68, $E8
    371  f23b		       18 98 58 d8*	      .byte.b	$18, $98, $58, $D8, $38, $B8, $78, $F8
    372  f243		       04 84 44 c4*	      .byte.b	$04, $84, $44, $C4, $24, $A4, $64, $E4
    373  f24b		       14 94 54 d4*	      .byte.b	$14, $94, $54, $D4, $34, $B4, $74, $F4
    374  f253		       0c 8c 4c cc*	      .byte.b	$0C, $8C, $4C, $CC, $2C, $AC, $6C, $EC
    375  f25b		       1c 9c 5c dc*	      .byte.b	$1C, $9C, $5C, $DC, $3C, $BC, $7C, $FC
    376  f263		       02 82 42 c2*	      .byte.b	$02, $82, $42, $C2, $22, $A2, $62, $E2
    377  f26b		       12 92 52 d2*	      .byte.b	$12, $92, $52, $D2, $32, $B2, $72, $F2
    378  f273		       0a 8a 4a ca*	      .byte.b	$0A, $8A, $4A, $CA, $2A, $AA, $6A, $EA
    379  f27b		       1a 9a 5a da*	      .byte.b	$1A, $9A, $5A, $DA, $3A, $BA, $7A, $FA
    380  f283		       06 86 46 c6*	      .byte.b	$06, $86, $46, $C6, $26, $A6, $66, $E6
    381  f28b		       16 96 56 d6*	      .byte.b	$16, $96, $56, $D6, $36, $B6, $76, $F6
    382  f293		       0e 8e 4e ce*	      .byte.b	$0E, $8E, $4E, $CE, $2E, $AE, $6E, $EE
    383  f29b		       1e 9e 5e de*	      .byte.b	$1E, $9E, $5E, $DE, $3E, $BE, $7E, $FE
    384  f2a3		       01 81 41 c1*	      .byte.b	$01, $81, $41, $C1, $21, $A1, $61, $E1
    385  f2ab		       11 91 51 d1*	      .byte.b	$11, $91, $51, $D1, $31, $B1, $71, $F1
    386  f2b3		       09 89 49 c9*	      .byte.b	$09, $89, $49, $C9, $29, $A9, $69, $E9
    387  f2bb		       19 99 59 d9*	      .byte.b	$19, $99, $59, $D9, $39, $B9, $79, $F9
    388  f2c3		       05 85 45 c5*	      .byte.b	$05, $85, $45, $C5, $25, $A5, $65, $E5
    389  f2cb		       15 95 55 d5*	      .byte.b	$15, $95, $55, $D5, $35, $B5, $75, $F5
    390  f2d3		       0d 8d 4d cd*	      .byte.b	$0D, $8D, $4D, $CD, $2D, $AD, $6D, $ED
    391  f2db		       1d 9d 5d dd*	      .byte.b	$1D, $9D, $5D, $DD, $3D, $BD, $7D, $FD
    392  f2e3		       03 83 43 c3*	      .byte.b	$03, $83, $43, $C3, $23, $A3, $63, $E3
    393  f2eb		       13 93 53 d3*	      .byte.b	$13, $93, $53, $D3, $33, $B3, $73, $F3
    394  f2f3		       0b 8b 4b cb*	      .byte.b	$0B, $8B, $4B, $CB, $2B, $AB, $6B, $EB
    395  f2fb		       1b 9b 5b db*	      .byte.b	$1B, $9B, $5B, $DB, $3B, $BB, $7B, $FB
    396  f303		       07 87 47 c7*	      .byte.b	$07, $87, $47, $C7, $27, $A7, $67, $E7
    397  f30b		       17 97 57 d7*	      .byte.b	$17, $97, $57, $D7, $37, $B7, $77, $F7
    398  f313		       0f 8f 4f cf*	      .byte.b	$0F, $8F, $4F, $CF, $2F, $AF, $6F, $EF
    399  f31b		       1f 9f 5f df*	      .byte.b	$1F, $9F, $5F, $DF, $3F, $BF, $7F, $FF
    400  f323
    401  f323
    402  ffd0					      org	$FFD0
    403  ffd0		       00 00 00 00	      .word.w	$0000,$0000
    404  ffd4		       a1 b3 77 10	      .word.w	$B3A1, $1077
    405  ffd8		       00 00 20 24	      .word.w	$0000,$2420
    406  ffdc		       00 00 00 00	      .word.w	$0000,$0000
    407  ffe0
    408  fffa					      org	$FFFA
    409  fffa
    410  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    411  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    412  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    413  10000
    414  10000
    415  10000
