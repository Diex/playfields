------- FILE kernel_06.1.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE kernel_06.1.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE kernel_06.1.asm
      4  0000 ????						;
      5  0000 ????						; This Episode on Youtube - https://youtu.be/KJYeQjJTkj4
      6  0000 ????						; Email - 8blit0@gmail.com
      7  0000 ????
      8  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
      9  0000 ????	       00 c0	   PF_H       equ	192	; playfield height
     10  0000 ????
     11 U0094 ????				      seg.u	temp	; uninitialized segment
     12 U0080					      org	$80	; origin set at base of ram
     13 U0080							; up to 9F
     14 U0080		       00 00 00    c24_1      ds	3
     15 U0083		       00 00 00 00*params     ds	8
     16 U008b		       00 00	   c16_1      ds	2
     17 U008d
     18 U008d		       00 00 00    plfys      ds	3
     19 U0090		       00 00	   revbits    ds	2
     20 U0092
     21 U0092		       00 00	   MEM	      ds	2
     22 U0094
     23 U00ac ????				      seg.u	vars
     24 U00a0					      org	$A0
     25 U00a0
     26 U00a0		       00	   temp       ds	1
     27 U00a1		       00	   scanline   ds	1	; 1 byte - current scanline
     28 U00a2		       00	   fcount     ds	1	; 1 byte - frame counter
     29 U00a3		       00 00	   t_	      ds	2	; 1 byte - temp
     30 U00a5		       00	   mod_1      ds	1	; 1 byte - modulo 1
     31 U00a6		       00	   pfcolor    ds	1	; 1 byte - playfield color
     32 U00a7
     33 U00a7		       00	   selDebounceTm ds	1	; 1 byte - select debounce timer
     34 U00a8		       00	   selDebounceOn ds	1	; 1 byte - select debounce on
     35 U00a9		       00	   selectMode ds	1	; 1 byte - select mode
     36 U00aa
     37 U00aa		       00	   p0_x       ds	1	; 1 byte - player 0 x position
     38 U00ab		       00	   p0_y       ds	1	; 1 byte - player 0 y position
     39 U00ac
     40  10000 ????				       seg	main	; start of main segment
     41  f000					      org	$F000
     42  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     44  f00b
     45  f00b		       a9 01		      lda	#1
     46  f00d		       85 0a		      sta	CTRLPF
     47  f00f
     48  f00f		       a9 2b		      lda	#$2B
     49  f011		       85 09		      sta	COLUBK
     50  f013		       a9 1e		      lda	#$1E
     51  f015		       85 08		      sta	COLUPF
     52  f017
     53  f017		       a9 02		      lda	#2
     54  f019		       85 a6		      sta	pfcolor
     55  f01b
      0  f01b				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f01b		       a9 0e		      lda	#%1110
      2  f01d		       85 02	   .VSLP1     sta	WSYNC
      3  f01f		       85 00		      sta	VSYNC
      4  f021		       4a		      lsr
      5  f022		       d0 f9		      bne	.VSLP1
     57  f024							; -------- set timer -------------------------------
     58  f024							; 37 scanlines x 76 machine cycles per scanline = 2812 machine cycles
     59  f024							; 2812 machine cycles / 64 clocks = 43.9375
     60  f024		       a9 2c		      lda	#44	; We'll round down, and clean up the remaining cycles with a WSYNC
     61  f026		       8d 96 02 	      sta	TIM64T	; Set a count of 43 with 64-clock interval
     62  f029							; -------- do stuff  -------------------------------
     63  f029
     64  f029		       a6 aa		      ldx	p0_x
     65  f02b		       86 08		      stx	COLUPF
     66  f02d		       a6 ab		      ldx	p0_y
     67  f02f		       86 09		      stx	COLUBK
     68  f031
     69  f031
     70  f031							; -------- wait ------------------------------------
     71  f031		       ad 84 02 	      lda	INTIM	; check the timer
     72  f034		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
     73  f036							; -------- done ------------------------------------
     74  f036
     75  f036		       a9 00		      lda	#0
     76  f038		       85 01		      sta	VBLANK
     77  f03a
     78  f03a		       a9 c0		      lda	#PF_H
     79  f03c		       85 a1		      sta	scanline
     80  f03e
     81  f03e		       20 0d f1 	      jsr	inc24
     82  f041
     83  f041							; -------- ; primera linea visible  ------------------------------------
     84  f041
     85  f041		       85 02		      sta	WSYNC
     86  f043
     87  f043
     88  f043
     89  f043
     90  f043
     91  f043		       85 02	   kernel     sta	WSYNC
     92  f045		       c6 a1		      dec	scanline
     93  f047		       85 02		      sta	WSYNC
     94  f049							; PF0
     95  f049
     96  f049		       a5 81		      lda	c24_1+1
     97  f04b		       20 26 f1 	      jsr	reverseBits
     98  f04e		       2a		      rol
     99  f04f		       2a		      rol
    100  f050		       2a		      rol
    101  f051		       45 80		      eor	c24_1
    102  f053		       45 a1		      eor	scanline
    103  f055		       85 0f		      sta	PF2
    104  f057
    105  f057							; PF1
    106  f057		       a5 82		      lda	c24_1+2
    107  f059		       2a		      rol
    108  f05a		       49 0f		      eor	#15
    109  f05c		       45 a1		      eor	scanline
    110  f05e		       85 0e		      sta	PF1
    111  f060
    112  f060							; PF2
    113  f060							; lda c24_1
    114  f060							; ror
    115  f060							; eor #7
    116  f060							; jsr reverseBits
    117  f060							; eor scanline
    118  f060							; sta PF0
    119  f060
    120  f060							; ldy #0
    121  f060							; lda plfys,y
    122  f060							; sta PF0
    123  f060
    124  f060							; iny
    125  f060							; lda plfys,y
    126  f060							; sta PF1
    127  f060
    128  f060							; iny
    129  f060							; lda plfys,y
    130  f060							; sta PF2
    131  f060
    132  f060
    133  f060		       c6 a1		      dec	scanline	; (2)
    134  f062		       d0 df		      bne	kernel	; (3) 2 bytes del opcode (beq) + 1 byte operando + byte del salto
    135  f064
    136  f064							; --------------- DoneWithFrame	---------------
    137  f064
    138  f064							; ---- Overscan (30 scanlines)
    139  f064							; 30 scanlines x 76 machine cycles = 2280 machine cycles
    140  f064							; 2280 machine cycles / 64 clocks = 35.625
    141  f064		       a9 23		      lda	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    142  f066		       8d 96 02 	      sta	TIM64T	; Set a count of 35 with 64-clock interval
    143  f069
    144  f069
    145  f069
    146  f069
    147  f069		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    148  f06b		       85 01		      sta	VBLANK	; turn off the beam
    149  f06d
    150  f06d							; -------- wait ------------------------------------
    151  f06d		       ad 84 02 	      lda	INTIM	; check the timer
    152  f070		       d0 fb		      bne	.-3	; 2 bytes del opcode (bne) + 1 byte operando
    153  f072							; -------- done ------------------------------------
    154  f072
    155  f072
    156  f072							; -------- INPUT ------------------------------------
    157  f072							; Reset
    158  f072		       a9 01	   input      lda	#%00000001	; (2) read reset input
    159  f074		       2c 82 02 	      bit	SWCHB
    160  f077		       d0 03		      bne	switch_noreset
    161  f079		       4c 00 f0 	      jmp	reset
    162  f07c				   switch_noreset
    163  f07c
    164  f07c							; Game Select
    165  f07c				   switch_select_chkbounced
    166  f07c		       a5 a8		      lda	selDebounceOn	; (2)
    167  f07e		       d0 18		      bne	switch_select_decrease	; if debounce already on then branch out
    168  f080
    169  f080		       a9 02		      lda	#%00000010
    170  f082		       2c 82 02 	      bit	SWCHB
    171  f085		       d0 19		      bne	switch_select_end
    172  f087
    173  f087		       a9 01		      lda	#1
    174  f089		       85 a8		      sta	selDebounceOn
    175  f08b		       a9 28		      lda	#40
    176  f08d		       85 a7		      sta	selDebounceTm
    177  f08f
    178  f08f		       06 a9		      asl	selectMode
    179  f091		       90 05		      bcc	switch_select_solid
    180  f093		       e6 a9		      inc	selectMode
    181  f095
    182  f095				   switch_select_stripped
    183  f095							; lda #%10101010
    184  f095							; sta PF0
    185  f095							; sta PF2
    186  f095							; lda #%01010101
    187  f095							; sta PF1
    188  f095		       4c a0 f0 	      jmp	switch_select_end
    189  f098
    190  f098				   switch_select_solid
    191  f098							; lda #0
    192  f098							; sta PF0
    193  f098							; sta PF1
    194  f098							; sta PF2
    195  f098
    196  f098				   switch_select_decrease
    197  f098		       c6 a7		      dec	selDebounceTm
    198  f09a		       d0 04		      bne	switch_select_end
    199  f09c		       a9 00		      lda	#0
    200  f09e		       85 a8		      sta	selDebounceOn
    201  f0a0				   switch_select_end
    202  f0a0
    203  f0a0
    204  f0a0							; B/W input
    205  f0a0		       a2 00		      ldx	#0
    206  f0a2		       a9 08		      lda	#%00001000
    207  f0a4		       2c 82 02 	      bit	SWCHB
    208  f0a7		       d0 02		      bne	switch_color
    209  f0a9		       a2 01		      ldx	#1
    210  f0ab				   switch_color
    211  f0ab							;TODO switch color
    212  f0ab
    213  f0ab							; Player 0 Difficulty
    214  f0ab		       a2 00		      ldx	#0
    215  f0ad		       a9 40		      lda	#%01000000
    216  f0af		       2c 82 02 	      bit	SWCHB
    217  f0b2		       d0 00		      bne	switch_P0Diff1
    218  f0b4				   switch_P0Diff2
    219  f0b4							; TODO Difficulty 2
    220  f0b4				   switch_P0Diff1
    221  f0b4							; TODO Difficulty 1
    222  f0b4
    223  f0b4							; Player 1 Difficulty
    224  f0b4		       a2 00		      ldx	#0
    225  f0b6		       a9 80		      lda	#%10000000
    226  f0b8		       2c 82 02 	      bit	SWCHB
    227  f0bb		       d0 00		      bne	switch_P1Diff1
    228  f0bd				   switch_P1Diff2		; Difficulty 2
    229  f0bd				   switch_P1Diff1		; Difficulty 1
    230  f0bd
    231  f0bd							; ------- joystick:
    232  f0bd							; Read button input
    233  f0bd							; ldy #0		; color index set to default yellow
    234  f0bd		       24 0c		      bit	INPT4	; check D7 of INPT4
    235  f0bf		       30 00		      bmi	button_nopress	; branch if minus. D7 will me 0 is button is pressed
    236  f0c1							; ldy #1
    237  f0c1				   button_press
    238  f0c1							; TODO
    239  f0c1				   button_nopress
    240  f0c1
    241  f0c1							; read direction input
    242  f0c1		       a6 aa		      ldx	p0_x	; p0_x es la posición del jugador 0 en x
    243  f0c3
    244  f0c3		       a9 80		      lda	#%10000000	; P0 Right switch
    245  f0c5		       2c 80 02 	      bit	SWCHA
    246  f0c8		       d0 05		      bne	pos_noright	; z es el estado del boton: branch if no se movió.
    247  f0ca
    248  f0ca
    249  f0ca		       e0 ff		      cpx	#$FF	; max right position
    250  f0cc		       b0 01		      bcs	pos_noright
    251  f0ce		       e8		      inx
    252  f0cf
    253  f0cf							; lda #%00001000    ; invertir el playfield
    254  f0cf							; sta REFP0
    255  f0cf				   pos_noright
    256  f0cf		       a9 40		      lda	#%01000000	; check left movement
    257  f0d1		       2c 80 02 	      bit	SWCHA
    258  f0d4		       d0 05		      bne	pos_noleft
    259  f0d6		       e0 01		      cpx	#1
    260  f0d8		       90 01		      bcc	pos_noleft
    261  f0da		       ca		      dex
    262  f0db							; lda #0
    263  f0db							; sta REFP0
    264  f0db				   pos_noleft
    265  f0db		       86 aa		      stx	p0_x
    266  f0dd
    267  f0dd		       a6 ab		      ldx	p0_y
    268  f0df		       a9 20		      lda	#%00100000
    269  f0e1		       2c 80 02 	      bit	SWCHA
    270  f0e4		       d0 05		      bne	pos_nodown
    271  f0e6		       e0 ff		      cpx	#$FF
    272  f0e8		       90 01		      bcc	pos_nodown
    273  f0ea		       ca		      dex
    274  f0eb				   pos_nodown
    275  f0eb		       a9 10		      lda	#%00010000
    276  f0ed		       2c 80 02 	      bit	SWCHA
    277  f0f0		       d0 05		      bne	pos_noup
    278  f0f2		       e0 ff		      cpx	#255
    279  f0f4		       b0 01		      bcs	pos_noup
    280  f0f6		       e8		      inx
    281  f0f7				   pos_noup
    282  f0f7		       86 ab		      stx	p0_y
    283  f0f9
    284  f0f9
    285  f0f9							; -------- done ------------------------------------
    286  f0f9
    287  f0f9		       4c 1b f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    288  f0fc
    289  f0fc							; -------- done ------------------------------------
    290  f0fc
    291  f0fc							; ---------
    292  f0fc							; Shift a 16bit value by one place left (e.g. multiply by two)
    293  f0fc		       06 83	   asl16      ASL	params+0	;Shift the LSB
    294  f0fe		       26 84		      ROL	params+1	;Rotate the MSB
    295  f100		       60		      rts
    296  f101
    297  f101
    298  f101		       18	   inc16      clc
    299  f102		       a5 8c		      lda	c16_1+1
    300  f104		       69 01		      adc	#1
    301  f106		       85 8c		      sta	c16_1+1
    302  f108		       90 01		      bcc	.+3
    303  f10a		       e6 8b		      inc	c16_1+0
    304  f10c							; ok
    305  f10c		       60		      rts
    306  f10d
    307  f10d		       18	   inc24      clc
    308  f10e		       a5 82		      lda	c24_1+2
    309  f110		       69 05		      adc	#5
    310  f112		       85 82		      sta	c24_1+2
    311  f114		       90 0f		      bcc	ok
    312  f116		       18		      clc
    313  f117		       a5 81		      lda	c24_1+1
    314  f119		       69 01		      adc	#1
    315  f11b		       85 81		      sta	c24_1+1
    316  f11d		       90 06		      bcc	ok
    317  f11f		       a5 80		      lda	c24_1+0
    318  f121		       69 01		      adc	#1
    319  f123		       85 80		      sta	c24_1+0
    320  f125		       60	   ok	      rts
    321  f126
    322  f126
    323  f126
    324  f126				   reverseBits
    325  f126		       aa		      tax
    326  f127		       bd 33 f1 	      lda	reversedOrderBits,x	; Load the value to be reversed from memory
    327  f12a		       60		      rts
    328  f12b
    329  f12b				   colors
    330  f12b		       36 48 76 b4*	      .byte.b	$36, $48, $76, $b4, $ea, $4c, $8a, $a4	; Player 0-7 colors
    331  f133
    332  f133
    333  f133				   reversedOrderBits
    334  f133		       00 00 80 00*	      .word.w	$00, $80, $40, $c0, $20, $a0, $60, $e0
    335  f143		       10 00 90 00*	      .word.w	$10, $90, $50, $d0, $30, $b0, $70, $f0
    336  f153		       08 00 88 00*	      .word.w	$08, $88, $48, $c8, $28, $a8, $68, $e8
    337  f163		       18 00 98 00*	      .word.w	$18, $98, $58, $d8, $38, $b8, $78, $f8
    338  f173		       04 00 84 00*	      .word.w	$04, $84, $44, $c4, $24, $a4, $64, $e4
    339  f183		       14 00 94 00*	      .word.w	$14, $94, $54, $d4, $34, $b4, $74, $f4
    340  f193		       0c 00 8c 00*	      .word.w	$0c, $8c, $4c, $cc, $2c, $ac, $6c, $ec
    341  f1a3		       1c 00 9c 00*	      .word.w	$1c, $9c, $5c, $dc, $3c, $bc, $7c, $fc
    342  f1b3		       02 00 82 00*	      .word.w	$02, $82, $42, $c2, $22, $a2, $62, $e2
    343  f1c3		       12 00 92 00*	      .word.w	$12, $92, $52, $d2, $32, $b2, $72, $f2
    344  f1d3		       0a 00 8a 00*	      .word.w	$0a, $8a, $4a, $ca, $2a, $aa, $6a, $ea
    345  f1e3		       1a 00 9a 00*	      .word.w	$1a, $9a, $5a, $da, $3a, $ba, $7a, $fa
    346  f1f3		       06 00 86 00*	      .word.w	$06, $86, $46, $c6, $26, $a6, $66, $e6
    347  f203		       16 00 96 00*	      .word.w	$16, $96, $56, $d6, $36, $b6, $76, $f6
    348  f213		       0e 00 8e 00*	      .word.w	$0e, $8e, $4e, $ce, $2e, $ae, $6e, $ee
    349  f223		       1e 00 9e 00*	      .word.w	$1e, $9e, $5e, $de, $3e, $be, $7e, $fe
    350  f233		       01 00 81 00*	      .word.w	$01, $81, $41, $c1, $21, $a1, $61, $e1
    351  f243		       11 00 91 00*	      .word.w	$11, $91, $51, $d1, $31, $b1, $71, $f1
    352  f253		       09 00 89 00*	      .word.w	$09, $89, $49, $c9, $29, $a9, $69, $e9
    353  f263		       19 00 99 00*	      .word.w	$19, $99, $59, $d9, $39, $b9, $79, $f9
    354  f273		       05 00 85 00*	      .word.w	$05, $85, $45, $c5, $25, $a5, $65, $e5
    355  f283		       15 00 95 00*	      .word.w	$15, $95, $55, $d5, $35, $b5, $75, $f5
    356  f293		       0d 00 8d 00*	      .word.w	$0d, $8d, $4d, $cd, $2d, $ad, $6d, $ed
    357  f2a3		       1d 00 9d 00*	      .word.w	$1d, $9d, $5d, $dd, $3d, $bd, $7d, $fd
    358  f2b3		       03 00 83 00*	      .word.w	$03, $83, $43, $c3, $23, $a3, $63, $e3
    359  f2c3		       13 00 93 00*	      .word.w	$13, $93, $53, $d3, $33, $b3, $73, $f3
    360  f2d3		       0b 00 8b 00*	      .word.w	$0b, $8b, $4b, $cb, $2b, $ab, $6b, $eb
    361  f2e3		       1b 00 9b 00*	      .word.w	$1b, $9b, $5b, $db, $3b, $bb, $7b, $fb
    362  f2f3		       07 00 87 00*	      .word.w	$07, $87, $47, $c7, $27, $a7, $67, $e7
    363  f303		       17 00 97 00*	      .word.w	$17, $97, $57, $d7, $37, $b7, $77, $f7
    364  f313		       0f 00 8f 00*	      .word.w	$0f, $8f, $4f, $cf, $2f, $af, $6f, $ef
    365  f323		       1f 00 9f 00*	      .word.w	$1f, $9f, $5f, $df, $3f, $bf, $7f, $ff
    366  f333
    367  f333
    368  fffa					      org	$FFFA
    369  fffa
    370  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    371  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    372  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    373  10000
    374  10000
    375  10000
    376  10000
